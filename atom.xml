<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.top.com/"/>
  <updated>2017-12-19T03:28:27.979Z</updated>
  <id>http://www.top.com/</id>
  
  <author>
    <name>马文磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis的五种数据类型</title>
    <link href="http://www.top.com/2017/12/15/Redis%E7%9A%84%E4%BA%94%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.top.com/2017/12/15/Redis的五中数据类型/</id>
    <published>2017-12-15T03:27:08.000Z</published>
    <updated>2017-12-19T03:28:27.979Z</updated>
    
    <content type="html"><![CDATA[<p>常用数据类型简介：</p><h2 id="一-redis常用五种数据类型-string-hash-list-set-zset-sorted-set"><a href="#一-redis常用五种数据类型-string-hash-list-set-zset-sorted-set" class="headerlink" title="一,redis常用五种数据类型:string,hash,list,set,zset(sorted set)."></a>一,redis常用五种数据类型:string,hash,list,set,zset(sorted set).</h2><h3 id="1-String类型"><a href="#1-String类型" class="headerlink" title="1.String类型"></a>1.String类型</h3><p>String是最简单的类型，一个key对应一个value</p><p>String类型的数据最大1G。<br>String类型的值可以被视作integer，从而可以让“INCR”命令族操作(incrby、decr、decrby),这种情况下，该integer的值限制在64位有符号数。<br>在list、set和zset中包含的独立的元素类型都是Redis String类型。</p><h3 id="2-List类型"><a href="#2-List类型" class="headerlink" title="2.List类型"></a>2.List类型</h3><p>链表类型，主要功能是push、pop、获取一个范围的所有值等。其中的key可以理解为链表的名字。</p><p>在Redis中，list就是Redis String的列表，按照插入顺序排序。比如使用LPUSH命令在list头插入一个元素，使用RPUSH命令在list的尾插入一个元素。当这两个命令之一作用于一个空的key时，一个新的list就创建出来了。</p><p>List的最大长度是2^32-1个元素。</p><h3 id="3-Set类型"><a href="#3-Set类型" class="headerlink" title="3.Set类型"></a>3.Set类型</h3><p>集合，和数学中的集合概念相似。操作中的key理解为集合的名字。</p><p>在Redis中，set就是Redis String的无序集合，不允许有重复元素。</p><p>Set的最大元素数是2^32-1。</p><p>Redis中对set的操作还有交集、并集、差集等。</p><h3 id="4-ZSet-Sorted-Set-类型"><a href="#4-ZSet-Sorted-Set-类型" class="headerlink" title="4.ZSet(Sorted Set)类型"></a>4.ZSet(Sorted Set)类型</h3><p>Zset是set的一个升级版本，在set的基础上增加了一个顺序属性，这一属性在添加修改元素时可以指定，每次指定后zset会自动安装指定值重新调整顺序。可以理解为一张表，一列存value，一列存顺序。操作中的key理解为zset的名字。</p><p>Zset的最大元素数是2^32-1。</p><p>对于已经有序的zset，仍然可以使用SORT命令，通过指定ASC|DESC参数对其进行排序。</p><h3 id="5-hash类型"><a href="#5-hash类型" class="headerlink" title="5.hash类型"></a>5.hash类型</h3><p>hash是最接近关系数据库结构的数据类型，可以将数据库一条记录或程序中一个对象转换成hashmap存放在redis中。</p><h2 id="二、jedis操作命令："><a href="#二、jedis操作命令：" class="headerlink" title="二、jedis操作命令："></a>二、jedis操作命令：</h2><h3 id="1-对value操作的命令"><a href="#1-对value操作的命令" class="headerlink" title="1.对value操作的命令"></a>1.对value操作的命令</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> exists(<span class="built_in">key</span>)：确认一个<span class="built_in">key</span>是否存在</span><br><span class="line"></span><br><span class="line"> del(<span class="built_in">key</span>)：删除一个<span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">type</span>(<span class="built_in">key</span>)：返回值的类型</span><br><span class="line"></span><br><span class="line"> <span class="built_in">keys</span>(pattern)：返回满足给定pattern的所有<span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"> randomkey：随机返回<span class="built_in">key</span>空间的一个<span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"> rename(oldname, newname)：将<span class="built_in">key</span>由oldname重命名为newname，若newname存在则删除newname表示的<span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"> dbsize：返回当前数据库中<span class="built_in">key</span>的数目</span><br><span class="line"></span><br><span class="line"> expire：设定一个<span class="built_in">key</span>的活动时间（s）</span><br><span class="line"></span><br><span class="line"> ttl：获得一个<span class="built_in">key</span>的活动时间</span><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span>(index)：按索引查询</span><br><span class="line"></span><br><span class="line"> move(<span class="built_in">key</span>, dbindex)：将当前数据库中的<span class="built_in">key</span>转移到有dbindex索引的数据库</span><br><span class="line"></span><br><span class="line"> flushdb：删除当前选择数据库中的所有<span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"> flushall：删除所有数据库中的所有<span class="built_in">key</span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h3 id="2-对String操作的命令"><a href="#2-对String操作的命令" class="headerlink" title="2.对String操作的命令"></a>2.对String操作的命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">set</span>(<span class="keyword">key</span>, <span class="keyword">value</span>)：给数据库中名称为<span class="keyword">key</span>的<span class="keyword">string</span>赋予值<span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">get</span>(<span class="keyword">key</span>)：返回数据库中名称为<span class="keyword">key</span>的<span class="keyword">string</span>的<span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"> getset(<span class="keyword">key</span>, <span class="keyword">value</span>)：给名称为<span class="keyword">key</span>的<span class="keyword">string</span>赋予上一次的<span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"> mget(key1, key2,…, <span class="keyword">key</span> N)：返回库中多个<span class="keyword">string</span>（它们的名称为key1，key2…）的<span class="keyword">value</span>     s</span><br><span class="line"></span><br><span class="line"> setnx(<span class="keyword">key</span>, <span class="keyword">value</span>)：如果不存在名称为<span class="keyword">key</span>的<span class="keyword">string</span>，则向库中添加<span class="keyword">string</span>，名称为<span class="keyword">key</span>，值为<span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"> setex(<span class="keyword">key</span>, <span class="keyword">time</span>, <span class="keyword">value</span>)：向库中添加<span class="keyword">string</span>（名称为<span class="keyword">key</span>，值为<span class="keyword">value</span>）同时，设定过期时间<span class="keyword">time</span></span><br><span class="line"></span><br><span class="line"> mset(key1, value1, key2, value2,…<span class="keyword">key</span> N, <span class="keyword">value</span> N)：同时给多个<span class="keyword">string</span>赋值，名称为<span class="keyword">key</span> i的<span class="keyword">string</span>赋值<span class="keyword">value</span> i</span><br><span class="line"></span><br><span class="line"> msetnx(key1, value1, key2, value2,…<span class="keyword">key</span> N, <span class="keyword">value</span> N)：如果所有名称为<span class="keyword">key</span> i的<span class="keyword">string</span>都不存在，则向库中添加<span class="keyword">string</span>，名称           <span class="keyword">key</span> i赋值为<span class="keyword">value</span> i</span><br><span class="line"></span><br><span class="line"> incr(<span class="keyword">key</span>)：名称为<span class="keyword">key</span>的<span class="keyword">string</span>增<span class="number">1</span>操作</span><br><span class="line"></span><br><span class="line"> incrby(<span class="keyword">key</span>, <span class="built_in">integer</span>)：名称为<span class="keyword">key</span>的<span class="keyword">string</span>增加<span class="built_in">integer</span></span><br><span class="line"></span><br><span class="line"> decr(<span class="keyword">key</span>)：名称为<span class="keyword">key</span>的<span class="keyword">string</span>减<span class="number">1</span>操作</span><br><span class="line"></span><br><span class="line"> decrby(<span class="keyword">key</span>, <span class="built_in">integer</span>)：名称为<span class="keyword">key</span>的<span class="keyword">string</span>减少<span class="built_in">integer</span></span><br><span class="line"></span><br><span class="line"> append(<span class="keyword">key</span>, <span class="keyword">value</span>)：名称为<span class="keyword">key</span>的<span class="keyword">string</span>的值附加<span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">substr</span>(<span class="keyword">key</span>, <span class="keyword">start</span>, <span class="keyword">end</span>)：返回名称为<span class="keyword">key</span>的<span class="keyword">string</span>的<span class="keyword">value</span>的子串</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728</span></span><br></pre></td></tr></table></figure><h3 id="3-对List操作的命令"><a href="#3-对List操作的命令" class="headerlink" title="3.对List操作的命令"></a>3.对List操作的命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> rpush(key, value)：在名称为key的list尾添加一个值为value的元素  </span><br><span class="line"></span><br><span class="line"> lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span><br><span class="line"></span><br><span class="line"> llen(key)：返回名称为key的list的长度</span><br><span class="line"></span><br><span class="line"> lrange(key, <span class="keyword">start</span>, <span class="keyword">end</span>)：返回名称为<span class="keyword">key</span>的<span class="keyword">list</span>中<span class="keyword">start</span>至<span class="keyword">end</span>之间的元素（下标从<span class="number">0</span>开始，下同）</span><br><span class="line"></span><br><span class="line"> <span class="keyword">ltrim</span>(<span class="keyword">key</span>, <span class="keyword">start</span>, <span class="keyword">end</span>)：截取名称为<span class="keyword">key</span>的<span class="keyword">list</span>，保留<span class="keyword">start</span>至<span class="keyword">end</span>之间的元素</span><br><span class="line"></span><br><span class="line"> lindex(<span class="keyword">key</span>, <span class="keyword">index</span>)：返回名称为<span class="keyword">key</span>的<span class="keyword">list</span>中<span class="keyword">index</span>位置的元素</span><br><span class="line"></span><br><span class="line"> lset(<span class="keyword">key</span>, <span class="keyword">index</span>, <span class="keyword">value</span>)：给名称为<span class="keyword">key</span>的<span class="keyword">list</span>中<span class="keyword">index</span>位置的元素赋值为<span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"> lrem(<span class="keyword">key</span>, <span class="keyword">count</span>, <span class="keyword">value</span>)：删除<span class="keyword">count</span>个名称为<span class="keyword">key</span>的<span class="keyword">list</span>中值为<span class="keyword">value</span>的元素。<span class="keyword">count</span>为<span class="number">0</span>，删除所有值为<span class="keyword">value</span>的元素，<span class="keyword">count</span>&gt;<span class="number">0</span>      从头至尾删除<span class="keyword">count</span>个值为<span class="keyword">value</span>的元素，<span class="keyword">count</span>&lt;<span class="number">0</span>从尾到头删除|<span class="keyword">count</span>|个值为<span class="keyword">value</span>的元素。</span><br><span class="line"></span><br><span class="line"> lpop(<span class="keyword">key</span>)：返回并删除名称为<span class="keyword">key</span>的<span class="keyword">list</span>中的首元素</span><br><span class="line"></span><br><span class="line"> rpop(<span class="keyword">key</span>)：返回并删除名称为<span class="keyword">key</span>的<span class="keyword">list</span>中的尾元素</span><br><span class="line"></span><br><span class="line"> blpop(key1, key2,… <span class="keyword">key</span> N, <span class="keyword">timeout</span>)：lpop 命令的<span class="keyword">block</span>版本。即当<span class="keyword">timeout</span>为<span class="number">0</span>时，若遇到名称为<span class="keyword">key</span> i的<span class="keyword">list</span>不存在或该<span class="keyword">list</span>为空，则命令结束。如果 <span class="keyword">timeout</span>&gt;<span class="number">0</span>，则遇到上述情况时，等待<span class="keyword">timeout</span>秒，如果问题没有解决，则对<span class="keyword">key</span> i+<span class="number">1</span>开始的<span class="keyword">list</span>执行pop操作。</span><br><span class="line"></span><br><span class="line"> brpop(key1, key2,… <span class="keyword">key</span> N, <span class="keyword">timeout</span>)：rpop的<span class="keyword">block</span>版本。参考上一命令。</span><br><span class="line"></span><br><span class="line"> rpoplpush(srckey, dstkey)：返回并删除名称为srckey的<span class="keyword">list</span>的尾元素，并将该元素添加到名称为dstkey的<span class="keyword">list</span>的头部</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h3 id="4-对Set操作的命令"><a href="#4-对Set操作的命令" class="headerlink" title="4.对Set操作的命令"></a>4.对Set操作的命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> sadd(key, member)：向名称为key的<span class="keyword">set</span>中添加元素<span class="keyword">member</span></span><br><span class="line"></span><br><span class="line"> srem(<span class="keyword">key</span>, <span class="keyword">member</span>) ：删除名称为<span class="keyword">key</span>的<span class="keyword">set</span>中的元素<span class="keyword">member</span></span><br><span class="line"></span><br><span class="line"> spop(<span class="keyword">key</span>) ：随机返回并删除名称为<span class="keyword">key</span>的<span class="keyword">set</span>中一个元素  </span><br><span class="line"></span><br><span class="line"> smove(srckey, dstkey, <span class="keyword">member</span>) ：将<span class="keyword">member</span>元素从名称为srckey的集合移到名称为dstkey的集合</span><br><span class="line"></span><br><span class="line"> scard(<span class="keyword">key</span>) ：返回名称为<span class="keyword">key</span>的<span class="keyword">set</span>的基数        </span><br><span class="line"></span><br><span class="line"> sismember(<span class="keyword">key</span>, <span class="keyword">member</span>) ：测试<span class="keyword">member</span>是否是名称为<span class="keyword">key</span>的<span class="keyword">set</span>的元素</span><br><span class="line"></span><br><span class="line"> sinter(key1, key2,…<span class="keyword">key</span> N) ：求交集</span><br><span class="line"></span><br><span class="line"> sinterstore(dstkey, key1, key2,…<span class="keyword">key</span> N) ：求交集并将交集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line"> sunion(key1, key2,…<span class="keyword">key</span> N) ：求并集</span><br><span class="line"></span><br><span class="line"> sunionstore(dstkey, key1, key2,…<span class="keyword">key</span> N) ：求并集并将并集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line"> sdiff(key1, key2,…<span class="keyword">key</span> N) ：求差集</span><br><span class="line"></span><br><span class="line"> sdiffstore(dstkey, key1, key2,…<span class="keyword">key</span> N) ：求差集并将差集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line"> smembers(<span class="keyword">key</span>) ：返回名称为<span class="keyword">key</span>的<span class="keyword">set</span>的所有元素</span><br><span class="line"></span><br><span class="line"> srandmember(<span class="keyword">key</span>) ：随机返回名称为<span class="keyword">key</span>的<span class="keyword">set</span>的一个元素</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728</span></span><br></pre></td></tr></table></figure><h3 id="5-对zset（sorted-set）操作的命令"><a href="#5-对zset（sorted-set）操作的命令" class="headerlink" title="5.对zset（sorted set）操作的命令"></a>5.对zset（sorted set）操作的命令</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> zadd(<span class="built_in">key</span>, score, <span class="built_in">member</span>)：向名称为<span class="built_in">key</span>的zset中添加元素<span class="built_in">member</span>，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</span><br><span class="line"></span><br><span class="line"> zrem(<span class="built_in">key</span>, <span class="built_in">member</span>) ：删除名称为<span class="built_in">key</span>的zset中的元素<span class="built_in">member</span></span><br><span class="line"></span><br><span class="line"> zincrby(<span class="built_in">key</span>, increment, <span class="built_in">member</span>) ：如果在名称为<span class="built_in">key</span>的zset中已经存在元素<span class="built_in">member</span>，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment</span><br><span class="line"></span><br><span class="line"> zrank(<span class="built_in">key</span>, <span class="built_in">member</span>) ：返回名称为<span class="built_in">key</span>的zset（元素已按score从小到大排序）中<span class="built_in">member</span>元素的<span class="built_in">rank</span>（即index，从<span class="number">0</span>开始），若没有<span class="built_in">member</span>元素，返回“nil”</span><br><span class="line"></span><br><span class="line"> zrevrank(<span class="built_in">key</span>, <span class="built_in">member</span>) ：返回名称为<span class="built_in">key</span>的zset（元素已按score从大到小排序）中<span class="built_in">member</span>元素的<span class="built_in">rank</span>（即index，从<span class="number">0</span>开始），若没有<span class="built_in">member</span>元素，返回“nil”</span><br><span class="line"></span><br><span class="line"> zrange(<span class="built_in">key</span>, start, end)：返回名称为<span class="built_in">key</span>的zset（元素已按score从小到大排序）中的index从start到end的所有元素</span><br><span class="line"></span><br><span class="line"> zrevrange(<span class="built_in">key</span>, start, end)：返回名称为<span class="built_in">key</span>的zset（元素已按score从大到小排序）中的index从start到end的所有元素</span><br><span class="line"></span><br><span class="line"> zrangebyscore(<span class="built_in">key</span>, <span class="built_in">min</span>, <span class="built_in">max</span>)：返回名称为<span class="built_in">key</span>的zset中score &gt;= <span class="built_in">min</span>且score &lt;= <span class="built_in">max</span>的所有元素</span><br><span class="line"></span><br><span class="line"> zcard(<span class="built_in">key</span>)：返回名称为<span class="built_in">key</span>的zset的基数</span><br><span class="line"></span><br><span class="line"> zscore(<span class="built_in">key</span>, element)：返回名称为<span class="built_in">key</span>的zset中元素element的score</span><br><span class="line"></span><br><span class="line"> zremrangebyrank(<span class="built_in">key</span>, <span class="built_in">min</span>, <span class="built_in">max</span>)：删除名称为<span class="built_in">key</span>的zset中<span class="built_in">rank</span> &gt;= <span class="built_in">min</span>且<span class="built_in">rank</span> &lt;= <span class="built_in">max</span>的所有元素</span><br><span class="line"></span><br><span class="line"> zremrangebyscore(<span class="built_in">key</span>, <span class="built_in">min</span>, <span class="built_in">max</span>) ：删除名称为<span class="built_in">key</span>的zset中score &gt;= <span class="built_in">min</span>且score &lt;= <span class="built_in">max</span>的所有元素</span><br><span class="line"></span><br><span class="line"> zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为<span class="number">1</span>。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行 SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h3 id="6-对Hash操作的命令"><a href="#6-对Hash操作的命令" class="headerlink" title="6.对Hash操作的命令"></a>6.对Hash操作的命令</h3><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> hset(<span class="built_in">key</span>, field, <span class="built_in">value</span>)：向名称为<span class="built_in">key</span>的hash中添加元素field&lt;—&gt;<span class="built_in">value</span></span><br><span class="line"></span><br><span class="line"> hget(<span class="built_in">key</span>, field)：返回名称为<span class="built_in">key</span>的hash中field对应的<span class="built_in">value</span></span><br><span class="line"></span><br><span class="line"> hmget(<span class="built_in">key</span>, field1, …,field N)：返回名称为<span class="built_in">key</span>的hash中field i对应的<span class="built_in">value</span></span><br><span class="line"></span><br><span class="line"> hmset(<span class="built_in">key</span>, field1, value1,…,field N, <span class="built_in">value</span> N)：向名称为<span class="built_in">key</span>的hash中添加元素field i&lt;—&gt;<span class="built_in">value</span> i</span><br><span class="line"></span><br><span class="line"> hincrby(<span class="built_in">key</span>, field, integer)：将名称为<span class="built_in">key</span>的hash中field的<span class="built_in">value</span>增加integer</span><br><span class="line"></span><br><span class="line"> hexists(<span class="built_in">key</span>, field)：名称为<span class="built_in">key</span>的hash中是否存在键为field的域</span><br><span class="line"></span><br><span class="line"> <span class="built_in">hdel</span>(<span class="built_in">key</span>, field)：删除名称为<span class="built_in">key</span>的hash中键为field的域</span><br><span class="line"></span><br><span class="line"> hlen(<span class="built_in">key</span>)：返回名称为<span class="built_in">key</span>的hash中元素个数</span><br><span class="line"></span><br><span class="line"> hkeys(<span class="built_in">key</span>)：返回名称为<span class="built_in">key</span>的hash中所有键</span><br><span class="line"></span><br><span class="line"> hvals(<span class="built_in">key</span>)：返回名称为<span class="built_in">key</span>的hash中所有键对应的<span class="built_in">value</span></span><br><span class="line"></span><br><span class="line"> hgetall(<span class="built_in">key</span>)：返回名称为<span class="built_in">key</span>的hash中所有的键（field）及其对应的<span class="built_in">value</span></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h2 id="三、各种数据类型所对应的应用场景"><a href="#三、各种数据类型所对应的应用场景" class="headerlink" title="三、各种数据类型所对应的应用场景"></a>三、各种数据类型所对应的应用场景</h2><h3 id="1-String类型的应用场景"><a href="#1-String类型的应用场景" class="headerlink" title="1.String类型的应用场景"></a>1.String类型的应用场景</h3><p>String是最常用的一种数据类型,普通的key/value存储.</p><h3 id="2-list类型的应用场景"><a href="#2-list类型的应用场景" class="headerlink" title="2.list类型的应用场景"></a>2.list类型的应用场景</h3><p>比较适用于列表式存储且顺序相对比较固定，例如：</p><p>省份、城市列表</p><p>品牌、厂商、车系、车型等列表</p><p>拆车坊专题列表…</p><h3 id="3-set类型的应用场景"><a href="#3-set类型的应用场景" class="headerlink" title="3.set类型的应用场景"></a>3.set类型的应用场景</h3><p>Set对外提供的功能与list类似,当需要存储一个列表数据,又不希望出现重复数据时,可选用set</p><h3 id="4-zset-sorted-set-类型的应用场景"><a href="#4-zset-sorted-set-类型的应用场景" class="headerlink" title="4.zset(sorted set)类型的应用场景"></a>4.zset(sorted set)类型的应用场景</h3><p>zset的使用场景与set类似,区别是set不是自动有序的,而zset可以通过用户额外提供一个优先级(score)的参数来为成员排序,并且是插入有序的,即自动排序.当你需要一个有序的并且不重复的集合列表,那么可以选择zset数据结构。例如:</p><p>根据PV排序的热门车系车型列表</p><p>根据时间排序的新闻列表</p><h3 id="5-hash类型的应用场景"><a href="#5-hash类型的应用场景" class="headerlink" title="5.hash类型的应用场景"></a>5.hash类型的应用场景</h3><p>类似于表记录的存储</p><p>页面视图所需数据的存储</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用数据类型简介：&lt;/p&gt;
&lt;h2 id=&quot;一-redis常用五种数据类型-string-hash-list-set-zset-sorted-set&quot;&gt;&lt;a href=&quot;#一-redis常用五种数据类型-string-hash-list-set-zset-sorted-se
      
    
    </summary>
    
    
      <category term="redis" scheme="http://www.top.com/tags/redis/"/>
    
      <category term="nosql" scheme="http://www.top.com/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://www.top.com/2017/11/28/mysql03/"/>
    <id>http://www.top.com/2017/11/28/mysql03/</id>
    <published>2017-11-28T06:23:50.000Z</published>
    <updated>2017-12-01T17:28:28.030Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-多表查询-交叉查询【了解】"><a href="#01-多表查询-交叉查询【了解】" class="headerlink" title="01.多表查询_交叉查询【了解】"></a>01.多表查询_交叉查询【了解】</h4><pre><code>1.查询结果=左表的总记录数 * 右表的总记录数 -- 笛卡尔积</code></pre><h4 id="02-多表查询-内连接查询【重点掌握】"><a href="#02-多表查询-内连接查询【重点掌握】" class="headerlink" title="02.多表查询_内连接查询【重点掌握】"></a>02.多表查询_内连接查询【重点掌握】</h4><pre><code>1.隐式内连接【常用】：    1).格式：select 字段列表 from 表1,表2 where 表1和表2的等值关系;    2).例如：查询商品信息，要显示所对应类别信息        select * from products , category where products.category_id = catetory.cid;        只保留两个表的部分字段，使用表别名：        SELECT p.pname,p.price,c.cname FROM products p , category c WHERE p.category_id = c.cid;    3).练习：查询&quot;市&quot;的所有信息，并且显示对应的&quot;省名&quot;        SELECT c.cname AS &apos;市&apos;,p.pname AS &apos;省&apos; FROM city c,province p WHERE c.pid = p.pid;2.显示内连接：    1).格式：select 字段列表 from 表1 INNER JOIN 表2 ON 等值关系；    2).例如：查询商品信息，要显示所对应类别信息        select * from products p inner join category c on p.category_id = c.cid;    3).练习：查询&quot;市&quot;的所有信息，并且显示对应的&quot;省名&quot;        SELECT c.cname AS &apos;市&apos;,p.pname AS &apos;省&apos; from city c inner join province p on c.pid = p.pid;注意：1.内连接的查询结果：两个表中的等值记录；2.两种内连接都可以再添加其它where条件：    隐式内连接：select .. from 表1,表2 where 等值条件 and 其它条件...    显示内连接：select .. from 表1 inner join 表2 on 等值条件 where 其它条件....3.两种查询的格式说明：    隐式内连接：select .. from 表1,表2 on 等值条件//错误    显示内连接：select .. from 表1 inner join 表2 where 等值条件//OK的</code></pre><h4 id="03-多表查询-外连接查询【重点掌握】"><a href="#03-多表查询-外连接查询【重点掌握】" class="headerlink" title="03.多表查询_外连接查询【重点掌握】"></a>03.多表查询_外连接查询【重点掌握】</h4><pre><code>1.左外连接查询：    1).格式：select 字段列表 from 表1 left join 表2 on 等值关系;    2).查询结果：左表的所有记录，和右表的等值记录;    3).例如：需求：查询出所有商品(包括没有类别的商品)，有类别的商品要显示类别名称。        SELECT * FROM products p LEFT JOIN category c ON p.category_id = c.cid;2.右外连接查询：    1).格式：select 字段列表 from 表1 right join 表2 on 等值关系；    2).查询结果：右表的所有记录，和左表中的等值记录；    3).例如：需求：查询出所有的商品类别，如果类别下有商品的，要同时显示商品信息；        SELECT * FROM products p RIGHT JOIN category c ON p.category_id = c.cid;</code></pre><h4 id="04-子查询【重点掌握】"><a href="#04-子查询【重点掌握】" class="headerlink" title="04.子查询【重点掌握】"></a>04.子查询【重点掌握】</h4><pre><code>1.在一个查询内部，可以再写一个查询，这个写在内部的查询就叫：子查询；2.子查询的结果可以作为另一个查询：判断条件，表使用。3.例子：查询价格高于&quot;劲霸&quot;的商品信息；    SELECT * FROM products WHERE price &gt; (SELECT price FROM products WHERE pname = &apos;劲霸&apos;);4.练习：    1).查询化妆品类别的商品信息       a).使用多表连接查询：        select * from products p , category c where p.category_id = c.cid and c.cname = &apos;化妆品&apos;;       b).使用子查询(单表查询)        SELECT * FROM products WHERE category_id = (SELECT cid FROM category WHERE cname = &apos;化妆品&apos;);       c).使用子查询作为第三张表：select * from (子查询)        SELECT * FROM products p ,(SELECT * FROM category WHERE cname = &apos;化妆品&apos;) c WHERE p.category_id = c.cid;    2).查询所有&quot;家电&quot;,&quot;服饰&quot;类商品的信息：        select * from products where category_id = 1 or category_id = 2;        改进：        select * from products where category_id in (1,2);        改进：        select * from products where category_id in (select cid from category where cname in (&apos;家电&apos;,&apos;服饰&apos;));</code></pre><h4 id="学习目标总结："><a href="#学习目标总结：" class="headerlink" title="学习目标总结："></a>学习目标总结：</h4><p>1，能够使用内连接进行多表查询<br>a，    说出内连接的两种查询方式</p><pre><code>1.隐式内连接2.显示内连接</code></pre><p>b，    写出显式内连接的SQL语句<br>        select <em> from products p inner join category c on p.category_id = c.cid;<br>c，    写出隐式内连接的SQL语句<br>        select </em> from products p , category c where p.category_id = c.cid;<br>2，能够使用外连接进行多表查询<br>a，    说出外连接的两种查询方式<br>        1.左外查询<br>        2.右外查询<br>b，    写出左外连接的SQL语句<br>        select <em> from products p left join category c on p.category_id = c.cid;//所有左表中的记录，和右表的等值记录<br>c，    写出右外连接的SQL语句<br>        select </em> from products p right join category c on p.category_id = c.cid;//所有右表中的记录，和左表的等值记录<br>3，能够使用子查询进行多表查询<br>    select * from products where category_id in (select cid from category where cname in (‘家电’,’服饰’));</p><p>扩展：三表联查：<br>    1.隐式内连接：使用user表，role表，user_role表进行测试<br>        select <em> from users u , role r,user_role ur where u.uid = ur.uid and ur.rid = r.rid;<br>    2.显示内连接：<br>        select </em> from users u inner join user_role ur on u.uid = ur.uid inner join role r on ur.rid = r.rid;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-多表查询-交叉查询【了解】&quot;&gt;&lt;a href=&quot;#01-多表查询-交叉查询【了解】&quot; class=&quot;headerlink&quot; title=&quot;01.多表查询_交叉查询【了解】&quot;&gt;&lt;/a&gt;01.多表查询_交叉查询【了解】&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.查询结果
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.top.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://www.top.com/2017/11/27/mysql02/"/>
    <id>http://www.top.com/2017/11/27/mysql02/</id>
    <published>2017-11-27T06:23:50.000Z</published>
    <updated>2017-12-01T17:27:59.344Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-SQL高级查询-排序："><a href="#01-SQL高级查询-排序：" class="headerlink" title="01.SQL高级查询_排序："></a>01.SQL高级查询_排序：</h4><pre><code>1.使用的关键字：order by 字段名 ASC(升序--默认) / DESC(降序)  例如：查询所有商品，要求结果按价格从小到大排序    SELECT * FROM product ORDER BY proDate ASC;2.注意：升序可以不写asc关键字，例如：    select * from product order by proData;//升序3.排序：    升序(ASC):从小到大；    降序(DESC):从大到小；4.对多列进行排序：  例如：对多列进行排序：按金额排序，如果金额相同，按生产日期升序排序    SELECT * FROM product ORDER BY price ASC,proDate ASC;    先按第一个字段排序，在第一个字段值相同的情况下，再按第二个字段排。5.如果有查询条件，写法：    select * from 表名 where 条件  order by 字段 ... ;</code></pre><h4 id="02-SQL高级查询-聚合函数："><a href="#02-SQL高级查询-聚合函数：" class="headerlink" title="02.SQL高级查询_聚合函数："></a>02.SQL高级查询_聚合函数：</h4><pre><code>1.我经常会有需求，对某列进行汇总，这就需要使用&quot;聚合函数&quot;；2.今天我们掌握的五个聚合函数：    a).count(*/字段名)：统计指定列不为NULL的记录行数--任何数据类型        例如：查询电脑类别的商品，共有多少种        SELECT COUNT(*) FROM product WHERE categoryName = &apos;电脑&apos;;    b).sum(列名)：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0--数值类型的列        例如：查询电脑类商品的价格总数是多少？        select sum(price) from product where categoryName = &apos;电脑&apos;;    c).max(列名)：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算--数值类型、日期类型        例如：查询电脑类商品的最高价格？        select max(price) from product where categoryName = &apos;电脑&apos;;    d).min(列名)：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算        例如：查询电脑类商品的最低价格？        select min(price) from product where categoryName = &apos;电脑&apos;;    e).avg(列名)：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0        例如：查询电脑类商品的平均价格？        select avg(price) from product where categoryName = &apos;电脑&apos;;        注意：计算记录的总数量时，不包含NULL的记录。              所以如果计算的列中有NULL值，则结果不准确。3.注意：聚合查询的结果，只能包含&quot;聚合结果列&quot;，不要包含其他列，要包含，其结果是无意义的。        聚合的结果是&quot;计算的结果&quot;，跟某行数据无关，所以不能关联显示其它字段。</code></pre><h4 id="03-SQL高级查询-分组："><a href="#03-SQL高级查询-分组：" class="headerlink" title="03.SQL高级查询_分组："></a>03.SQL高级查询_分组：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.分组：对某列中"相同的值"作为一组，进行分组。分组只是手段，后续经常需要进行汇总：</span><br><span class="line">2.例如：一条语句查询出每种商品的最高价格是多少？</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">MAX</span>(price) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryName;</span><br><span class="line">练习：查询每种商品的价格的总和</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">SUM</span>(price) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryName;</span><br><span class="line">练习：查询每种商品的商品数量是多少</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryname;</span><br><span class="line">3.注意：</span><br><span class="line">   1).分组查询的结果字段中，只能包含"分组字段"，"聚合结果字段"。不能再包含其他字段，如果包含，其结果也是无意义的。</span><br><span class="line">4.having子句：</span><br><span class="line">   1).由于where不能对聚合后的结果进行筛选。所以要对聚合后的结果进行筛选，需要使用having子句。</span><br><span class="line">例如：查询每种商品的价格总额，结果保留大于1000元的。</span><br><span class="line"><span class="keyword">select</span> categoryName,<span class="keyword">sum</span>(price) <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> categoryName <span class="keyword">having</span> <span class="keyword">sum</span>(price) &gt; <span class="number">1000</span>;</span><br><span class="line">5.对多列进行分组：</span><br><span class="line">    收支流水表：trans</span><br><span class="line">    id收支项账户金额</span><br><span class="line">    1工资收入工商银行1000</span><br><span class="line">    2红包收入工商银行500</span><br><span class="line">    3收入交通银行3000</span><br><span class="line">    4支出工商银行300</span><br><span class="line">    5支出交通银行770</span><br><span class="line"></span><br><span class="line">    需求：查询出每个账户的收支总额，分别是多少？</span><br><span class="line">账户收支项总金额</span><br><span class="line">工商银行收入1500</span><br><span class="line">工商银行支出300</span><br><span class="line">交通银行收入3000</span><br><span class="line">交通银行支出770</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">select</span> 账户,收支项,<span class="keyword">sum</span>(金额) <span class="keyword">from</span> trans <span class="keyword">group</span> <span class="keyword">by</span> 账户,收支项;//先按账户分，再按收支项分。</span><br></pre></td></tr></table></figure><h4 id="04-SQL语句的执行顺序："><a href="#04-SQL语句的执行顺序：" class="headerlink" title="04.SQL语句的执行顺序："></a>04.SQL语句的执行顺序：</h4><pre><code>1).from2).where3).group by4).having5).select6).distinct7).order by</code></pre><p>   SQL语句的编写顺序：<br>    select … from …  where … group by … having … order by …;</p><h4 id="05-分页查询："><a href="#05-分页查询：" class="headerlink" title="05.分页查询："></a>05.分页查询：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1).基本语句：<span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> M,N;</span><br><span class="line">             M值：从第几条(第一条记录为0)记录开始取。</span><br><span class="line">     N值：取几条记录</span><br><span class="line">2).例如：查询所有的商品，每页显示5条：</span><br><span class="line">第一页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">第二页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">第三页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line">固定算法：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> (当前的页数 - <span class="number">1</span>) * 每页显示的条数</span><br><span class="line"><span class="number">3</span>).注意：M值和N值，只要是正数，不会抛异常，可能会返回空结果集。</span><br><span class="line">         但如果是负数，会抛异常。</span><br></pre></td></tr></table></figure><h4 id="06-备份和恢复数据库："><a href="#06-备份和恢复数据库：" class="headerlink" title="06.备份和恢复数据库："></a>06.备份和恢复数据库：</h4><pre><code>1).备份：在要备份的数据库上右键--&gt;备份/导出--&gt;以SQL转储文件备份数据库2).恢复：在SQLYog左侧右键--&gt;导入--&gt;从SQL转储文件导入数据库</code></pre><h4 id="07-SQL的约束："><a href="#07-SQL的约束：" class="headerlink" title="07.SQL的约束："></a>07.SQL的约束：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1).主键约束：</span><br><span class="line">1).主键的作用：唯一标识表中一条记录。用于作为条件，方便的进行增删改查操作。</span><br><span class="line">2).定义主键：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">..其它字段..</span><br><span class="line">..</span><br><span class="line">)</span><br><span class="line"><span class="number">3</span>).一个表中只能有一个主键；</span><br><span class="line"><span class="number">4</span>).一个主键，可以由一个或多个字段组成[很少用]；复合主键，联合主键</span><br><span class="line">客户信息表：将<span class="string">"客户姓名"</span> + <span class="string">"工作单位"</span> 同时作为一个主键</span><br><span class="line">客户姓名工作单位性别年龄</span><br><span class="line">张三人事部男<span class="number">20</span></span><br><span class="line">李四人事部女<span class="number">22</span></span><br><span class="line">张三业务部男<span class="number">23</span></span><br><span class="line">张三人事部男<span class="number">18</span> //错误的数据</span><br><span class="line"><span class="number">5</span>).任何类型的字段都可以做主键。当前使用<span class="built_in">int</span>类型。后期<span class="built_in">varchar</span></span><br><span class="line"><span class="number">6</span>).为某个字段添加了<span class="string">"主键约束"</span>，也同时自动添加：唯一约束、非空约束</span><br><span class="line"><span class="number">7</span>).删除主键约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line">2).自动增长：</span><br><span class="line">1).自动增长：让某列的值根据某个基数，进行自增。这种约束通常用于"主键".</span><br><span class="line">2).添加自动增长约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">....</span><br><span class="line">)</span><br><span class="line"><span class="number">3</span>).清空表对自动增长列的基数的变化：</span><br><span class="line"><span class="number">1</span>).delete <span class="keyword">from</span> 表名:逐行删除。不改变自动增长的基数。</span><br><span class="line"><span class="number">2</span>).truncate 表名【效率高】：摧毁表，重建表。将自动增长的基数重新设置为<span class="number">1.</span></span><br><span class="line"><span class="number">3</span>).非空约束：<span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="number">1</span>).作用：强制某列的数据不能包含<span class="literal">NULL</span>值；</span><br><span class="line"><span class="number">2</span>).添加非空约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">....</span><br><span class="line">)</span><br><span class="line">如下添加，会抛出异常：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="literal">null</span>,...);//第二个null是错误，pname字段不允许null值</span><br><span class="line">3).删除非空约束 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 数据类型[长度] (后面不出现<span class="keyword">not</span> <span class="literal">null</span>约束即可，就表示删除了<span class="keyword">not</span> <span class="literal">NULL</span>约束) </span><br><span class="line"><span class="number">4</span>).唯一约束：<span class="keyword">unique</span></span><br><span class="line"><span class="number">1</span>).作用：表示本列的值是唯一的</span><br><span class="line"><span class="number">2</span>).添加唯一约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">unique</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line">   如果向pname字段添加重复的值，数据库会抛出异常。</span><br><span class="line"><span class="number">3</span>).如果字段设置了唯一约束，可以写入<span class="string">"空字符串"</span>，但只能有一条。</span><br><span class="line">   也可以写入<span class="literal">NULL</span>值，可以写入多条。</span><br><span class="line"><span class="number">4</span>).删除唯一约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 名称;</span><br><span class="line">如果添加唯一约束时，没有设置约束名称，默认是当前字段的字段名</span><br><span class="line">5).主键与唯一约束的区别：</span><br><span class="line">主键：代表：唯一、非空；一个表只能有一个主键；</span><br><span class="line">唯一：只代表：唯一；可以有多个NULL值；一个表可以有多个字段被设置为唯一约束；</span><br><span class="line">5).默认约束：default 值;</span><br><span class="line">1).作用：可以设置某列的默认值，在添加数据时，可以不指定这列的数据，而使用默认值。</span><br><span class="line">2).设置默认约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span><span class="built_in">int</span>primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">stuName<span class="built_in">varchar</span>(<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex<span class="built_in">char</span>(<span class="number">5</span>)<span class="keyword">default</span> <span class="string">'男'</span></span><br><span class="line">)</span><br><span class="line">在添加时，如果要使用默认值：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'bbb'</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line">3).删除默认约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 数据类型[长度](后面不要出现<span class="keyword">default</span>关键字即可)</span><br></pre></td></tr></table></figure><h4 id="08-多表-分表的作用："><a href="#08-多表-分表的作用：" class="headerlink" title="08.多表_分表的作用："></a>08.多表_分表的作用：</h4><pre><code>1.在制作表时要注意：一个表只描述一件事情。如果需要描述多件事情，可以创建多表，然后通过某个字段去引用                    另一个表的数据。这样可以使每个表的数据单独管理，互不影响。2.分表后：    主表：被其它表引用的表；    从表：引用其它表的表；    3.作用：            避免主键冲突，减少数据冗余</code></pre><h4 id="09-多表-表和表之间的关系："><a href="#09-多表-表和表之间的关系：" class="headerlink" title="09.多表_表和表之间的关系："></a>09.多表_表和表之间的关系：</h4><pre><code>1.一对多关系【最常用】：    1).应用场景：客户和订单；分类和商品；部门和员工        客户表:主表                订单表：从表                            外键        ----------------------------------------------------------------------------------------        客户ID    登录名    支付宝            订单ID    订单时间    总金额        客户ID        001    zhangsan  xxx            001    xxx        xxx        001                              002    xxx        xxx        001    2).建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.2.多对多关系【较常用】：    1).应用场景：订单和商品、用户和角色        订单表                    商品表：        -----------------------------------------------------------------------------------------        订单ID    订单日期   总金额          商品ID    名称    单价            d001    2017-07-04  100            p001    奥利奥    5.5        d002    2017-07-05  200            p002    红牛    4                            p003    啤酒    2.00                    订单_商品_关系表                    订单Id        商品ID    数量    总价                    d001        p001    2    11                    d001        p002    3    12                    d001        p003                        d002        p001    2).建表原则：需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。3.一对一关系【不建议用】：    1).客户信息表：                        地址表        姓名    性别    年龄    地址ID            id    省    市    区    街道门牌        张三    男    22    01            01    北京    北京    顺义    99号        李四    女    23    02            02    河北    廊坊    安次    88号    ------------------------------------------------------------------------------------------------       合并为一个客户表：        姓名    性别    年龄    省    市    区    街道门牌        张三    男    22    北京    北京    顺义    99号        李四    女    23    河北    廊坊    安次    88号</code></pre><h4 id="10-外键约束："><a href="#10-外键约束：" class="headerlink" title="10.外键约束："></a>10.外键约束：</h4><pre><code>1).作用：设置在&quot;从表&quot;的外键字段上，可以强制外键字段的值必须参考主表中的主键字段的值。2).设置外键约束：    alter table 从表 add [constraint] [外键名称] foreign key (从表外键字段名) references 主表 (主表的主键);3).使用外键目的：    保证数据完整性</code></pre><h4 id="学习目标总结："><a href="#学习目标总结：" class="headerlink" title="学习目标总结："></a>学习目标总结：</h4><p>3，能够使用SQL语句进行排序<br>a，    说出排序语句中的升序和降序关键字</p><pre><code>order by 字段名 ASC(升序-默认) / DESC(降序)</code></pre><p>b，    写出排序语句<br>        select <em> from product order by price desc;<br>4，能够使用聚合函数<br>a，    写出获取总记录数的SQL语句<br>        select count(</em>) from product;<br>b，    写出获取某一列数据总和的SQL语句<br>        select sum(price) from product;<br>c，    写出获取某一列数据平均值的SQL语句<br>        select avg(price) …<br>d，    写出获取某一列数据的最大值的SQL语句<br>        select max(price) …<br>e，    写出获取某一列数据的最小值的SQL语句<br>        select min(price) …<br>5，能够使用SQL语句进行分组查询<br>a，    写出分组的SQL语句<br>        group by 字段名<br>b，    写出分组后条件过滤器的SQL语句<br>        gruup by 字段名 having 聚合函数 条件;<br>6，能够完成数据的备份和恢复<br>    1.备份：在要备份的数据库上右键–&gt;备份/导出–&gt;以SQL转储文件备份数据库<br>    2.恢复：在SQLYog左边右键–&gt;导入–&gt;以SQL转储文件导入数据库。<br>7，能够使用可视化工具连接数据库,操作数据库<br>    使用SQLYog连接数据库。操作数据库</p><p>8，能够说出多表之间的关系及其建表原则<br>a，    说出一对多的应用场景及其建表原则<br>        1).应用场景：客户和订单，分类和商品，部门和员工.<br>        2).在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.<br>b，    说出多对多的应用场景及其建表原则<br>        1).应用场景：学生和课程、用户和角色<br>        2).需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键.<br>9，能够理解外键约束<br>a，    说出外键约束的作用<br>        作用：强制外键字段的值必须参考主表中主键字段的值。<br>b，    写出创建外键的SQL语句<br>        alter table product add constraint fk_fkname foreign key (categoryid) references category (cid);<br>c，    通过sql语句能够建立多表及其关系<br>        创建表的外键，并且创建外键约束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-SQL高级查询-排序：&quot;&gt;&lt;a href=&quot;#01-SQL高级查询-排序：&quot; class=&quot;headerlink&quot; title=&quot;01.SQL高级查询_排序：&quot;&gt;&lt;/a&gt;01.SQL高级查询_排序：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.使用的关键字：order
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.top.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://www.top.com/2017/11/26/mysql01/"/>
    <id>http://www.top.com/2017/11/26/mysql01/</id>
    <published>2017-11-26T06:23:50.000Z</published>
    <updated>2017-12-01T17:23:17.583Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-数据库的概念："><a href="#01-数据库的概念：" class="headerlink" title="01.数据库的概念："></a>01.数据库的概念：</h4><pre><code>1).数据库的概念：数据库(Database)，就是存储,维护，管理数据的仓库。2).作用：用来存储和管理大量数据的。内部采用了非常便于查询的机制来存储数据，能保证我们在大量数据的情况下         可以很快，并且很准确为我们查询到所需记录。3).什么是数据库管理系统：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中表内的数据。</code></pre><h4 id="02-数据库内部的结构："><a href="#02-数据库内部的结构：" class="headerlink" title="02.数据库内部的结构："></a>02.数据库内部的结构：</h4><pre><code>数据库软件：   |--逻辑数据库(跟项目相关)    |--表        |--列        |--行(记录)    |--表    ....   |--逻辑数据库(跟项目相关)   ....</code></pre><h4 id="03-Java和数据库的对应关系："><a href="#03-Java和数据库的对应关系：" class="headerlink" title="03.Java和数据库的对应关系："></a>03.Java和数据库的对应关系：</h4><p>java        数据库</p><pre><code>项目        逻辑数据库类        表类中成员属性    表的字段(列)属性的数据类型    字段的数据类型对象        表中的一行记录</code></pre><h4 id="04-常见的数据库管理系统"><a href="#04-常见的数据库管理系统" class="headerlink" title="04.常见的数据库管理系统"></a>04.常见的数据库管理系统</h4><pre><code>MYSQL    ：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x版本也开始收费。Oracle    ：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。DB2：IBM公司的数据库产品,收费的。常应用在银行系统中.SQLServer：MicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。SyBase    ：已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。SQLite    : 嵌入式的小型数据库，应用在手机端。常用数据库：MYSQL，Oracle．这里使用MySQL数据库。MySQL中可以有多个数据库，数据库是真正存储数据的地方。</code></pre><h4 id="05-MySQL的安装和客户端连接："><a href="#05-MySQL的安装和客户端连接：" class="headerlink" title="05.MySQL的安装和客户端连接："></a>05.MySQL的安装和客户端连接：</h4><pre><code>1.连接MySQL服务器端：    1).使用命令行：        mysql -uroot -p密码 (回车)    2).使用SQLYog客户端:        直接启动，在连接界面填写：服务器IP，端口，用户名、密码，点击：连接</code></pre><h4 id="06-SQL语句的介绍："><a href="#06-SQL语句的介绍：" class="headerlink" title="06.SQL语句的介绍："></a>06.SQL语句的介绍：</h4><pre><code>1.普通话：标准的SQL语言，各个数据库厂商必须遵守的。2.方言：个数据库厂商自己开发的基于的SQL的一些新功能的语法。只在自己的数据库        上有效。</code></pre><h4 id="07-SQL语言的分类："><a href="#07-SQL语言的分类：" class="headerlink" title="07.SQL语言的分类："></a>07.SQL语言的分类：</h4><p>（结构化查询语言）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.DDL:数据定义语言,来定义数据库对象：逻辑数据库，表，列等。关键字：</span><br><span class="line"><span class="keyword">create</span>（创建），<span class="keyword">alter</span>（修改），<span class="keyword">drop</span>（删除）等</span><br><span class="line"><span class="number">2.</span>DCL:数据控制语言.用来定义数据库的访问权限和安全级别，及创建用户。</span><br><span class="line"><span class="keyword">grant</span> ,<span class="keyword">revoke</span>,if.</span><br><span class="line"><span class="number">3.</span>DML【重点掌握】:数据操作语言。用来对数据库中表的<span class="string">"记录"</span>进行更新。</span><br><span class="line">关键字：<span class="keyword">insert</span>（添加），<span class="keyword">delete</span>（删除），<span class="keyword">update</span>（修改）等</span><br><span class="line"><span class="number">4.</span>DQL【重点掌握】:数据查询语言。用来查询数据库中表的<span class="string">"记录"</span>。</span><br><span class="line">关键字：<span class="keyword">select</span>，<span class="keyword">from</span>，<span class="keyword">where</span>,groud <span class="keyword">by</span> ,<span class="keyword">order</span> <span class="keyword">by</span>,<span class="keyword">having</span> ,<span class="keyword">limit</span> 聚合函数等</span><br></pre></td></tr></table></figure><h4 id="08-SQL通用语法："><a href="#08-SQL通用语法：" class="headerlink" title="08.SQL通用语法："></a>08.SQL通用语法：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.SQL语句可以单行或多行书写，以分号结尾</span><br><span class="line">2.可使用空格和缩进来增强语句的可读性</span><br><span class="line">3.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</span><br><span class="line">  例如：<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span>。</span><br><span class="line"><span class="number">4.</span>注释：</span><br><span class="line"><span class="number">1</span>).#单行注释</span><br><span class="line"><span class="number">2</span>).<span class="comment">--(空格)单行注释</span></span><br><span class="line"><span class="number">3</span>).<span class="comment">/* ... */</span> 多行注释</span><br></pre></td></tr></table></figure><h4 id="09-数据库操作的相关语句："><a href="#09-数据库操作的相关语句：" class="headerlink" title="09.数据库操作的相关语句："></a>09.数据库操作的相关语句：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1.创建数据库：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集;</span><br><span class="line">2.查看所有数据库：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line">3.查看某个数据库的定义的信息:</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line">4.删除数据库：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名;</span><br><span class="line">5.查看当前正在使用的数据库：</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line">6.切换数据库：</span><br><span class="line"><span class="keyword">use</span> 数据库名；</span><br></pre></td></tr></table></figure><h4 id="10-表操作的相关语句："><a href="#10-表操作的相关语句：" class="headerlink" title="10.表操作的相关语句："></a>10.表操作的相关语句：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1.创建表：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">字段名<span class="number">1</span>  数据类型[长度]  [约束],</span><br><span class="line">字段名<span class="number">2</span>  数据类型[长度]  [约束],</span><br><span class="line">...</span><br><span class="line">字段名n  数据类型[长度]  [约束]</span><br><span class="line">);</span><br><span class="line">   例如创建一个学员信息表，存储：学号、姓名、性别、年龄</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">stuNo <span class="built_in">int</span>,</span><br><span class="line">stuName<span class="built_in">varchar</span>(<span class="number">200</span>),</span><br><span class="line">stuSex<span class="built_in">char</span>(<span class="number">5</span>),</span><br><span class="line">stuAge<span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line">2.Java的数据类型与MySQL中的数据类型</span><br><span class="line">java数据类型MySQL数据类型</span><br><span class="line">  <span class="comment">------------------------------------------------------------</span></span><br><span class="line">        整数:</span><br><span class="line">intint</span><br><span class="line"></span><br><span class="line">小数：</span><br><span class="line">float/doublefloat/double/decimal(m,n)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">字符：</span><br><span class="line">charchar</span><br><span class="line"></span><br><span class="line">字符串：</span><br><span class="line">Stringchar(定长)/varchar(不定长)</span><br><span class="line">在Java中char表示一个字符；而MySQL中的char表示：可变的字符串；</span><br><span class="line"></span><br><span class="line">        =============================================================================================================</span><br><span class="line">在MySQL中char和varchar的区别：</span><br><span class="line">1.char:定长字符串：例如定义字段为：char(5):</span><br><span class="line">   表示最多存储5个字符，如果不足5个字符，剩下的用空字符填充。</span><br><span class="line">   例如：定义char(5)<span class="comment">--&gt;要存储字符串"abc"--&gt;在硬盘上存储的格式--&gt;"abc  "</span></span><br><span class="line">        要存储字符串"abcd"<span class="comment">--&gt;在硬盘上存储的格式--&gt;"abcd "</span></span><br><span class="line"></span><br><span class="line">2.varchar:不定长字符串：例如定义字段为：</span><br><span class="line">varchar(5)表示最多存储5个字符，如果不足5个字符，不填充空字符。</span><br><span class="line">例如：定义varchar(5)<span class="comment">--&gt;要存储字符串"abc"--&gt;在硬盘上存储的格式--&gt;"abc"</span></span><br><span class="line">     要存储字符串"abcd"<span class="comment">--&gt;在硬盘上存储的格式--&gt;"abcd"</span></span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1.char类型的在查询效率上要高于varchar，所以，尽量选择char类型；</span><br><span class="line">2.对于字段的平均长度相同或者变化不大的数据，优先使用char类型。</span><br><span class="line">例如：手机号码、身份证号、银行卡号....</span><br><span class="line">3.对于字段的平均长度相差比较大的数据，建议使用varchar类型。</span><br><span class="line">例如：个人介绍......</span><br><span class="line"></span><br><span class="line">=============================================================================================================</span><br><span class="line">日期类型：</span><br><span class="line">String</span><br><span class="line">Datedate(日期常用)范围：YYYY-MM-DD 1000-01-01~9999-12-3</span><br><span class="line">datetime【常用】(日期和时间)范围：YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</span><br><span class="line">大文本：</span><br><span class="line">StringText</span><br><span class="line"></span><br><span class="line">文本二进制</span><br><span class="line">byte[]binary</span><br><span class="line"></span><br><span class="line">二进制(图片，视频)</span><br><span class="line">byte[]Blob</span><br><span class="line">3.查看数据库中的所有表：</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">4.查看表结构：</span><br><span class="line">desc 表名;</span><br><span class="line">5.删除表：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line">6.修改表：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 类型(长度) [约束];</span><br><span class="line">作用：修改表添加列. </span><br><span class="line">例如：</span><br><span class="line">#1，为分类表添加一个新的字段为分类描述 varchar(20)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> <span class="keyword">ADD</span> <span class="string">`desc`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 类型(长度) 约束;</span><br><span class="line">作用：修改表修改列的类型长度及约束.</span><br><span class="line">例如：</span><br><span class="line">#2, 为分类表的描述字段进行修改，类型varchar(50) 添加约束 not null</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> <span class="keyword">MODIFY</span> <span class="string">`desc`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧列名 新列名 类型(长度) 约束; </span><br><span class="line">作用：修改表修改列名.</span><br><span class="line">例如：</span><br><span class="line">#3, 为分类表的分类名称字段进行更换更换为 snamesname varchar(30)</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> <span class="keyword">CHANGE</span> <span class="string">`desc`</span>description <span class="built_in">VARCHAR</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line">作用：修改表删除列.</span><br><span class="line">例如：</span><br><span class="line">#4, 删除分类表中snamename这列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> <span class="keyword">DROP</span> description;</span><br><span class="line"></span><br><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 表名 <span class="keyword">to</span> 新表名;</span><br><span class="line">作用：修改表名</span><br><span class="line">例如：</span><br><span class="line">#5, 为分类表category改名成 category2</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> <span class="keyword">TO</span> category2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集;</span><br><span class="line">作用：修改表的字符集</span><br><span class="line">例如：</span><br><span class="line">#6, 为分类表 category 的编码表进行修改，修改成 gbk</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">category</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br></pre></td></tr></table></figure><h4 id="11-表记录操作相关的语句："><a href="#11-表记录操作相关的语句：" class="headerlink" title="11.表记录操作相关的语句："></a>11.表记录操作相关的语句：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">1.添加数据：<span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">两种格式：</span><br><span class="line"><span class="number">1.</span><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>，.....，值n)<span class="comment">--全字段添加</span></span><br><span class="line">  注意：</span><br><span class="line">  <span class="number">1</span>).后面值列表中的数量必须跟表中列的数量匹配，而且顺序也要匹配。</span><br><span class="line">  <span class="number">2</span>).值：数值类型，可以不用单引号(用也可以)</span><br><span class="line">         字符串类型，一定要使用单引号。</span><br><span class="line">        <span class="number">2.</span><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段<span class="number">1</span>,字段<span class="number">2</span>,.....,字段n) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,....,值n)<span class="comment">--部分字段添加，剩余字段添加：NULL</span></span><br><span class="line">  注意：</span><br><span class="line">  <span class="number">1</span>).字段列表：可以是表的部分字段，也可以不按照定义顺序；</span><br><span class="line">  <span class="number">2</span>).值列表：必须跟字段列表的数量和顺序要匹配。</span><br><span class="line">  <span class="number">3</span>).未指定的字段，添加：<span class="literal">NULL</span>值。(前提是：字段允许<span class="literal">NULL</span>值)</span><br><span class="line"><span class="number">2.</span>修改数据：<span class="keyword">update</span></span><br><span class="line">格式：<span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span> = 值<span class="number">1</span> , 字段名<span class="number">2</span> = 值<span class="number">2</span> , .... , 字段名n = 值n   <span class="keyword">where</span> 条件；</span><br><span class="line"><span class="number">3.</span>删除数据：<span class="keyword">delete</span> <span class="keyword">from</span></span><br><span class="line">格式：<span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line">  清空表：</span><br><span class="line">1).delete from 表名;逐行删除，效率低；不清空auto_increment记录数</span><br><span class="line">2).truncate 表名;先摧毁表，然后按照原结构再创建一个新表，效率高；auto_increment将置为零，从新开始</span><br><span class="line"></span><br><span class="line">4.查询数据：<span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段的筛选条件</span><br><span class="line"><span class="number">1.</span>简单查询：</span><br><span class="line"><span class="number">1</span>).查询所有字段的所有记录：</span><br><span class="line"><span class="keyword">select</span> pid,pname,price,categoryName <span class="keyword">from</span> product;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product;</span><br><span class="line">2).查询部分字段的所有记录：</span><br><span class="line"><span class="keyword">select</span> pname,price <span class="keyword">from</span> product;</span><br><span class="line">3).使用别名：</span><br><span class="line">a).列别名：</span><br><span class="line"><span class="keyword">SELECT</span> pname <span class="keyword">AS</span> <span class="string">'商品名称'</span> , price <span class="keyword">AS</span> <span class="string">'价格'</span> <span class="keyword">FROM</span> product;</span><br><span class="line">b).表别名：</span><br><span class="line"><span class="keyword">SELECT</span> p.pname,p.price <span class="keyword">FROM</span> product p;//一般在多表中使用别名</span><br><span class="line">4).去掉重复值</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> price <span class="keyword">FROM</span> product;</span><br><span class="line">5).对查询结果进行运算：</span><br><span class="line">例如：将所有查询结果的商品的价格加100显示：</span><br><span class="line"><span class="keyword">select</span> pname,price + <span class="number">100</span> <span class="keyword">from</span> product;</span><br><span class="line">        注意：只对查询结果进行更改，原数据没有更改。</span><br><span class="line">2.条件查询：</span><br><span class="line">1).比较运算符：</span><br><span class="line">1)."&gt;":大于。例如：查询价格大于2000元的商品--针对数值类型查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">2000</span>;</span><br><span class="line">2)."&lt;":小于。例如：查询价格小于2000元的商品--针对数值类型查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &lt; <span class="number">2000</span>;</span><br><span class="line">3)."&gt;=":大于等于。例如：查询价格大于等于2000元的商品--针对数值类型查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt;= <span class="number">2000</span>;</span><br><span class="line">4)."&lt;=":小于等于。例如：查询价格小于等于2000元的商品--针对数值类型查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &lt;= <span class="number">2000</span>;</span><br><span class="line">5)."&lt;&gt;":不等于。例如：查询价格不等于2000元的商品--针对各种类型</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &lt;&gt; <span class="number">2000</span>;</span><br><span class="line">   "!=":不等于<span class="comment">--针对各种类型</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price != <span class="number">2000</span>;</span><br><span class="line">6)."=" :等于.例如：查询价格等于2000元的商品<span class="comment">--针对各种类型</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price = <span class="number">2000</span>;</span><br><span class="line">2).逻辑运算符：</span><br><span class="line">1).and : 语义：并且</span><br><span class="line">例如：查询所有商品价格大于2000元的电脑类商品</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">2000</span> <span class="keyword">and</span> categoryName = <span class="string">'电脑'</span>;</span><br><span class="line">2).or  : 语义：或者</span><br><span class="line">例如：查询所有商品价格大于2000元，或者价格低于1000元的所有商品</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">2000</span> <span class="keyword">or</span> price &lt; <span class="number">1000</span>;</span><br><span class="line">3).not : 语义：非</span><br><span class="line">例如：查询商品价格不大于2000元的所有商品</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> <span class="keyword">not</span>(price &gt; <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">注意：如果多个and和or运算，中间不要加逗号，可以使用()改变运算顺序。</span><br><span class="line">例如：查询所有价格大于2000元的电脑类商品或者服装类商品</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">2000</span> <span class="keyword">and</span> (categoryName = <span class="string">'电脑'</span> <span class="keyword">or</span> categoryName = <span class="string">'服装'</span>);</span><br><span class="line">3).范围查询：between ... and ...(可以用于数值类型，也可以用于日期类型)</span><br><span class="line">1).用于查询数值范围：between(包含)....and(包含)...</span><br><span class="line">   例如：查询价格在1000元(包含)到2000元(包含)之间的所有商品</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt;= <span class="number">1000</span> <span class="keyword">and</span> price &lt;= <span class="number">2000</span>;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="keyword">between</span> <span class="number">1000</span> <span class="keyword">and</span> <span class="number">2000</span>;</span><br><span class="line">2).用于查询日期范围：</span><br><span class="line">    例如：查询生产日期在2017年1月份的所有商品</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> proDate <span class="keyword">between</span> <span class="string">'2017-01-01'</span> <span class="keyword">and</span> <span class="string">'2017-01-31'</span>;</span><br><span class="line">4).多个值的判断：in(值列表)</span><br><span class="line">例如：查询商品价格为200元，500元，1000元，2000元的商品信息</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price = <span class="number">200</span> <span class="keyword">or</span> price = <span class="number">500</span> <span class="keyword">or</span> price = <span class="number">1000</span> <span class="keyword">or</span> price = <span class="number">2000</span>;</span><br><span class="line">或者使用in查询</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="keyword">in</span> (<span class="number">200</span>,<span class="number">500</span>,<span class="number">1000</span>,<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">5).模糊查询：like 两个通配符：1)"%" : 任意的0到多个字符；2)"_":任意的1个字符</span><br><span class="line">例如：查询商品名称中包含"花"的商品信息</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> pname <span class="keyword">like</span> <span class="string">'%花%'</span>;</span><br><span class="line">      查询商品名称中以"花"字开头的商品：</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> pname <span class="keyword">like</span> <span class="string">'花%'</span>;</span><br><span class="line">      商品名称以"花花"开头，全名是四个字的商品：</span><br><span class="line">        <span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> pname <span class="keyword">like</span> <span class="string">'花花__'</span>;</span><br><span class="line">6).查询空字段：</span><br><span class="line">1).添加一条记录时，不添加的字段可以指定为NULL值，例如：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="number">14</span>,<span class="string">'果10'</span>,<span class="number">200</span>,<span class="string">'食品'</span>,<span class="literal">NULL</span>);</span><br><span class="line">   要查询所有"生产日期"没有添加的所有商品：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> proDate <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line">3).添加一条记录：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="number">15</span>,<span class="string">'果11'</span>,<span class="number">300</span>,<span class="string">''</span>,<span class="literal">null</span>);</span><br><span class="line">   要查询出来这条记录：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> proDate = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><p>##### </p><p>##### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-数据库的概念：&quot;&gt;&lt;a href=&quot;#01-数据库的概念：&quot; class=&quot;headerlink&quot; title=&quot;01.数据库的概念：&quot;&gt;&lt;/a&gt;01.数据库的概念：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1).数据库的概念：数据库(Database)，就是存储,维
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.top.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
  </entry>
  
</feed>
