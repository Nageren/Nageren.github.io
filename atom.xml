<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.top.com/"/>
  <updated>2017-11-26T06:26:06.441Z</updated>
  <id>http://www.top.com/</id>
  
  <author>
    <name>马文磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://www.top.com/2017/11/26/mysql01/"/>
    <id>http://www.top.com/2017/11/26/mysql01/</id>
    <published>2017-11-26T06:23:50.000Z</published>
    <updated>2017-11-26T06:26:06.441Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-数据库的概念："><a href="#01-数据库的概念：" class="headerlink" title="01.数据库的概念："></a>01.数据库的概念：</h4><pre><code>1).数据库的概念：数据库(Database)，就是存储,维护，管理数据的仓库。2).作用：用来存储和管理大量数据的。内部采用了非常便于查询的机制来存储数据，能保证我们在大量数据的情况下         可以很快，并且很准确为我们查询到所需记录。3).什么是数据库管理系统：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中表内的数据。</code></pre><h4 id="02-数据库内部的结构："><a href="#02-数据库内部的结构：" class="headerlink" title="02.数据库内部的结构："></a>02.数据库内部的结构：</h4><pre><code>数据库软件：   |--逻辑数据库(跟项目相关)    |--表        |--列        |--行(记录)    |--表    ....   |--逻辑数据库(跟项目相关)   ....</code></pre><h4 id="03-Java和数据库的对应关系："><a href="#03-Java和数据库的对应关系：" class="headerlink" title="03.Java和数据库的对应关系："></a>03.Java和数据库的对应关系：</h4><p>java        数据库</p><pre><code>项目        逻辑数据库类        表类中成员属性    表的字段(列)属性的数据类型    字段的数据类型对象        表中的一行记录</code></pre><h4 id="04-常见的数据库管理系统"><a href="#04-常见的数据库管理系统" class="headerlink" title="04.常见的数据库管理系统"></a>04.常见的数据库管理系统</h4><pre><code>MYSQL    ：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x版本也开始收费。Oracle    ：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。DB2：IBM公司的数据库产品,收费的。常应用在银行系统中.SQLServer：MicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。SyBase    ：已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。SQLite    : 嵌入式的小型数据库，应用在手机端。常用数据库：MYSQL，Oracle．这里使用MySQL数据库。MySQL中可以有多个数据库，数据库是真正存储数据的地方。</code></pre><h4 id="05-MySQL的安装和客户端连接："><a href="#05-MySQL的安装和客户端连接：" class="headerlink" title="05.MySQL的安装和客户端连接："></a>05.MySQL的安装和客户端连接：</h4><pre><code>1.连接MySQL服务器端：    1).使用命令行：        mysql -uroot -p密码 (回车)    2).使用SQLYog客户端:        直接启动，在连接界面填写：服务器IP，端口，用户名、密码，点击：连接</code></pre><h4 id="06-SQL语句的介绍："><a href="#06-SQL语句的介绍：" class="headerlink" title="06.SQL语句的介绍："></a>06.SQL语句的介绍：</h4><pre><code>1.普通话：标准的SQL语言，各个数据库厂商必须遵守的。2.方言：个数据库厂商自己开发的基于的SQL的一些新功能的语法。只在自己的数据库        上有效。</code></pre><h4 id="07-SQL语言的分类："><a href="#07-SQL语言的分类：" class="headerlink" title="07.SQL语言的分类："></a>07.SQL语言的分类：</h4><p>（结构化查询语言）</p><pre><code>1.DDL:数据定义语言,来定义数据库对象：逻辑数据库，表，列等。关键字：create（创建），alter（修改），drop（删除）等2.DCL:数据控制语言.用来定义数据库的访问权限和安全级别，及创建用户。grant ,revoke,if.3.DML【重点掌握】:数据操作语言。用来对数据库中表的&quot;记录&quot;进行更新。关键字：insert（添加），delete（删除），update（修改）等4.DQL【重点掌握】:数据查询语言。用来查询数据库中表的&quot;记录&quot;。关键字：select，from，where,groud by ,order by,having ,limit 聚合函数等</code></pre><h4 id="08-SQL通用语法："><a href="#08-SQL通用语法：" class="headerlink" title="08.SQL通用语法："></a>08.SQL通用语法：</h4><pre><code>1.SQL语句可以单行或多行书写，以分号结尾2.可使用空格和缩进来增强语句的可读性3.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写  例如：SELECT * FROM user。4.注释：    1).#单行注释    2).--(空格)单行注释    3)./* ... */ 多行注释</code></pre><h4 id="09-数据库操作的相关语句："><a href="#09-数据库操作的相关语句：" class="headerlink" title="09.数据库操作的相关语句："></a>09.数据库操作的相关语句：</h4><pre><code>1.创建数据库：    create database 数据库名;    或者    create database 数据库名 character set 字符集;2.查看所有数据库：    show databases;3.查看某个数据库的定义的信息:        show create database 数据库名;4.删除数据库：    drop database 数据库名;5.查看当前正在使用的数据库：    select database();6.切换数据库：    use 数据库名；</code></pre><h4 id="10-表操作的相关语句："><a href="#10-表操作的相关语句：" class="headerlink" title="10.表操作的相关语句："></a>10.表操作的相关语句：</h4><pre><code>1.创建表：    create table 表名(        字段名1  数据类型[长度]  [约束],        字段名2  数据类型[长度]  [约束],        ...        字段名n  数据类型[长度]  [约束]    );   例如创建一个学员信息表，存储：学号、姓名、性别、年龄    create table student(        stuNo int,        stuName    varchar(200),        stuSex    char(5),        stuAge    int    );2.Java的数据类型与MySQL中的数据类型    java数据类型        MySQL数据类型  ------------------------------------------------------------        整数:    int            int    小数：    float/double        float/double/decimal(m,n)    字符：    char            char    字符串：    String            char(定长)/varchar(不定长)    在Java中char表示一个字符；而MySQL中的char表示：可变的字符串；        =============================================================================================================    在MySQL中char和varchar的区别：    1.char:定长字符串：例如定义字段为：char(5):       表示最多存储5个字符，如果不足5个字符，剩下的用空字符填充。       例如：定义char(5)--&gt;要存储字符串&quot;abc&quot;--&gt;在硬盘上存储的格式--&gt;&quot;abc  &quot;                    要存储字符串&quot;abcd&quot;--&gt;在硬盘上存储的格式--&gt;&quot;abcd &quot;    2.varchar:不定长字符串：例如定义字段为：        varchar(5)表示最多存储5个字符，如果不足5个字符，不填充空字符。        例如：定义varchar(5)--&gt;要存储字符串&quot;abc&quot;--&gt;在硬盘上存储的格式--&gt;&quot;abc&quot;                 要存储字符串&quot;abcd&quot;--&gt;在硬盘上存储的格式--&gt;&quot;abcd&quot;    注意：    1.char类型的在查询效率上要高于varchar，所以，尽量选择char类型；    2.对于字段的平均长度相同或者变化不大的数据，优先使用char类型。        例如：手机号码、身份证号、银行卡号....    3.对于字段的平均长度相差比较大的数据，建议使用varchar类型。        例如：个人介绍......    =============================================================================================================    日期类型：    String    Date        date(日期常用)    范围：YYYY-MM-DD 1000-01-01~9999-12-3                datetime【常用】(日期和时间)范围：YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59    大文本：    String            Text    文本二进制    byte[]            binary    二进制(图片，视频)    byte[]            Blob3.查看数据库中的所有表：    show tables;4.查看表结构：    desc 表名;5.删除表：    drop table 表名;6.修改表：    alter table 表名 add 列名 类型(长度) [约束];        作用：修改表添加列.     例如：    #1，为分类表添加一个新的字段为分类描述 varchar(20)    ALTER TABLE category ADD `desc` VARCHAR(20);    alter table 表名 modify 列名 类型(长度) 约束;    作用：修改表修改列的类型长度及约束.    例如：    #2, 为分类表的描述字段进行修改，类型varchar(50) 添加约束 not null    ALTER TABLE category MODIFY `desc` VARCHAR(50) NOT NULL;    alter table 表名 change 旧列名 新列名 类型(长度) 约束;     作用：修改表修改列名.    例如：    #3, 为分类表的分类名称字段进行更换更换为 snamesname varchar(30)    ALTER TABLE category CHANGE `desc`description VARCHAR(30);    alter table 表名 drop 列名;        作用：修改表删除列.    例如：    #4, 删除分类表中snamename这列    ALTER TABLE category DROP description;    rename table 表名 to 新表名;    作用：修改表名    例如：    #5, 为分类表category改名成 category2    RENAME TABLE category TO category2;    alter table 表名 character set 字符集;    作用：修改表的字符集    例如：    #6, 为分类表 category 的编码表进行修改，修改成 gbk    ALTER TABLE category CHARACTER SET gbk;</code></pre><h4 id="11-表记录操作相关的语句："><a href="#11-表记录操作相关的语句：" class="headerlink" title="11.表记录操作相关的语句："></a>11.表记录操作相关的语句：</h4><pre><code>1.添加数据：insert into    两种格式：    1.insert into 表名 values(值1，值2，.....，值n)--全字段添加      注意：      1).后面值列表中的数量必须跟表中列的数量匹配，而且顺序也要匹配。      2).值：数值类型，可以不用单引号(用也可以)             字符串类型，一定要使用单引号。        2.insert into 表名(字段1,字段2,.....,字段n) values(值1,值2,....,值n)--部分字段添加，剩余字段添加：NULL      注意：      1).字段列表：可以是表的部分字段，也可以不按照定义顺序；      2).值列表：必须跟字段列表的数量和顺序要匹配。      3).未指定的字段，添加：NULL值。(前提是：字段允许NULL值)2.修改数据：update    格式：update 表名 set 字段名1 = 值1 , 字段名2 = 值2 , .... , 字段名n = 值n   where 条件；3.删除数据：delete from    格式：delete from 表名 where 条件;  清空表：    1).delete from 表名;逐行删除，效率低；不清空auto_increment记录数    2).truncate 表名;先摧毁表，然后按照原结构再创建一个新表，效率高；auto_increment将置为零，从新开始4.查询数据：select 字段名 from 表名 where 字段的筛选条件    1.简单查询：        1).查询所有字段的所有记录：            select pid,pname,price,categoryName from product;            或者            select * from product;        2).查询部分字段的所有记录：            select pname,price from product;        3).使用别名：            a).列别名：                SELECT pname AS &apos;商品名称&apos; , price AS &apos;价格&apos; FROM product;            b).表别名：                SELECT p.pname,p.price FROM product p;//一般在多表中使用别名        4).去掉重复值                SELECT DISTINCT price FROM product;        5).对查询结果进行运算：            例如：将所有查询结果的商品的价格加100显示：            select pname,price + 100 from product;                注意：只对查询结果进行更改，原数据没有更改。    2.条件查询：        1).比较运算符：            1).&quot;&gt;&quot;:大于。例如：查询价格大于2000元的商品        --针对数值类型查询                select * from product where price &gt; 2000;            2).&quot;&lt;&quot;:小于。例如：查询价格小于2000元的商品        --针对数值类型查询                select * from product where price &lt; 2000;            3).&quot;&gt;=&quot;:大于等于。例如：查询价格大于等于2000元的商品    --针对数值类型查询                select * from product where price &gt;= 2000;            4).&quot;&lt;=&quot;:小于等于。例如：查询价格小于等于2000元的商品    --针对数值类型查询                select * from product where price &lt;= 2000;            5).&quot;&lt;&gt;&quot;:不等于。例如：查询价格不等于2000元的商品    --针对各种类型                select * from product where price &lt;&gt; 2000;               &quot;!=&quot;:不等于                        --针对各种类型                select * from product where price != 2000;            6).&quot;=&quot; :等于.例如：查询价格等于2000元的商品        --针对各种类型                select * from product where price = 2000;        2).逻辑运算符：            1).and : 语义：并且                例如：查询所有商品价格大于2000元的电脑类商品                select * from product where price &gt; 2000 and categoryName = &apos;电脑&apos;;            2).or  : 语义：或者                例如：查询所有商品价格大于2000元，或者价格低于1000元的所有商品                select * from product where price &gt; 2000 or price &lt; 1000;            3).not : 语义：非                例如：查询商品价格不大于2000元的所有商品                select * from product where not(price &gt; 2000);            注意：如果多个and和or运算，中间不要加逗号，可以使用()改变运算顺序。            例如：查询所有价格大于2000元的电脑类商品或者服装类商品                select * from product where price &gt; 2000 and (categoryName = &apos;电脑&apos; or categoryName = &apos;服装&apos;);        3).范围查询：between ... and ...(可以用于数值类型，也可以用于日期类型)            1).用于查询数值范围：between(包含)....and(包含)...               例如：查询价格在1000元(包含)到2000元(包含)之间的所有商品                select * from product where price &gt;= 1000 and price &lt;= 2000;                或者                select * from product where price between 1000 and 2000;            2).用于查询日期范围：                例如：查询生产日期在2017年1月份的所有商品                select * from product where proDate between &apos;2017-01-01&apos; and &apos;2017-01-31&apos;;        4).多个值的判断：in(值列表)            例如：查询商品价格为200元，500元，1000元，2000元的商品信息                select * from product where price = 200 or price = 500 or price = 1000 or price = 2000;                或者使用in查询                select * from product where price in (200,500,1000,2000);        5).模糊查询：like 两个通配符：1)&quot;%&quot; : 任意的0到多个字符；2)&quot;_&quot;:任意的1个字符            例如：查询商品名称中包含&quot;花&quot;的商品信息                select * from product where pname like &apos;%花%&apos;;                  查询商品名称中以&quot;花&quot;字开头的商品：                    select * from product where pname like &apos;花%&apos;;                  商品名称以&quot;花花&quot;开头，全名是四个字的商品：                    select * from product where pname like &apos;花花__&apos;;        6).查询空字段：            1).添加一条记录时，不添加的字段可以指定为NULL值，例如：                insert into product values(14,&apos;果10&apos;,200,&apos;食品&apos;,NULL);               要查询所有&quot;生产日期&quot;没有添加的所有商品：                select * from product where proDate IS NULL;            3).添加一条记录：                insert into product values(15,&apos;果11&apos;,300,&apos;&apos;,null);               要查询出来这条记录：                select * from product where proDate = &apos;&apos;;</code></pre><p>##### </p><p>##### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-数据库的概念：&quot;&gt;&lt;a href=&quot;#01-数据库的概念：&quot; class=&quot;headerlink&quot; title=&quot;01.数据库的概念：&quot;&gt;&lt;/a&gt;01.数据库的概念：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1).数据库的概念：数据库(Database)，就是存储,维
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.top.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.top.com/2017/11/26/mysql03/"/>
    <id>http://www.top.com/2017/11/26/mysql03/</id>
    <published>2017-11-26T06:20:52.877Z</published>
    <updated>2017-10-17T00:21:53.272Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-多表查询-交叉查询【了解】"><a href="#01-多表查询-交叉查询【了解】" class="headerlink" title="01.多表查询_交叉查询【了解】"></a>01.多表查询_交叉查询【了解】</h4><pre><code>1.查询结果=左表的总记录数 * 右表的总记录数 -- 笛卡尔积</code></pre><h4 id="02-多表查询-内连接查询【重点掌握】"><a href="#02-多表查询-内连接查询【重点掌握】" class="headerlink" title="02.多表查询_内连接查询【重点掌握】"></a>02.多表查询_内连接查询【重点掌握】</h4><pre><code>1.隐式内连接【常用】：    1).格式：select 字段列表 from 表1,表2 where 表1和表2的等值关系;    2).例如：查询商品信息，要显示所对应类别信息        select * from products , category where products.category_id = catetory.cid;        只保留两个表的部分字段，使用表别名：        SELECT p.pname,p.price,c.cname FROM products p , category c WHERE p.category_id = c.cid;    3).练习：查询&quot;市&quot;的所有信息，并且显示对应的&quot;省名&quot;        SELECT c.cname AS &apos;市&apos;,p.pname AS &apos;省&apos; FROM city c,province p WHERE c.pid = p.pid;2.显示内连接：    1).格式：select 字段列表 from 表1 INNER JOIN 表2 ON 等值关系；    2).例如：查询商品信息，要显示所对应类别信息        select * from products p inner join category c on p.category_id = c.cid;    3).练习：查询&quot;市&quot;的所有信息，并且显示对应的&quot;省名&quot;        SELECT c.cname AS &apos;市&apos;,p.pname AS &apos;省&apos; from city c inner join province p on c.pid = p.pid;注意：1.内连接的查询结果：两个表中的等值记录；2.两种内连接都可以再添加其它where条件：    隐式内连接：select .. from 表1,表2 where 等值条件 and 其它条件...    显示内连接：select .. from 表1 inner join 表2 on 等值条件 where 其它条件....3.两种查询的格式说明：    隐式内连接：select .. from 表1,表2 on 等值条件//错误    显示内连接：select .. from 表1 inner join 表2 where 等值条件//OK的</code></pre><h4 id="03-多表查询-外连接查询【重点掌握】"><a href="#03-多表查询-外连接查询【重点掌握】" class="headerlink" title="03.多表查询_外连接查询【重点掌握】"></a>03.多表查询_外连接查询【重点掌握】</h4><pre><code>1.左外连接查询：    1).格式：select 字段列表 from 表1 left join 表2 on 等值关系;    2).查询结果：左表的所有记录，和右表的等值记录;    3).例如：需求：查询出所有商品(包括没有类别的商品)，有类别的商品要显示类别名称。        SELECT * FROM products p LEFT JOIN category c ON p.category_id = c.cid;2.右外连接查询：    1).格式：select 字段列表 from 表1 right join 表2 on 等值关系；    2).查询结果：右表的所有记录，和左表中的等值记录；    3).例如：需求：查询出所有的商品类别，如果类别下有商品的，要同时显示商品信息；        SELECT * FROM products p RIGHT JOIN category c ON p.category_id = c.cid;</code></pre><h4 id="04-子查询【重点掌握】"><a href="#04-子查询【重点掌握】" class="headerlink" title="04.子查询【重点掌握】"></a>04.子查询【重点掌握】</h4><pre><code>1.在一个查询内部，可以再写一个查询，这个写在内部的查询就叫：子查询；2.子查询的结果可以作为另一个查询：判断条件，表使用。3.例子：查询价格高于&quot;劲霸&quot;的商品信息；    SELECT * FROM products WHERE price &gt; (SELECT price FROM products WHERE pname = &apos;劲霸&apos;);4.练习：    1).查询化妆品类别的商品信息       a).使用多表连接查询：        select * from products p , category c where p.category_id = c.cid and c.cname = &apos;化妆品&apos;;       b).使用子查询(单表查询)        SELECT * FROM products WHERE category_id = (SELECT cid FROM category WHERE cname = &apos;化妆品&apos;);       c).使用子查询作为第三张表：select * from (子查询)        SELECT * FROM products p ,(SELECT * FROM category WHERE cname = &apos;化妆品&apos;) c WHERE p.category_id = c.cid;    2).查询所有&quot;家电&quot;,&quot;服饰&quot;类商品的信息：        select * from products where category_id = 1 or category_id = 2;        改进：        select * from products where category_id in (1,2);        改进：        select * from products where category_id in (select cid from category where cname in (&apos;家电&apos;,&apos;服饰&apos;));</code></pre><h4 id="学习目标总结："><a href="#学习目标总结：" class="headerlink" title="学习目标总结："></a>学习目标总结：</h4><p>1，能够使用内连接进行多表查询<br>a，    说出内连接的两种查询方式</p><pre><code>1.隐式内连接2.显示内连接</code></pre><p>b，    写出显式内连接的SQL语句<br>        select <em> from products p inner join category c on p.category_id = c.cid;<br>c，    写出隐式内连接的SQL语句<br>        select </em> from products p , category c where p.category_id = c.cid;<br>2，能够使用外连接进行多表查询<br>a，    说出外连接的两种查询方式<br>        1.左外查询<br>        2.右外查询<br>b，    写出左外连接的SQL语句<br>        select <em> from products p left join category c on p.category_id = c.cid;//所有左表中的记录，和右表的等值记录<br>c，    写出右外连接的SQL语句<br>        select </em> from products p right join category c on p.category_id = c.cid;//所有右表中的记录，和左表的等值记录<br>3，能够使用子查询进行多表查询<br>    select * from products where category_id in (select cid from category where cname in (‘家电’,’服饰’));</p><p>扩展：三表联查：<br>    1.隐式内连接：使用user表，role表，user_role表进行测试<br>        select <em> from users u , role r,user_role ur where u.uid = ur.uid and ur.rid = r.rid;<br>    2.显示内连接：<br>        select </em> from users u inner join user_role ur on u.uid = ur.uid inner join role r on ur.rid = r.rid;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-多表查询-交叉查询【了解】&quot;&gt;&lt;a href=&quot;#01-多表查询-交叉查询【了解】&quot; class=&quot;headerlink&quot; title=&quot;01.多表查询_交叉查询【了解】&quot;&gt;&lt;/a&gt;01.多表查询_交叉查询【了解】&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.查询结果
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.top.com/2017/11/26/mysql02/"/>
    <id>http://www.top.com/2017/11/26/mysql02/</id>
    <published>2017-11-26T06:20:52.861Z</published>
    <updated>2017-10-18T09:28:02.920Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-SQL高级查询-排序："><a href="#01-SQL高级查询-排序：" class="headerlink" title="01.SQL高级查询_排序："></a>01.SQL高级查询_排序：</h4><pre><code>1.使用的关键字：order by 字段名 ASC(升序--默认) / DESC(降序)  例如：查询所有商品，要求结果按价格从小到大排序    SELECT * FROM product ORDER BY proDate ASC;2.注意：升序可以不写asc关键字，例如：    select * from product order by proData;//升序3.排序：    升序(ASC):从小到大；    降序(DESC):从大到小；4.对多列进行排序：  例如：对多列进行排序：按金额排序，如果金额相同，按生产日期升序排序    SELECT * FROM product ORDER BY price ASC,proDate ASC;    先按第一个字段排序，在第一个字段值相同的情况下，再按第二个字段排。5.如果有查询条件，写法：    select * from 表名 where 条件  order by 字段 ... ;</code></pre><h4 id="02-SQL高级查询-聚合函数："><a href="#02-SQL高级查询-聚合函数：" class="headerlink" title="02.SQL高级查询_聚合函数："></a>02.SQL高级查询_聚合函数：</h4><pre><code>1.我经常会有需求，对某列进行汇总，这就需要使用&quot;聚合函数&quot;；2.今天我们掌握的五个聚合函数：    a).count(*/字段名)：统计指定列不为NULL的记录行数--任何数据类型        例如：查询电脑类别的商品，共有多少种        SELECT COUNT(*) FROM product WHERE categoryName = &apos;电脑&apos;;    b).sum(列名)：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0--数值类型的列        例如：查询电脑类商品的价格总数是多少？        select sum(price) from product where categoryName = &apos;电脑&apos;;    c).max(列名)：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算--数值类型、日期类型        例如：查询电脑类商品的最高价格？        select max(price) from product where categoryName = &apos;电脑&apos;;    d).min(列名)：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算        例如：查询电脑类商品的最低价格？        select min(price) from product where categoryName = &apos;电脑&apos;;    e).avg(列名)：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0        例如：查询电脑类商品的平均价格？        select avg(price) from product where categoryName = &apos;电脑&apos;;        注意：计算记录的总数量时，不包含NULL的记录。              所以如果计算的列中有NULL值，则结果不准确。3.注意：聚合查询的结果，只能包含&quot;聚合结果列&quot;，不要包含其他列，要包含，其结果是无意义的。        聚合的结果是&quot;计算的结果&quot;，跟某行数据无关，所以不能关联显示其它字段。</code></pre><h4 id="03-SQL高级查询-分组："><a href="#03-SQL高级查询-分组：" class="headerlink" title="03.SQL高级查询_分组："></a>03.SQL高级查询_分组：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.分组：对某列中"相同的值"作为一组，进行分组。分组只是手段，后续经常需要进行汇总：</span><br><span class="line">2.例如：一条语句查询出每种商品的最高价格是多少？</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">MAX</span>(price) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryName;</span><br><span class="line">练习：查询每种商品的价格的总和</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">SUM</span>(price) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryName;</span><br><span class="line">练习：查询每种商品的商品数量是多少</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryname;</span><br><span class="line">3.注意：</span><br><span class="line">   1).分组查询的结果字段中，只能包含"分组字段"，"聚合结果字段"。不能再包含其他字段，如果包含，其结果也是无意义的。</span><br><span class="line">4.having子句：</span><br><span class="line">   1).由于where不能对聚合后的结果进行筛选。所以要对聚合后的结果进行筛选，需要使用having子句。</span><br><span class="line">例如：查询每种商品的价格总额，结果保留大于1000元的。</span><br><span class="line"><span class="keyword">select</span> categoryName,<span class="keyword">sum</span>(price) <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> categoryName <span class="keyword">having</span> <span class="keyword">sum</span>(price) &gt; <span class="number">1000</span>;</span><br><span class="line">5.对多列进行分组：</span><br><span class="line">    收支流水表：trans</span><br><span class="line">    id收支项账户金额</span><br><span class="line">    1工资收入工商银行1000</span><br><span class="line">    2红包收入工商银行500</span><br><span class="line">    3收入交通银行3000</span><br><span class="line">    4支出工商银行300</span><br><span class="line">    5支出交通银行770</span><br><span class="line"></span><br><span class="line">    需求：查询出每个账户的收支总额，分别是多少？</span><br><span class="line">账户收支项总金额</span><br><span class="line">工商银行收入1500</span><br><span class="line">工商银行支出300</span><br><span class="line">交通银行收入3000</span><br><span class="line">交通银行支出770</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">select</span> 账户,收支项,<span class="keyword">sum</span>(金额) <span class="keyword">from</span> trans <span class="keyword">group</span> <span class="keyword">by</span> 账户,收支项;//先按账户分，再按收支项分。</span><br></pre></td></tr></table></figure><h4 id="04-SQL语句的执行顺序："><a href="#04-SQL语句的执行顺序：" class="headerlink" title="04.SQL语句的执行顺序："></a>04.SQL语句的执行顺序：</h4><pre><code>1).from2).where3).group by4).having5).select6).distinct7).order by</code></pre><p>   SQL语句的编写顺序：<br>    select … from …  where … group by … having … order by …;</p><h4 id="05-分页查询："><a href="#05-分页查询：" class="headerlink" title="05.分页查询："></a>05.分页查询：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1).基本语句：<span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> M,N;</span><br><span class="line">             M值：从第几条(第一条记录为0)记录开始取。</span><br><span class="line">     N值：取几条记录</span><br><span class="line">2).例如：查询所有的商品，每页显示5条：</span><br><span class="line">第一页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">第二页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">第三页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line">固定算法：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> (当前的页数 - <span class="number">1</span>) * 每页显示的条数</span><br><span class="line"><span class="number">3</span>).注意：M值和N值，只要是正数，不会抛异常，可能会返回空结果集。</span><br><span class="line">         但如果是负数，会抛异常。</span><br></pre></td></tr></table></figure><h4 id="06-备份和恢复数据库："><a href="#06-备份和恢复数据库：" class="headerlink" title="06.备份和恢复数据库："></a>06.备份和恢复数据库：</h4><pre><code>1).备份：在要备份的数据库上右键--&gt;备份/导出--&gt;以SQL转储文件备份数据库2).恢复：在SQLYog左侧右键--&gt;导入--&gt;从SQL转储文件导入数据库</code></pre><h4 id="07-SQL的约束："><a href="#07-SQL的约束：" class="headerlink" title="07.SQL的约束："></a>07.SQL的约束：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1).主键约束：</span><br><span class="line">1).主键的作用：唯一标识表中一条记录。用于作为条件，方便的进行增删改查操作。</span><br><span class="line">2).定义主键：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">..其它字段..</span><br><span class="line">..</span><br><span class="line">)</span><br><span class="line"><span class="number">3</span>).一个表中只能有一个主键；</span><br><span class="line"><span class="number">4</span>).一个主键，可以由一个或多个字段组成[很少用]；复合主键，联合主键</span><br><span class="line">客户信息表：将<span class="string">"客户姓名"</span> + <span class="string">"工作单位"</span> 同时作为一个主键</span><br><span class="line">客户姓名工作单位性别年龄</span><br><span class="line">张三人事部男<span class="number">20</span></span><br><span class="line">李四人事部女<span class="number">22</span></span><br><span class="line">张三业务部男<span class="number">23</span></span><br><span class="line">张三人事部男<span class="number">18</span> //错误的数据</span><br><span class="line"><span class="number">5</span>).任何类型的字段都可以做主键。当前使用<span class="built_in">int</span>类型。后期<span class="built_in">varchar</span></span><br><span class="line"><span class="number">6</span>).为某个字段添加了<span class="string">"主键约束"</span>，也同时自动添加：唯一约束、非空约束</span><br><span class="line"><span class="number">7</span>).删除主键约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line">2).自动增长：</span><br><span class="line">1).自动增长：让某列的值根据某个基数，进行自增。这种约束通常用于"主键".</span><br><span class="line">2).添加自动增长约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">....</span><br><span class="line">)</span><br><span class="line"><span class="number">3</span>).清空表对自动增长列的基数的变化：</span><br><span class="line"><span class="number">1</span>).delete <span class="keyword">from</span> 表名:逐行删除。不改变自动增长的基数。</span><br><span class="line"><span class="number">2</span>).truncate 表名【效率高】：摧毁表，重建表。将自动增长的基数重新设置为<span class="number">1.</span></span><br><span class="line"><span class="number">3</span>).非空约束：<span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="number">1</span>).作用：强制某列的数据不能包含<span class="literal">NULL</span>值；</span><br><span class="line"><span class="number">2</span>).添加非空约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">....</span><br><span class="line">)</span><br><span class="line">如下添加，会抛出异常：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="literal">null</span>,...);//第二个null是错误，pname字段不允许null值</span><br><span class="line">3).删除非空约束 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 数据类型[长度] (后面不出现<span class="keyword">not</span> <span class="literal">null</span>约束即可，就表示删除了<span class="keyword">not</span> <span class="literal">NULL</span>约束) </span><br><span class="line"><span class="number">4</span>).唯一约束：<span class="keyword">unique</span></span><br><span class="line"><span class="number">1</span>).作用：表示本列的值是唯一的</span><br><span class="line"><span class="number">2</span>).添加唯一约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">unique</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line">   如果向pname字段添加重复的值，数据库会抛出异常。</span><br><span class="line"><span class="number">3</span>).如果字段设置了唯一约束，可以写入<span class="string">"空字符串"</span>，但只能有一条。</span><br><span class="line">   也可以写入<span class="literal">NULL</span>值，可以写入多条。</span><br><span class="line"><span class="number">4</span>).删除唯一约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 名称;</span><br><span class="line">如果添加唯一约束时，没有设置约束名称，默认是当前字段的字段名</span><br><span class="line">5).主键与唯一约束的区别：</span><br><span class="line">主键：代表：唯一、非空；一个表只能有一个主键；</span><br><span class="line">唯一：只代表：唯一；可以有多个NULL值；一个表可以有多个字段被设置为唯一约束；</span><br><span class="line">5).默认约束：default 值;</span><br><span class="line">1).作用：可以设置某列的默认值，在添加数据时，可以不指定这列的数据，而使用默认值。</span><br><span class="line">2).设置默认约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span><span class="built_in">int</span>primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">stuName<span class="built_in">varchar</span>(<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex<span class="built_in">char</span>(<span class="number">5</span>)<span class="keyword">default</span> <span class="string">'男'</span></span><br><span class="line">)</span><br><span class="line">在添加时，如果要使用默认值：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'bbb'</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line">3).删除默认约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 数据类型[长度](后面不要出现<span class="keyword">default</span>关键字即可)</span><br></pre></td></tr></table></figure><h4 id="08-多表-分表的作用："><a href="#08-多表-分表的作用：" class="headerlink" title="08.多表_分表的作用："></a>08.多表_分表的作用：</h4><pre><code>1.在制作表时要注意：一个表只描述一件事情。如果需要描述多件事情，可以创建多表，然后通过某个字段去引用                    另一个表的数据。这样可以使每个表的数据单独管理，互不影响。2.分表后：    主表：被其它表引用的表；    从表：引用其它表的表；    3.作用：            避免主键冲突，减少数据冗余</code></pre><h4 id="09-多表-表和表之间的关系："><a href="#09-多表-表和表之间的关系：" class="headerlink" title="09.多表_表和表之间的关系："></a>09.多表_表和表之间的关系：</h4><pre><code>1.一对多关系【最常用】：    1).应用场景：客户和订单；分类和商品；部门和员工        客户表:主表                订单表：从表                            外键        ----------------------------------------------------------------------------------------        客户ID    登录名    支付宝            订单ID    订单时间    总金额        客户ID        001    zhangsan  xxx            001    xxx        xxx        001                              002    xxx        xxx        001    2).建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.2.多对多关系【较常用】：    1).应用场景：订单和商品、用户和角色        订单表                    商品表：        -----------------------------------------------------------------------------------------        订单ID    订单日期   总金额          商品ID    名称    单价            d001    2017-07-04  100            p001    奥利奥    5.5        d002    2017-07-05  200            p002    红牛    4                            p003    啤酒    2.00                    订单_商品_关系表                    订单Id        商品ID    数量    总价                    d001        p001    2    11                    d001        p002    3    12                    d001        p003                        d002        p001    2).建表原则：需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。3.一对一关系【不建议用】：    1).客户信息表：                        地址表        姓名    性别    年龄    地址ID            id    省    市    区    街道门牌        张三    男    22    01            01    北京    北京    顺义    99号        李四    女    23    02            02    河北    廊坊    安次    88号    ------------------------------------------------------------------------------------------------       合并为一个客户表：        姓名    性别    年龄    省    市    区    街道门牌        张三    男    22    北京    北京    顺义    99号        李四    女    23    河北    廊坊    安次    88号</code></pre><h4 id="10-外键约束："><a href="#10-外键约束：" class="headerlink" title="10.外键约束："></a>10.外键约束：</h4><pre><code>1).作用：设置在&quot;从表&quot;的外键字段上，可以强制外键字段的值必须参考主表中的主键字段的值。2).设置外键约束：    alter table 从表 add [constraint] [外键名称] foreign key (从表外键字段名) references 主表 (主表的主键);3).使用外键目的：    保证数据完整性</code></pre><h4 id="学习目标总结："><a href="#学习目标总结：" class="headerlink" title="学习目标总结："></a>学习目标总结：</h4><p>3，能够使用SQL语句进行排序<br>a，    说出排序语句中的升序和降序关键字</p><pre><code>order by 字段名 ASC(升序-默认) / DESC(降序)</code></pre><p>b，    写出排序语句<br>        select <em> from product order by price desc;<br>4，能够使用聚合函数<br>a，    写出获取总记录数的SQL语句<br>        select count(</em>) from product;<br>b，    写出获取某一列数据总和的SQL语句<br>        select sum(price) from product;<br>c，    写出获取某一列数据平均值的SQL语句<br>        select avg(price) …<br>d，    写出获取某一列数据的最大值的SQL语句<br>        select max(price) …<br>e，    写出获取某一列数据的最小值的SQL语句<br>        select min(price) …<br>5，能够使用SQL语句进行分组查询<br>a，    写出分组的SQL语句<br>        group by 字段名<br>b，    写出分组后条件过滤器的SQL语句<br>        gruup by 字段名 having 聚合函数 条件;<br>6，能够完成数据的备份和恢复<br>    1.备份：在要备份的数据库上右键–&gt;备份/导出–&gt;以SQL转储文件备份数据库<br>    2.恢复：在SQLYog左边右键–&gt;导入–&gt;以SQL转储文件导入数据库。<br>7，能够使用可视化工具连接数据库,操作数据库<br>    使用SQLYog连接数据库。操作数据库</p><p>8，能够说出多表之间的关系及其建表原则<br>a，    说出一对多的应用场景及其建表原则<br>        1).应用场景：客户和订单，分类和商品，部门和员工.<br>        2).在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.<br>b，    说出多对多的应用场景及其建表原则<br>        1).应用场景：学生和课程、用户和角色<br>        2).需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键.<br>9，能够理解外键约束<br>a，    说出外键约束的作用<br>        作用：强制外键字段的值必须参考主表中主键字段的值。<br>b，    写出创建外键的SQL语句<br>        alter table product add constraint fk_fkname foreign key (categoryid) references category (cid);<br>c，    通过sql语句能够建立多表及其关系<br>        创建表的外键，并且创建外键约束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-SQL高级查询-排序：&quot;&gt;&lt;a href=&quot;#01-SQL高级查询-排序：&quot; class=&quot;headerlink&quot; title=&quot;01.SQL高级查询_排序：&quot;&gt;&lt;/a&gt;01.SQL高级查询_排序：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.使用的关键字：order
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.top.com/2017/11/26/oracle02/"/>
    <id>http://www.top.com/2017/11/26/oracle02/</id>
    <published>2017-11-26T06:20:45.412Z</published>
    <updated>2017-10-19T13:27:48.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oracle第二天"><a href="#Oracle第二天" class="headerlink" title="Oracle第二天"></a>Oracle第二天</h2><h3 id="sql原则"><a href="#sql原则" class="headerlink" title="sql原则 :"></a>sql原则 :</h3><h4 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序 :"></a>书写顺序 :</h4><p>​    <code>select   from   where   group    by   having  order by</code></p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序:"></a>执行顺序:</h4><p>​        <code>from   where   group  by  haing   select  order by</code></p><h4 id="双引号问"><a href="#双引号问" class="headerlink" title="双引号问"></a>双引号问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">默认创建的都是大写的</span><br><span class="line"></span><br><span class="line">select  empno ,ename from  &quot;emp&quot;;    //  oracle  区分大小写    表示查 表名为  emp  ,而不是EMP</span><br><span class="line"></span><br><span class="line">select  empno ,ename from  emp;    //  oracle  区分大小写    表示查 表名为  EMP,而不是emp</span><br><span class="line"></span><br><span class="line">oracle默认会把   &quot;emp&quot; 装换为大写      可以用来保存和查询  大写的内容</span><br><span class="line"></span><br><span class="line">select empno , ename from &quot;emp&quot;</span><br><span class="line"></span><br><span class="line">create  table aaa (  // 在数据库中保存是会把 aaa 保存为AAA;</span><br><span class="line">   id char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select * from &quot;aaa&quot;  //查不到</span><br><span class="line"></span><br><span class="line">create  table &quot;bbb&quot; (  // 在数据库中保存是会把 aaa 保存为bbb;</span><br><span class="line"> &quot;id&quot; char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select &quot;id&quot; from &quot;bbb&quot; // 可以查到</span><br></pre></td></tr></table></figure><h3 id="案列学习知识"><a href="#案列学习知识" class="headerlink" title="案列学习知识"></a>案列学习知识</h3><h4 id="1-笛卡尔积"><a href="#1-笛卡尔积" class="headerlink" title="1.笛卡尔积"></a>1.笛卡尔积</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询员工表和部门表</span><br><span class="line">select * from emp; --14</span><br><span class="line">select * from dept; --4</span><br><span class="line"></span><br><span class="line">select * from emp , dept   --56=14*4  笛卡尔积</span><br><span class="line">select * from emp e, dept d where e.deptno=d.deptno</span><br><span class="line"></span><br><span class="line">--范例：查询出雇员的编号，姓名，部门的编号和名称，地址</span><br><span class="line">select empno,ename,d.deptno,dname,loc from emp e, dept d where e.deptno=d.deptno</span><br></pre></td></tr></table></figure><h4 id="2-自关联-自查询-自连接"><a href="#2-自关联-自查询-自连接" class="headerlink" title="2.自关联  自查询  自连接"></a>2.自关联  自查询  自连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--范例：查询出每个员工的上级领导  --自关联  自查询  自连接</span><br><span class="line">--(员工编号、员工姓名、员工部门编号、员工工资、领导编号、领导姓名、领导工资)</span><br><span class="line">select * from emp</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal from emp e1,--员工表</span><br><span class="line">emp e2 --领导表</span><br><span class="line">where e1.mgr=e2.empno</span><br><span class="line"></span><br><span class="line">--范例: 在上一个例子的基础上查询该员工的部门名称</span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,d.dname,e2.empno,e2.ename,e2.sal from emp e1,--员工表</span><br><span class="line">emp e2, --领导表,</span><br><span class="line">dept d</span><br><span class="line">where e1.mgr=e2.empno and e1.deptno=d.deptno</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--范例：在上一个例子的基础上查询出员工的工资等级和他的上级领导的工资等级</span><br><span class="line">--select * from salgrade 等级表</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,d.dname,s.grade,e2.empno,e2.ename,e2.sal,s1.grade </span><br><span class="line">from emp e1,--员工表</span><br><span class="line">emp e2, --领导表,</span><br><span class="line">dept d,</span><br><span class="line">salgrade s,</span><br><span class="line">salgrade s1</span><br><span class="line">where e1.mgr=e2.empno and e1.deptno=d.deptno and e1.sal between s.losal and s.hisal</span><br><span class="line"> and e2.sal between s1.losal and s1.hisal</span><br></pre></td></tr></table></figure><h4 id="3-外连接"><a href="#3-外连接" class="headerlink" title="3.外连接"></a>3.外连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">--范例：查询出所有员工的上级领导</span><br><span class="line">SELECT * FROM    emp e ,dept d  WHERE    e.deptno =  d.deptno ;  // 14</span><br><span class="line"></span><br><span class="line">-- left join on    right join on </span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1,emp e2 </span><br><span class="line">where e1.mgr=e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 left join emp e2 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e2 right join emp e1 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 ,emp e2 </span><br><span class="line">WHERE   e1.mgr = e2.empno(+);</span><br><span class="line"></span><br><span class="line">e1 :14</span><br><span class="line">e2 :13</span><br><span class="line"></span><br><span class="line">--范例：查询出所有的部门下的员工，要求把没有员工的部门也展示出来</span><br><span class="line">select * from  dept;</span><br><span class="line">SELECT * FROM   emp;</span><br><span class="line"></span><br><span class="line">select * from emp e ,dept d where e.deptno(+) = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="4-子查询"><a href="#4-子查询" class="headerlink" title="4.子查询"></a>4.子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">--查询比SCOTT工资高的员工</span><br><span class="line">select * from emp where sal &gt; ( select sal from emp where ename = &apos;SCOTT&apos; );</span><br><span class="line"></span><br><span class="line">select * from dept;</span><br><span class="line">--查询职位是经理并且工资比7782号员工高的员工</span><br><span class="line">select * from emp where  job = &apos;MANAGER&apos;  and sal &gt; (select sal from emp where empno = 7782);</span><br><span class="line"></span><br><span class="line">SELECT * FROM  emp;</span><br><span class="line"></span><br><span class="line">--查询工资最低的员工</span><br><span class="line">select  * from  emp  WHERE  sal=(select min(sal) from emp);</span><br><span class="line"></span><br><span class="line">--查询部门最低工资  大于30号部门最低工资的结果</span><br><span class="line">SELECT  deptno,min(sal) FROM   emp group by deptno  having min(sal) &gt; (select min(sal) from emp WHERE  deptno = 30);</span><br><span class="line"></span><br><span class="line">--查询出和scott同部门并且同职位的员工</span><br><span class="line">select * from emp;</span><br><span class="line"></span><br><span class="line">select * from emp WHERE deptno = (select deptno from emp WHERE  ename=&apos;SCOTT&apos;)</span><br><span class="line">and job = (SELECT job FROM  emp WHERE  ename=&apos;SCOTT&apos;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM  emp WHERE (deptno,job) = (select deptno,job from emp WHERE  ename=&apos;SCOTT&apos;  );</span><br><span class="line">SELECT * FROM  emp WHERE (deptno,job) in (select deptno,job from emp WHERE  ename=&apos;SCOTT&apos;  );</span><br><span class="line">--查询每个部门的最低工资和最低工资的雇员和部门名称</span><br><span class="line">select  deptno,min(sal) minsal  from emp group by deptno;</span><br><span class="line"></span><br><span class="line">select * from emp ;</span><br><span class="line"></span><br><span class="line">select * from emp e ,(select deptno,min(sal) minsal  from emp group by deptno) t where e.deptno = t.deptno</span><br><span class="line"> and  t.minsal  = e.sal;</span><br><span class="line"></span><br><span class="line">select * from emp e, (select deptno,min(sal) minsal from emp group by deptno) t, dept d</span><br><span class="line">where e.sal=t.minsal and e.deptno=t.deptno and d.deptno=e.deptno;</span><br><span class="line"></span><br><span class="line">select d.deptno,t.minsal,e.ename,d.dname from emp e, (select deptno,min(sal) minsal from emp group by deptno) t, dept d</span><br><span class="line">where e.sal=t.minsal and e.deptno=t.deptno and d.deptno=e.deptno;     </span><br><span class="line"></span><br><span class="line">--查询出不是领导的员工</span><br><span class="line">select * from  emp  where  empno  not in  (select mgr from emp where mgr is not null);</span><br></pre></td></tr></table></figure><h4 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5.分页查询"></a>5.分页查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">--课堂练习</span><br><span class="line">--查询员工表中工资最高的前三名</span><br><span class="line">-- 工资排序</span><br><span class="line">-- 分页   每页显示三条</span><br><span class="line">rownum 序号 随着查询而产生 </span><br><span class="line">rowid 每行数据在磁盘上的物理地址</span><br><span class="line"></span><br><span class="line">select e.*,rownum ,rowid  from emp e; </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc) e   where rownum&lt;4 </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc)  where  rownum &lt; 7 ;</span><br><span class="line"></span><br><span class="line">select  *  from (select e.*,rownum r from  (select * from emp order by sal desc) e where  rownum &lt; 7) t </span><br><span class="line"></span><br><span class="line">where t.r &gt;3;</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r from (select * from emp order by sal desc) e  where rownum &lt;10 )  t </span><br><span class="line">where   t.r &gt;6</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r  from  (select * from emp order by sal desc) e </span><br><span class="line">  where rownum&lt;7 ) t  where  t.r&gt;3</span><br><span class="line"></span><br><span class="line">--找到员工表中薪水大于本部门平均薪水的员工</span><br><span class="line">select *  from  emp e ,(select  deptno,avg(sal) avgsal from emp group by deptno)  t </span><br><span class="line">where e.deptno = t.deptno and   e.sal &gt; t.avgsal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--统计每年入职的员工个数</span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select  2  &quot;1981&quot;, 3 &quot;1982&quot; from  dual;</span><br><span class="line"></span><br><span class="line">decode decode(列名,&quot;列中的值&quot;,显示的值)</span><br><span class="line"></span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select    </span><br><span class="line">  sum(t.counts) &quot;Total&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1980&apos;,counts)) &quot;1980&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1981&apos;,counts)) &quot;1981&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1982&apos;,counts)) &quot;1982&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1987&apos;,counts)) &quot;1987&quot; </span><br><span class="line"> from  (select   to_char(hiredate,&apos;yyyy&apos;) years  ,count(*)  counts  from emp  group by to_char(hiredate,&apos;yyyy&apos;))  t ;</span><br></pre></td></tr></table></figure><h4 id="6-集合运算"><a href="#6-集合运算" class="headerlink" title="6.集合运算"></a>6.集合运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">--范例：工资大于1500，或者是20号部门下的员工</span><br><span class="line">select * from emp  where sal &gt; 1500 or deptno=20;</span><br><span class="line"></span><br><span class="line">select * from  emp where sal &gt; 1500</span><br><span class="line">union  --并集  union all</span><br><span class="line">select *  from  emp where deptno=20;</span><br><span class="line"></span><br><span class="line">select * from emp where sal&gt;1500</span><br><span class="line">union all</span><br><span class="line">select * from emp where deptno=20;</span><br><span class="line"></span><br><span class="line">--范例：工资大于1500，并且是20号部门下的员工</span><br><span class="line">select * from emp where sal &gt; 1500 and  deptno=20;</span><br><span class="line"></span><br><span class="line">select * from emp where sal&gt;1500</span><br><span class="line">intersect</span><br><span class="line">select * from emp where deptno=20;</span><br><span class="line"></span><br><span class="line">--范例：1981年入职的普通员工（不包括总裁和经理）</span><br><span class="line">select * from emp where  to_char(hiredate,&apos;yyyy&apos;)  = &apos;1981&apos;</span><br><span class="line">minus</span><br><span class="line">select * from emp where job =&apos;MANAGER&apos; or job = &apos;PRESIDENT&apos;;</span><br><span class="line"></span><br><span class="line">如果满足列数一样并且列对应的数据类型一直就可以做集合运算</span><br><span class="line">select empno,ename,deptno from emp</span><br><span class="line">union</span><br><span class="line">select deptno,dname,deptno from dept;</span><br></pre></td></tr></table></figure><h4 id="7-exists"><a href="#7-exists" class="headerlink" title="7.exists"></a>7.exists</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">  select * from 表名 where exists(sql查询语句)</span><br><span class="line"></span><br><span class="line">   exists(sql查询语句)   sql查询语句如果能查到结果   exists(sql查询语句)  返回true</span><br><span class="line"></span><br><span class="line">   exists(sql查询语句)  sql查询语句如果没有查到结果   exists(sql查询语句)  返回false</span><br><span class="line"></span><br><span class="line">  select * from emp where exists(select * from dept where deptno=10)</span><br><span class="line">  select * from emp where 1=1</span><br><span class="line">  select * from emp where exists(select * from dept where deptno=100)</span><br><span class="line">  select * from emp where 1=2</span><br><span class="line"></span><br><span class="line">查询没有员工的部门</span><br><span class="line"></span><br><span class="line">select * from dept d where not exists(select * from emp e where e.deptno=d.deptno)</span><br><span class="line"></span><br><span class="line">Oracle独有的分组方式:select后面出现的物理列，group by 后面一定要出现</span><br><span class="line"></span><br><span class="line">select d.deptno,d.dname, avg(sal)</span><br><span class="line">  from emp e, dept d</span><br><span class="line"> where e.deptno = d.deptno</span><br><span class="line"> group by d.deptno,d.dname</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="Oracle独有的"><a href="#Oracle独有的" class="headerlink" title="Oracle独有的"></a>Oracle独有的</h4><h5 id="1、-方式的外链接"><a href="#1、-方式的外链接" class="headerlink" title="1、(+)方式的外链接"></a>1、(+)方式的外链接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--范例：查询出每个员工的上级领导  --自关联  自查询  自连接</span><br><span class="line">--(员工编号、员工姓名、员工部门编号、员工工资、领导编号、领导姓名、领导工资)</span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 left join emp e2 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e2 right join emp e1 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 ,emp e2 </span><br><span class="line">WHERE   e1.mgr = e2.empno(+);</span><br></pre></td></tr></table></figure><h5 id="2、decode"><a href="#2、decode" class="headerlink" title="2、decode"></a>2、decode</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--统计每年入职的员工个数</span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select  2  &quot;1981&quot;, 3 &quot;1982&quot; from  dual;</span><br><span class="line"></span><br><span class="line">decode decode(列名,&quot;列中的值&quot;,显示的值)</span><br><span class="line"></span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select    </span><br><span class="line">  sum(t.counts) &quot;Total&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1980&apos;,counts)) &quot;1980&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1981&apos;,counts)) &quot;1981&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1982&apos;,counts)) &quot;1982&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1987&apos;,counts)) &quot;1987&quot; </span><br><span class="line"> from  (select   to_char(hiredate,&apos;yyyy&apos;) years  ,count(*)  counts  from emp  group by to_char(hiredate,&apos;yyyy&apos;))  t ;</span><br></pre></td></tr></table></figure><h5 id="3、分页"><a href="#3、分页" class="headerlink" title="3、分页"></a>3、分页</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--课堂练习</span><br><span class="line">--查询员工表中工资最高的前三名</span><br><span class="line">-- 工资排序</span><br><span class="line">-- 分页   每页显示三条</span><br><span class="line">rownum 序号 随着查询而产生 </span><br><span class="line">rowid 每行数据在磁盘上的物理地址</span><br><span class="line"></span><br><span class="line">select e.*,rownum ,rowid  from emp e; </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc) e   where rownum&lt;4 </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc)  where  rownum &lt; 7 ;</span><br><span class="line"></span><br><span class="line">select  *  from (select e.*,rownum r from  (select * from emp order by sal desc) e where  rownum &lt; 7) t </span><br><span class="line"></span><br><span class="line">where t.r &gt;3;</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r from (select * from emp order by sal desc) e  where rownum &lt;10 )  t </span><br><span class="line">where   t.r &gt;6</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r  from  (select * from emp order by sal desc) e </span><br><span class="line">  where rownum&lt;7 ) t  where  t.r&gt;3</span><br></pre></td></tr></table></figure><h5 id="4、Oracle独有的分组方式"><a href="#4、Oracle独有的分组方式" class="headerlink" title="4、Oracle独有的分组方式"></a>4、Oracle独有的分组方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查询没有员工的部门</span><br><span class="line"></span><br><span class="line">select * from dept d where not exists(select * from emp e where e.deptno=d.deptno)</span><br><span class="line"></span><br><span class="line">Oracle独有的分组方式:select后面出现的物理列，group by 后面一定要出现</span><br><span class="line"></span><br><span class="line">select d.deptno,d.dname, avg(sal)</span><br><span class="line">  from emp e, dept d</span><br><span class="line"> where e.deptno = d.deptno</span><br><span class="line"> group by d.deptno,d.dname</span><br></pre></td></tr></table></figure><h2 id="深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接"><a href="#深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接" class="headerlink" title="深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接"></a>深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接</h2><p><strong>1、内联接</strong>（典型的联接运算，使用像 =  或 &lt;&gt; 之类的比较运算符）。包括相等联接和自然联接。<br>内联接使用比较运算符根据每个表共有的列的值匹配两个表中的行。例如，检索 students和courses表中学生标识号相同的所有行。<br><strong>    2、外联接。</strong>外联接可以是左向外联接、右向外联接或完整外部联接。<br>在 FROM子句中指定外联接时，可以由下列几组关键字中的一组指定：<br>1）LEFT  JOIN或LEFT OUTER JOIN<br>左向外联接的结果集包括  LEFT OUTER子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。<br>2）RIGHT  JOIN 或 RIGHT  OUTER  JOIN<br>右向外联接是左向外联接的反向联接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。<br>3）FULL  JOIN 或 FULL OUTER JOIN<br>完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。<br><strong>3、交叉联接   </strong>交叉联接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉联接也称作笛卡尔积。<br>FROM 子句中的表或视图可通过内联接或完整外部联接按任意顺序指定；但是，用左或右向外联接指定表或视图时，表或视图的顺序很重要。有关使用左或右向外联接排列表的更多信息，请参见使用外联接。<br><strong>例子：</strong><br>-————————————————<br>  a表     id   name     b表     id   job   parent_id<br>​              1   张3                   1     23     1<br>​              2   李四                 2     34     2<br>​              3   王武                 3     34     4<br>  a.id同parent_id   存在关系<br>-————————————————-<br> 1） 内连接<br>  select   a.<em>,b.</em>   from   a   inner   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                   1     23     1<br>  2   李四                  2     34     2<br>  2）左连接<br>  select   a.<em>,b.</em>   from   a   left   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                   1     23     1<br>  2   李四                  2     34     2<br>  3   王武                  null<br> 3） 右连接<br>  select   a.<em>,b.</em>   from   a   right   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                   1     23     1<br>  2   李四                  2     34     2<br>  null                       3     34     4<br> 4） 完全连接<br>  select   a.<em>,b.</em>   from   a   full   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                  1     23     1<br>  2   李四                 2     34     2<br>  null               　　  3     34     4<br>  3   王武                 null<br>——————————————————————————————–<strong>一、交叉连接（CROSS JOIN）</strong>交叉连接（CROSS JOIN）：有两种，显式的和隐式的，不带ON子句，返回的是两表的乘积，也叫笛卡尔积。<br>例如：下面的语句1和语句2的结果是相同的。</p><p><strong>语句1：隐式的交叉连接，没有CROSS JOIN。</strong>SELECT O.ID, O.ORDER_NUMBER, C.ID, C.NAME<br>FROM ORDERS O , CUSTOMERS C<br>WHERE O.ID=1;</p><p><strong>语句2：显式的交叉连接，使用CROSS JOIN。</strong>SELECT O.ID,O.ORDER_NUMBER,C.ID,<br>C.NAME<br>FROM ORDERS O CROSS JOIN CUSTOMERS C<br>WHERE O.ID=1;<br>语句1和语句2的结果是相同的，查询结果如下：</p><p><strong>二、内连接（INNER JOIN）</strong>内连接（INNER JOIN）：有两种，显式的和隐式的，返回连接表中符合连接条件和查询条件的数据行。（所谓的链接表就是数据库在做查询形成的中间表）。<br>例如：下面的语句3和语句4的结果是相同的。</p><p><strong>语句3：隐式的内连接，没有INNER JOIN，形成的中间表为两个表的笛卡尔积。</strong>SELECT O.ID,O.ORDER_NUMBER,C.ID,C.NAME<br>FROM CUSTOMERS C,ORDERS O<br>WHERE C.ID=O.CUSTOMER_ID;</p><p><strong>语句4：显示的内连接，一般称为内连接，有INNER JOIN，形成的中间表为两个表经过ON条件过滤后的笛卡尔积。</strong>SELECT O.ID,O.ORDER_NUMBER,C.ID,C.NAME<br>FROM CUSTOMERS C INNER JOIN ORDERS O ON C.ID=O.CUSTOMER_ID;<br>语句3和语句4的查询结果：</p><p><strong>三、外连接（OUTER JOIN）：</strong>外连不但返回符合连接和查询条件的数据行，还返回不符合条件的一些行。外连接分三类：左外连接（LEFT OUTER JOIN）、右外连接（RIGHT OUTER JOIN）和全外连接（FULL OUTER JOIN）。<br>三者的共同点是都返回符合连接条件和查询条件（即：内连接）的数据行。不同点如下：<br>左外连接还返回左表中不符合连接条件单符合查询条件的数据行。<br>右外连接还返回右表中不符合连接条件单符合查询条件的数据行。<br>全外连接还返回左表中不符合连接条件单符合查询条件的数据行，并且还返回右表中不符合连接条件单符合查询条件的数据行。全外连接实际是上左外连接和右外连接的数学合集（去掉重复），即“全外=左外 UNION 右外”。<br>说明：左表就是在“（LEFT OUTER JOIN）”关键字左边的表。右表当然就是右边的了。在三种类型的外连接中，OUTER 关键字是可省略的。</p><p>下面举例说明：<br><strong>语句5：左外连接（LEFT OUTER JOIN）</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;</p><p><strong>语句6：右外连接（RIGHT OUTER JOIN）</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O RIGHT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br>注意：WHERE条件放在ON后面查询的结果是不一样的。例如：</p><p><strong>语句7：WHERE条件独立。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>WHERE O.ORDER_NUMBER&lt;&gt;’MIKE_ORDER001’;</p><p><strong>语句8：将语句7中的WHERE条件放到ON后面。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID AND O.ORDER_NUMBER&lt;&gt;’MIKE_ORDER001’;</p><p>从语句7和语句8查询的结果来看，显然是不相同的，语句8显示的结果是难以理解的。因此，推荐在写连接查询的时候，ON后面只跟连接条件，而对中间表限制的条件都写到WHERE子句中。<br><strong>语句9：全外连接（FULL OUTER JOIN）。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O FULL OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br>注意：MySQL是不支持全外的连接的，这里给出的写法适合Oracle和DB2。但是可以通过左外和右外求合集来获取全外连接的查询结果。下图是上面SQL在Oracle下执行的结果：<br><strong>语句10：左外和右外的合集，实际上查询结果和语句9是相同的。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>UNION<br>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O RIGHT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br>语句9和语句10的查询结果是相同的，如下：</p><p><strong>四、联合连接（UNION JOIN）：</strong>这是一种很少见的连接方式。Oracle、MySQL均不支持，其作用是：找出全外连接和内连接之间差异的所有行。这在数据分析中排错中比较常用。也可以利用数据库的集合操作来实现此功能。<br><strong>语句11：联合查询（UNION JOIN）例句，还没有找到能执行的SQL环境。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O UNION JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br><strong>语句12：语句11在DB2下的等价实现。还不知道DB2是否支持语句11呢！</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O FULL OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>EXCEPT<br>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O INNER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br><strong>语句13：语句11在Oracle下的等价实现。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O FULL OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>MINUS<br>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O INNER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br><strong>查询结果如下：</strong></p><p><strong>五、自然连接（NATURAL INNER JOIN）：</strong>说真的，这种连接查询没有存在的价值，既然是SQL2标准中定义的，就给出个例子看看吧。自然连接无需指定连接列，SQL会检查两个表中是否相同名称的列，且假设他们在连接条件中使用，并且在连接条件中仅包含一个连接列。不允许使用ON语句，不允许指定显示列，显示列只能用<em>表示（ORACLE环境下测试的）。对于每种连接类型（除了交叉连接外），均可指定NATURAL。下面给出几个例子。<br><strong>语句14：</strong>SELECT </em><br>FROM ORDERS O NATURAL INNER JOIN CUSTOMERS C;</p><p><strong>语句15：</strong>SELECT *<br>FROM ORDERS O NATURAL LEFT OUTER JOIN CUSTOMERS C;</p><p><strong>语句16：</strong>SELECT *<br>FROM ORDERS O NATURAL RIGHT OUTER JOIN CUSTOMERS C;</p><p><strong>语句17：</strong>SELECT *<br>FROM ORDERS O NATURAL FULL OUTER JOIN CUSTOMERS C;</p><p><strong>六、SQL查询的基本原理：两种情况介绍。第一、</strong>单表查询：根据WHERE条件过滤表中的记录，形成中间表（这个中间表对用户是不可见的）；然后根据SELECT的选择列选择相应的列进行返回最终结果。<br><strong>第二、</strong>两表连接查询：对两表求积（笛卡尔积）并用ON条件和连接连接类型进行过滤形成中间表；然后根据WHERE条件过滤中间表的记录，并根据SELECT指定的列返回查询结果。<br><strong>第三、</strong>多表连接查询：先对第一个和第二个表按照两表连接做查询，然后用查询结果和第三个表做连接查询，以此类推，直到所有的表都连接上为止，最终形成一个中间的结果表，然后根据WHERE条件过滤中间表的记录，并根据SELECT指定的列返回查询结果。<br>理解SQL查询的过程是进行SQL优化的理论依据。</p><p><strong>七、ON后面的条件（ON条件）和WHERE条件的区别：</strong>ON条件：是过滤两个链接表笛卡尔积形成中间表的约束条件。<br>WHERE条件：在有ON条件的SELECT语句中是过滤中间表的约束条件。在没有ON的单表查询中，是限制物理表或者中间查询结果返回记录的约束。在两表或多表连接中是限制连接形成最终中间表的返回结果的约束。<br>从这里可以看出，将WHERE条件移入ON后面是不恰当的。推荐的做法是：<br>ON只进行连接操作，WHERE只过滤中间表的记录。</p><p><strong>八、总结</strong>连接查询是SQL查询的核心，连接查询的连接类型选择依据实际需求。如果选择不当，非但不能提高查询效率，反而会带来一些逻辑错误或者性能低下。下面总结一下两表连接查询选择方式的依据：<br>1、 查两表关联列相等的数据用内连接。<br>2、 Col_L是Col_R的子集时用右外连接。<br>3、 Col_R是Col_L的子集时用左外连接。<br>4、 Col_R和Col_L彼此有交集但彼此互不为子集时候用全外。<br>5、 求差操作的时候用联合查询。<br>多个表查询的时候，这些不同的连接类型可以写到一块。例如：<br>SELECT T1.C1,T2.CX,T3.CY<br>FROM TAB1 T1<br>​       INNER JOIN TAB2 T2 ON (T1.C1=T2.C2)<br>​       INNER JOIN TAB3 T3 ON (T1.C1=T2.C3)<br>​       LEFT OUTER JOIN TAB4 ON(T2.C2=T3.C3);<br>WHERE T1.X &gt;T3.Y;<br>上面这个SQL查询是多表连接的一个示范。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Oracle第二天&quot;&gt;&lt;a href=&quot;#Oracle第二天&quot; class=&quot;headerlink&quot; title=&quot;Oracle第二天&quot;&gt;&lt;/a&gt;Oracle第二天&lt;/h2&gt;&lt;h3 id=&quot;sql原则&quot;&gt;&lt;a href=&quot;#sql原则&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.top.com/2017/11/26/oracle01/"/>
    <id>http://www.top.com/2017/11/26/oracle01/</id>
    <published>2017-11-26T06:20:45.407Z</published>
    <updated>2017-11-21T14:11:07.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oracle第一天"><a href="#Oracle第一天" class="headerlink" title="Oracle第一天"></a>Oracle第一天</h2><p>速运快递  18  15   3 实战</p><p>​      crm       oracle  maven</p><p>oracle  1       2      3    4    </p><p>sqlplus   system/system</p><p>sqlplus  system/system@192.168.227.10:1521/orcl</p><h3 id="Oracle应用开发实战"><a href="#Oracle应用开发实战" class="headerlink" title="Oracle应用开发实战"></a>Oracle应用开发实战</h3><h4 id="Oracle基本概念以及安装"><a href="#Oracle基本概念以及安装" class="headerlink" title="Oracle基本概念以及安装"></a>Oracle基本概念以及安装</h4><h5 id="Oracle简介"><a href="#Oracle简介" class="headerlink" title="Oracle简介"></a>Oracle简介</h5><h5 id="Oracle10g的安装"><a href="#Oracle10g的安装" class="headerlink" title="Oracle10g的安装"></a>Oracle10g的安装</h5><h5 id="虚拟网卡的设置"><a href="#虚拟网卡的设置" class="headerlink" title="虚拟网卡的设置"></a>虚拟网卡的设置</h5><p> sqlplus system/system 本机</p><p>1<img src="img/snipaste_20171016_114824.png" alt="snipaste_20171016_114824"></p><p>DML  数据库操作语言 insert  delete update</p><p>DQL  数据库查询语言  select  </p><p>DDL  数据库定义语言  create drop</p><p>DCL      数据库控制语言 </p><h4 id="PLSQL-Developer客户端工具的安装"><a href="#PLSQL-Developer客户端工具的安装" class="headerlink" title="PLSQL Developer客户端工具的安装"></a>PLSQL Developer客户端工具的安装</h4><h5 id="中文乱码问题解决"><a href="#中文乱码问题解决" class="headerlink" title="中文乱码问题解决"></a>中文乱码问题解决</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.查看服务器端编码</span><br><span class="line">select userenv(&apos;language&apos;) from dual;</span><br><span class="line">我实际查到的结果为:AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line">2.执行语句 select * from V$NLS_PARAMETERS </span><br><span class="line">查看第一行中PARAMETER项中为NLS_LANGUAGE 对应的VALUE项中是否和第一步得到的值一样。</span><br><span class="line">如果不是，需要设置环境变量.</span><br><span class="line">否则PLSQL客户端使用的编码和服务器端编码不一致,插入中文时就会出现乱码.</span><br><span class="line">3.设置环境变量</span><br><span class="line">计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建</span><br><span class="line">设置变量名:NLS_LANG,变量值:第1步查到的值, 我的是 AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line">4.重新启动PLSQL,插入数据正常</span><br></pre></td></tr></table></figure><h3 id="Oracle数据库的体系结构"><a href="#Oracle数据库的体系结构" class="headerlink" title="Oracle数据库的体系结构"></a>Oracle数据库的体系结构</h3><h4 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库: database"></a>数据库: database</h4><p>Oracle数据库  一个操作系统只有一个库    名字 orcl</p><h4 id="实例-Instrance"><a href="#实例-Instrance" class="headerlink" title="实例 Instrance"></a>实例 Instrance</h4><p>  一个Oracle实例(Oracle instrance)由一系列的后台进程(Background Process)和内存结构(Memory  Structures)组成  .一个数据库可以有n个实例</p><h4 id="数据文件-dbf"><a href="#数据文件-dbf" class="headerlink" title="数据文件(dbf):"></a>数据文件(dbf):</h4><p>数据库中的数据是存储在表空间的,一个表空间有一个或者多个数据文件组成,一个数据文件只能对应一个表空间. 如果要删除某个数据文件,只能删除其所属的表空间了.</p><h4 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h4><p>表空间就是数据文件的逻辑映射,一个数据文件只能属于一个表空间    </p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>   用户实在实例下建立的,用来操作表空间的</p><p>—-System</p><p>—- Scott</p><p>select * from scott.emp</p><p> 用scoot用户登录   默认密码是tiger</p><p>使用sql重置scott密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user scott identified by tiger;</span><br></pre></td></tr></table></figure><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><h4 id="1-简单查询"><a href="#1-简单查询" class="headerlink" title="1.简单查询"></a>1.简单查询</h4><h5 id="1-简单查询-1"><a href="#1-简单查询-1" class="headerlink" title="1.简单查询"></a>1.简单查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from  dept;</span><br></pre></td></tr></table></figure><h5 id="2-别名的使用"><a href="#2-别名的使用" class="headerlink" title="2.别名的使用"></a>2.别名的使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select empno as &quot;员工编号&quot; from emp;</span><br><span class="line"></span><br><span class="line">select empno as &quot;员工编号&quot; ,ename as 员工姓名 , job &quot;职位&quot;,mgr 领导  from emp ;</span><br></pre></td></tr></table></figure><h4 id="2-四则运算"><a href="#2-四则运算" class="headerlink" title="2.四则运算"></a>2.四则运算</h4><p>​    +     -     *    /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select sal , sal*12 from emp;</span><br><span class="line">select 1+1;   -- mysql  2    oracle  报错,确实from关键字</span><br><span class="line">select 1+1 from dept;   -- 查询结果为多列数据 </span><br><span class="line">-- dual  伪表 --</span><br><span class="line">select 1+1  from  dual;   --   目的就是为了配置查询语句 --</span><br></pre></td></tr></table></figure><h4 id="3-连接符"><a href="#3-连接符" class="headerlink" title="3.连接符"></a>3.连接符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;员工编号是XXX，姓名是XXX，职位是XXX&quot;</span><br><span class="line">select  empno ,ename , job from emp;</span><br><span class="line">select &apos;员工编号是XXX&apos; || &apos;姓名是XXX&apos; || &apos;职位是XXX&apos; from dual;</span><br><span class="line">--  把xxx替换   用来连接符 || 来代替</span><br><span class="line">select &apos;员工编号是&apos;||empno||&apos;姓名是&apos;||ename||&apos;职位是&apos;||job  from emp;</span><br></pre></td></tr></table></figure><h4 id="4-去重-distinct"><a href="#4-去重-distinct" class="headerlink" title="4.去重 distinct"></a>4.去重 distinct</h4><p>​     在条件上加上个  where后 distinct </p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="条件查询where"><a href="#条件查询where" class="headerlink" title="条件查询where"></a>条件查询where</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--1、查询工资大于1500并且小于3000的员工</span><br><span class="line">select * from emp where  sal&gt;1500 and sal&lt;3000</span><br><span class="line">--2、between ..and   包含临界值</span><br><span class="line">select * from emp where  sal&gt;=1500 and sal&lt;=3000;</span><br><span class="line">select * from emp where  sal between 1500 and  3000;</span><br><span class="line">--  等于</span><br><span class="line">select * from emp where  sal  = 2450.00;</span><br><span class="line">select * from emp where  sal  in (2450.00,2850.00);</span><br><span class="line">--3、null 不是空字符串也不是0，是未知类型的数据并且 null和null不相等</span><br><span class="line">--查询奖金为空的员工</span><br><span class="line">-- 包含null的表达式都是空值  空值永远不等于空值</span><br><span class="line">select * from emp where comm is null;</span><br><span class="line">--查询奖金不为空的员工</span><br><span class="line">select * from emp where comm is  not  null;</span><br><span class="line">--4、not</span><br><span class="line">--查询工资不大于1500</span><br><span class="line">select * from emp where not(sal&gt;1500);</span><br><span class="line">--5、 in</span><br><span class="line">--查询员工编号是7788,7369,7566</span><br><span class="line">select * from emp where empno in(7788,7369,7566);</span><br><span class="line">--查询员工姓名是  SMITH  JONES  SCOTT</span><br><span class="line">select * from emp where ename in(&apos;SMITH&apos;,  &apos;JONES&apos;,  &apos;SCOTT&apos;);</span><br><span class="line">-- 查询一个时  相当于等于</span><br></pre></td></tr></table></figure><h4 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h4><p><strong>==注意：Oracle中是大小写敏感==</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select * from emp  where ename like &apos;_M%&apos;  --查询员工姓名中第二个字母是M的</span><br><span class="line">select * from emp  where ename like &apos;%M%&apos;  --查询员工姓名中包含字母是M的</span><br><span class="line">-- &quot;_&quot; 通配   &quot;%&quot; 多个</span><br><span class="line">-- 查询员工姓名中带_的</span><br><span class="line">-查询员工姓名中带_的</span><br><span class="line">select * from emp  where ename like &apos;%1_%&apos; escape &apos;1&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%a_%&apos; escape &apos;a&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%#_%&apos; escape &apos;#&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%@_%&apos; escape &apos;@&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%__%&apos; escape &apos;_&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%$_%&apos; escape &apos;$&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%|_%&apos; escape &apos;|&apos;;</span><br><span class="line"></span><br><span class="line">--错误的</span><br><span class="line">select * from emp  where ename like &apos;%||_%&apos; escape &apos;||&apos;;</span><br><span class="line">select * from emp  where ename like &apos;%12_%&apos; escape &apos;12&apos;;</span><br><span class="line">select * from emp  where ename like &apos;%&amp;_%&apos; escape &apos;&amp;&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%%_%&apos; escape &apos;%&apos;;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- order by    desc   asc</span><br><span class="line">-- 按照奖金从高到低排序</span><br><span class="line">select * from emp order by comm desc nulls last</span><br><span class="line"> -- 按照奖金从低到高排序</span><br><span class="line">select * from emp order by comm  nulls first</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h4><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> -- lower--转小写</span><br><span class="line"> select lower(&apos;ORACLE&apos;) from dual;</span><br><span class="line"> select ename,lower(ename) from emp;</span><br><span class="line"> </span><br><span class="line"> -- upper--转大小</span><br><span class="line"> select ename,upper(ename) from emp;</span><br><span class="line"></span><br><span class="line">-- initcap--首字母大写</span><br><span class="line"> select ename,initcap(ename) from emp;</span><br><span class="line"></span><br><span class="line">-- substr--截取</span><br><span class="line"> -- oracle截取时起始位置写0和1是一样的</span><br><span class="line"> select substr(&apos;qwertyui&apos;,0,4) from dual;--qwer</span><br><span class="line"> select substr(&apos;qwertyui&apos;,1,4) from dual;--qwer</span><br><span class="line"> select substr(&apos;qwertyui&apos;,2,4) from dual;--wert</span><br><span class="line"> </span><br><span class="line"> -- length--长度</span><br><span class="line"> select length(&apos;qwertyui&apos;) from dual;--8</span><br><span class="line"> </span><br><span class="line"> --replace--替换</span><br><span class="line"> select replace(&apos;qwertyui&apos;,&apos;qw&apos;,&apos;aa&apos;) from dual;-- aaertyui</span><br><span class="line"> </span><br><span class="line"> -- concat--连接两个字符串函数  推荐使用||</span><br><span class="line"> select concat(&apos;aaa&apos; ,&apos;bbb&apos;) from dual;</span><br><span class="line"> select concat(concat(concat(&apos;aaa&apos; ,&apos;bbb&apos;),&apos;ccc&apos; ),&apos;ddd&apos;)  from dual;</span><br></pre></td></tr></table></figure><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">数值函数</span><br><span class="line">round--四舍五入</span><br><span class="line">select round(12.456) from dual; --12</span><br><span class="line">select round(12.656) from dual; --13</span><br><span class="line">select round(12.456,2) from dual;--12.46</span><br><span class="line">select round(12.456,-1) from dual;--10</span><br><span class="line">select round(16.456,-1) from dual;--20</span><br><span class="line"></span><br><span class="line">-- trunc--截断   TRUNC()函数截取时不进行四舍五入   </span><br><span class="line">select trunc(12.456) from dual; --12</span><br><span class="line">select trunc(12.956) from dual; --12</span><br><span class="line">select trunc(12.456,2) from dual;--12.45</span><br><span class="line">select trunc(12.456,-1) from dual;--10</span><br><span class="line">select trunc(16.456,-1) from dual;--10  </span><br><span class="line"></span><br><span class="line">--mod--取余</span><br><span class="line">select mod(10,3) from dual;--1</span><br><span class="line">select mod(10,2) from dual;--0</span><br></pre></td></tr></table></figure><h5 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select sysdate from dual;</span><br><span class="line"></span><br><span class="line">--获取员工入职的天数</span><br><span class="line">select ename,hiredate,sysdate-hiredate from emp;</span><br><span class="line"></span><br><span class="line">--获取员工入职的周数</span><br><span class="line">select ename,hiredate,round((sysdate-hiredate)/7)  from emp;</span><br><span class="line">select  ename,hiredate,round((sysdate-hiredate)/7) from emp</span><br><span class="line"></span><br><span class="line">-- 获取员工入职的月数  </span><br><span class="line">-- months_between--两个日期的月数差</span><br><span class="line">select  ename,hiredate,months_between(sysdate,hiredate),(sysdate-hiredate)/30 from emp;</span><br><span class="line"></span><br><span class="line">-- add_months--添加月</span><br><span class="line">select  sysdate  from dual;</span><br><span class="line">select add_months(sysdate,1) from dual;</span><br><span class="line"></span><br><span class="line">-- oracle将毫秒装换为当前时间</span><br><span class="line">SELECT TO_CHAR(1511272758348/(1000 * 60 * 60 * 24) + TO_DATE(&apos;1970-01-01 08:00:00&apos;, &apos;YYYY-MM-DD HH:MI:SS&apos;), &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS CDATE      </span><br><span class="line"> FROM DUAL;</span><br></pre></td></tr></table></figure><h5 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 转换函数</span><br><span class="line">-- to_char</span><br><span class="line">select 12,to_char(12) from dual;</span><br><span class="line"></span><br><span class="line">-- to_number</span><br><span class="line">select 12,to_number(&apos;12&apos;) from dual;</span><br><span class="line"></span><br><span class="line">select empno as &quot;员工编号&quot; ,ename as 员工姓名 , job &quot;职位&quot;,mgr 领导  from emp ;</span><br><span class="line"></span><br><span class="line">-- to_date  字符串转成日期</span><br><span class="line">select to_date(&apos;2016-01-31&apos;,&apos;yyyy-MM-dd&apos;)  from dual;</span><br><span class="line"></span><br><span class="line">select add_months(to_date(&apos;2016-01-31&apos;,&apos;yyyy-MM-dd&apos;),2) from dual;</span><br><span class="line">-- 结果一样</span><br><span class="line">select * from emp where hiredate = to_date(&apos;1981-02-20&apos;,&apos;yyyy-MM-dd&apos;);</span><br><span class="line">select * from emp where hiredate = to_date(&apos;1981/02/20&apos;,&apos;yyyy/MM/dd&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 日期转为字符串</span><br><span class="line">-- to_char</span><br><span class="line">select * from emp where to_char(hiredate,&apos;yyyy/MM/dd&apos;)= &apos;1981/02/20&apos;;</span><br><span class="line">select to_char(sysdate,&apos;yyyy-mm-dd hh24:mi:ss&apos;) from dual;</span><br><span class="line">select to_char(sysdate,&apos;yyyy&apos;),to_char(sysdate,&apos;mm&apos;),to_char(sysdate,&apos;dd&apos;),to_char(sysdate,&apos;day&apos;) from dual</span><br><span class="line">-- 今年是xxx,xxx月,xxx号,第xxx天,第xxx周</span><br><span class="line">select &apos;今天是xxx年&apos;,&apos;xxx月&apos;,&apos;xxx号&apos;,&apos;今年第xxx天&apos;,&apos;第xxx周&apos;  from dual;</span><br><span class="line">select &apos;今天是&apos; || to_char(sysdate,&apos;yyyy&apos;)  ||  to_char(sysdate,&apos;mm&apos;) || &apos;月&apos;  from dual;</span><br></pre></td></tr></table></figure><h5 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- nvl  当comm为null时参与运算时为0</span><br><span class="line">员工年薪   null参与运算结果恒为null</span><br><span class="line">select ename,sal,comm,sal*12+nvl(comm,0) from emp;</span><br><span class="line">CLERK--职员</span><br><span class="line">SALESMAN--销售员</span><br><span class="line">---MANAGER--经理</span><br><span class="line">--ANALYST--分析师</span><br><span class="line">--PRESIDENT--总裁</span><br><span class="line">decode  --是Oracle独有的</span><br><span class="line">decode(列名,&apos;表中的数据&apos;,&apos;显示的值&apos;,&apos;表中的数据&apos;,&apos;显示的值&apos;,&apos;表中的数据&apos;,&apos;显示的值&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select ename,job  from emp;</span><br><span class="line">select ename,job ,</span><br><span class="line">decode(job,</span><br><span class="line">&apos;CLERK&apos;,&apos;职员&apos;,</span><br><span class="line">&apos;SALESMAN&apos;,&apos;销售员&apos;,</span><br><span class="line">&apos;其他&apos;</span><br><span class="line">) from emp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--条件表达式  </span><br><span class="line">--任何关系型数据库都支持</span><br><span class="line">case 列名  when 值  then 显示的值   end</span><br><span class="line"></span><br><span class="line">select ename,job ,</span><br><span class="line">   case job </span><br><span class="line">   when &apos;CLERK&apos; then &apos;职员&apos;</span><br><span class="line">   when &apos;SALESMAN&apos; then &apos;销售员&apos;</span><br><span class="line">   else &apos;其他&apos;</span><br><span class="line">    end </span><br><span class="line"> from emp</span><br></pre></td></tr></table></figure><h4 id="多行行函数"><a href="#多行行函数" class="headerlink" title="多行行函数"></a>多行行函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 多行函数  聚合函数  组函数</span><br><span class="line">-- sum  avg  count max min</span><br><span class="line">select avg(sal) from emp;</span><br><span class="line"></span><br><span class="line">select max(sal)- min(sal) from emp;</span><br><span class="line"></span><br><span class="line">select count(*) from emp;</span><br><span class="line"></span><br><span class="line">select sum(sal) from emp;</span><br><span class="line"> </span><br><span class="line">-- 分组</span><br><span class="line">group by</span><br><span class="line">--查询每个部门的平均工资</span><br><span class="line">select deptno,max(sal) from emp group by deptno;</span><br><span class="line"></span><br><span class="line">select deptno,avg(sal) from emp group by deptno;</span><br><span class="line"></span><br><span class="line">--查询部门的平均工资大于2000的部门</span><br><span class="line">select deptno,avg(sal) from emp group by deptno;</span><br><span class="line">having avg(sal)&gt;2000 </span><br><span class="line"></span><br><span class="line">--where 和having的区别</span><br><span class="line">--where过滤的是表中的物理列（表中存在的列）</span><br><span class="line">--where出现在group by前面  having出现在group by的后面</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">1. 查询工资大于12000的员工姓名和工资</span><br><span class="line"></span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select  first_name|| &apos; &apos;||last_name ,salary from  employees where salary&gt;12000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 查询员工号为176的员工的姓名和部门号</span><br><span class="line">select first_name|| &apos; &apos;||last_name,department_id  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 选择工资不在5000到12000的员工的姓名和工资</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,salary as &quot;工资&quot;  from employees where salary&lt;5000 or salary&gt;12000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 选择雇用时间在1998-02-01到1998-05-01之间的员工姓名，job_id和雇用时间</span><br><span class="line">select job_id as id ,first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,round((sysdate - hire_date)) as &quot;天&quot;   from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 选择在20或50号部门工作的员工姓名和部门号</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;, department_id as &quot;部门编号&quot; from  employees where  department_id in(20,50) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. 选择在1994年雇用的员工的姓名和雇用时间</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,round((sysdate - hire_date)) as &quot;天&quot;  from employees where  </span><br><span class="line">to_char(hire_date,&apos;yyyy&apos;) = &apos;1994&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7. 选择公司中没有管理者的员工姓名及job_id </span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;, job_id as &quot;ID&quot;,manager_id  from employees  where manager_id is null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8. 选择公司中有奖金的员工姓名，工资和奖金级别</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,salary as &quot;工资&quot; ,commission_pct as &quot;奖金级别&quot;  from employees</span><br><span class="line"> where commission_pct is not null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 选择员工姓名的第三个字母是a的员工姓名</span><br><span class="line"></span><br><span class="line">select first_name  from employees  where first_name like  &apos;__a%&apos; ;</span><br><span class="line"></span><br><span class="line">10. 选择姓名中有字母a和e的员工姓名</span><br><span class="line">select first_name from employees where  first_name  like  &apos;%a%&apos; and  first_name  like &apos;%e%&apos;;</span><br><span class="line"> </span><br><span class="line">select first_name|| &apos; &apos;||last_name from employees  where   first_name|| &apos; &apos;||last_name  like  &apos;%a%&apos; and  </span><br><span class="line">  first_name|| &apos; &apos;||last_name  like &apos;%e%&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11. 显示系统时间</span><br><span class="line">select sysdate from dual;</span><br><span class="line"></span><br><span class="line">12. 查询员工号，姓名，工资，以及工资提高百分之20%后的结果（new salary）</span><br><span class="line">select  employee_id,first_name|| &apos; &apos;||last_name 姓名,salary  工资, salary*1.2  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13. 将员工的姓名按首字母排序，并写出姓名的长度（length）</span><br><span class="line">select  first_name|| &apos; &apos;||last_name 姓名 ,length(first_name|| &apos; &apos;||last_name ) from employees </span><br><span class="line">order by  first_name|| &apos; &apos;||last_name  asc;</span><br><span class="line"></span><br><span class="line">14. 查询各员工的姓名，并显示出各员工在公司工作的月份数</span><br><span class="line">select  first_name|| &apos; &apos;||last_name 姓名,months_between(sysdate,hire_date) &quot;工作的月份数&quot;  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15. 查询员工的姓名，以及在公司工作的月份数（worked_month），并按月份数降序排列</span><br><span class="line">select  first_name|| &apos; &apos;||last_name 姓名 ,months_between(sysdate,hire_date) &quot;工作的月份数&quot;  from employees</span><br><span class="line"> order by months_between(sysdate,hire_date) desc;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Oracle第一天&quot;&gt;&lt;a href=&quot;#Oracle第一天&quot; class=&quot;headerlink&quot; title=&quot;Oracle第一天&quot;&gt;&lt;/a&gt;Oracle第一天&lt;/h2&gt;&lt;p&gt;速运快递  18  15   3 实战&lt;/p&gt;
&lt;p&gt;​      crm     
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.top.com/2017/11/26/oracle04/"/>
    <id>http://www.top.com/2017/11/26/oracle04/</id>
    <published>2017-11-26T06:20:45.398Z</published>
    <updated>2017-10-21T13:59:10.774Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle第四天"><a href="#Oracle第四天" class="headerlink" title="Oracle第四天"></a>Oracle第四天</h3><h4 id="PL-SQL编程语言"><a href="#PL-SQL编程语言" class="headerlink" title="PL/SQL编程语言"></a>PL/SQL编程语言</h4><h5 id="什么是pl-sql语言"><a href="#什么是pl-sql语言" class="headerlink" title="什么是pl/sql语言"></a>什么是pl/sql语言</h5><p>​    PLSQL是Oracle对sql语言的过程化扩展,指在sql命令语言中增加了过程处理语句(如分支,循环等),使</p><p>sql语言具有过程处理能力. 面向过程</p><h5 id="PL-SQL的语法"><a href="#PL-SQL的语法" class="headerlink" title="PL/SQL的语法"></a>PL/SQL的语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[declare]</span><br><span class="line">--声明   变量（普通变量、引用型变量、记录型变量） 常量  异常  游标</span><br><span class="line">begin </span><br><span class="line">-- 语句序列 (DML语句)</span><br><span class="line">[exception]</span><br><span class="line">-- 捕获异常</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h5 id="常量和变量的定义"><a href="#常量和变量的定义" class="headerlink" title="常量和变量的定义"></a>常量和变量的定义</h5><p>在sql中用 into来赋值</p><p>说明变量(char,varchar2,date,number,boolean,long)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    v_name varchar2(30) := &apos;Tom&apos; ;  --  := 相当于java中的 =, = 相当于java中的== </span><br><span class="line">    v_age number(9) :=1 ; </span><br><span class="line">    v_gender constant number(1) := 1;  -- 常量</span><br><span class="line">    v_sal emp.sal%type := 1000;    -- 引用型  </span><br><span class="line">    v_row  emp%rowtype ;   -- 记录型   一行数据</span><br><span class="line">begin </span><br><span class="line">    v_name:=&apos;JERRY&apos;; </span><br><span class="line">    --v_gender:=&apos;0&apos;;   -- 常量不可改变 报错</span><br><span class="line"></span><br><span class="line">     select ename,sal into v_name,v_sal from emp where empno=7369;</span><br><span class="line">     select * into v_row from emp where empno=7369;</span><br><span class="line">   --dbms_output.put_line(v_name||&apos;--&apos;||v_sal||&apos;——&apos;||v_gender);</span><br><span class="line">     dbms_output.put_line(v_row.ename||&apos;--&apos;||v_row.sal||&apos;——&apos;||v_row.job);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h5><p>语法一：<br>​    if  条件  then<br>          逻辑处理<br>​    end if;</p><p>语法二：<br>​    if 条件 then<br>          逻辑处理<br>     else<br>​         逻辑处理<br>​    end if;</p><p>语法三：<br>​    if 条件 then<br>          逻辑处理<br>​    elsif 条件<br>          逻辑处理<br>​         …….   </p><p>​     else<br>         逻辑处理<br>​    end if;  </p><p>if语句 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- 输出我是1</span><br><span class="line">declare </span><br><span class="line">   pnum number := &amp;num;</span><br><span class="line">begin</span><br><span class="line">   if pnum = 1 then </span><br><span class="line">  dbms_output.put_line(&apos;我是1&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 条件判断</span><br><span class="line">declare </span><br><span class="line">  mynum number := &amp;num;</span><br><span class="line">begin</span><br><span class="line">  if  mynum = 1 then </span><br><span class="line">   dbms_output.put_line(&apos;我是1&apos;);</span><br><span class="line">  else</span><br><span class="line">   dbms_output.put_line(&apos;我不是1&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 未成年人,成年人,老年人</span><br><span class="line">declare </span><br><span class="line">   age number(3) :=&amp;nums;   --  &amp;表示指向一个地址,弹出一个输入框</span><br><span class="line">begin </span><br><span class="line">  if age &lt; 18 then</span><br><span class="line">   dbms_output.put_line(&apos;未成年&apos;);</span><br><span class="line">  elsif age &gt;= 18 and  age &lt;= 60 then</span><br><span class="line">    dbms_output.put_line(&apos;中年人&apos;);</span><br><span class="line">  else</span><br><span class="line">    dbms_output.put_line(&apos;老人&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><h6 id="1-语法1-无条件循环-有条件退出"><a href="#1-语法1-无条件循环-有条件退出" class="headerlink" title="1.语法1:无条件循环,有条件退出"></a>1.语法1:无条件循环,有条件退出</h6><p>​    loop </p><p>​    end  loop;</p><h6 id="2-语法2-条件循环while"><a href="#2-语法2-条件循环while" class="headerlink" title="2.语法2 :条件循环while"></a>2.语法2 :条件循环while</h6><p>​    while 条件<br>           loop<br>​<br>​             end loop;</p><h6 id="3-语法3-条件循环for"><a href="#3-语法3-条件循环for" class="headerlink" title="3.语法3:条件循环for"></a>3.语法3:条件循环for</h6><p>for 变量名 in 起始值..终止值<br>   loop</p><p>   end loop;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-- 语法1:无条件循环,有条件退出</span><br><span class="line">--输出1到100个数</span><br><span class="line">declare </span><br><span class="line">   v_num number(9) := 1;</span><br><span class="line">begin</span><br><span class="line">   loop </span><br><span class="line">     --if v_num &gt; 100 then</span><br><span class="line">     --  exit;</span><br><span class="line">     --end if;</span><br><span class="line">     exit when v_num &gt;100;</span><br><span class="line">       dbms_output.put_line(v_num);</span><br><span class="line">       v_num :=v_num +1 ;  -- 不支持 ++  -- </span><br><span class="line">   end loop;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">语法2 :有条件循环 条件循环while</span><br><span class="line">-- 输出1到100个数</span><br><span class="line">declare</span><br><span class="line">  v_num number(9) := 1;</span><br><span class="line">begin</span><br><span class="line">  while v_num &lt;= 100</span><br><span class="line">  loop</span><br><span class="line">     dbms_output.put_line(v_num);</span><br><span class="line">     v_num :=v_num +1 ;</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法3:  条件循环for</span><br><span class="line">declare</span><br><span class="line">  v_num number(9) := 1;</span><br><span class="line">begin</span><br><span class="line">  for v_num in 1..100</span><br><span class="line">  loop</span><br><span class="line">     dbms_output.put_line(v_num);</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="异常-exception"><a href="#异常-exception" class="headerlink" title="异常 exception"></a>异常 exception</h5><p>异常的作用: 为了提高语言的容错性和健壮性</p><p>no_data_found 没有找到数据</p><p>too_many_rows  select….into语句匹配多个行</p><p>zero_divide  除数为0</p><p>value_error 算术或转换错误</p><p>timeout_on_resourse 在等待资源时发生超时__</p><p><strong>命名的系统异常</strong> </p><table><thead><tr><th><strong>命名的系统异常</strong></th><th><strong>产生原因</strong></th></tr></thead><tbody><tr><td>ACCESS_INTO_NULL</td><td>未定义对象</td></tr><tr><td>CASE_NOT_FOUND</td><td>CASE 中若未包含相应的 WHEN ，并且没有设置 ELSE 时</td></tr><tr><td>COLLECTION_IS_NULL</td><td>集合元素未初始化</td></tr><tr><td>CURSER_ALREADY_OPEN</td><td>游标已经打开</td></tr><tr><td>DUP_VAL_ON_INDEX</td><td>唯一索引对应的列上有重复的值</td></tr><tr><td>INVALID_CURSOR</td><td>在不合法的游标上进行操作</td></tr><tr><td>INVALID_NUMBER</td><td>内嵌的 SQL 语句不能将字符转换为数字</td></tr><tr><td><strong>NO_DATA_FOUND</strong></td><td>使用 select into 未返回行，或应用索引表未初始化的元素时</td></tr><tr><td><strong>TOO_MANY_ROWS</strong></td><td>执行 select into 时，结果集超过一行</td></tr><tr><td><strong>ZERO_DIVIDE</strong></td><td>除数为 0</td></tr><tr><td>SUBSCRIPT_BEYOND_COUNT</td><td>元素下标超过嵌套表或 VARRAY 的最大值</td></tr><tr><td>SUBSCRIPT_OUTSIDE_LIMIT</td><td>使用嵌套表或 VARRAY 时，将下标指定为负数</td></tr><tr><td><strong>VALUE_ERROR</strong></td><td>赋值时，变量长度不足以容纳实际数据</td></tr><tr><td>LOGIN_DENIED</td><td>PL/SQL 应用程序连接到 oracle 数据库时，提供了不正确的用户名或密码</td></tr><tr><td>NOT_LOGGED_ON</td><td>PL/SQL 应用程序在没有连接 oralce 数据库的情况下访问数据</td></tr><tr><td>PROGRAM_ERROR</td><td>PL/SQL 内部问题，可能需要重装数据字典＆ pl./SQL 系统包</td></tr><tr><td>ROWTYPE_MISMATCH</td><td>宿主游标变量与 PL/SQL 游标变量的返回类型不兼容</td></tr><tr><td>SELF_IS_NULL</td><td>使用对象类型时，在 null 对象上调用对象方法</td></tr><tr><td>STORAGE_ERROR</td><td>运行 PL/SQL 时，超出内存空间</td></tr><tr><td>SYS_INVALID_ID</td><td>无效的 ROWID 字符串</td></tr><tr><td>TIMEOUT_ON_RESOURCE</td><td>Oracle 在等待资源时超时</td></tr></tbody></table><h6 id="预定义-异常"><a href="#预定义-异常" class="headerlink" title="预定义 异常"></a>预定义 异常</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">--预定义异常</span><br><span class="line">-- 案列 1:</span><br><span class="line">declare</span><br><span class="line"> v_num number(5);</span><br><span class="line">begin</span><br><span class="line">    --v_num:=10/0;  </span><br><span class="line">    v_num:=1000000;  </span><br><span class="line">   exception</span><br><span class="line">     --VALUE_ERROR</span><br><span class="line">     --ZERO_DIVIDE</span><br><span class="line">     when  others then</span><br><span class="line">     v_num:=0;  </span><br><span class="line">     dbms_output.put_line(v_num);   </span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案列 2:</span><br><span class="line">declare</span><br><span class="line"> v_num number;</span><br><span class="line">begin</span><br><span class="line">    v_num:=1/0;</span><br><span class="line">   exception</span><br><span class="line">     when ZERO_DIVIDE  then</span><br><span class="line">        dbms_output.put_line(&quot;除0异常!!&quot;); </span><br><span class="line">     when VALUE_ERROR  then  </span><br><span class="line">          dbms_output.put_line(&quot;数值转换错误!!&quot;); </span><br><span class="line">     when others  then</span><br><span class="line">        dbms_output.put_line(&quot;其他错误!!&quot;); </span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h6 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--自定义异常</span><br><span class="line"></span><br><span class="line">-- 输入一个年龄数据,大于150就抛出异常</span><br><span class="line">declare </span><br><span class="line">   v_age number(10) := &amp;nums;</span><br><span class="line">   exc_age exception;</span><br><span class="line">begin</span><br><span class="line">  if v_age &gt; 150 then</span><br><span class="line">      raise exc_age ; </span><br><span class="line">  end if;  </span><br><span class="line">  exception</span><br><span class="line">    when exc_age then </span><br><span class="line">     ---p1 错误代码    p2 错误信息</span><br><span class="line">     raise_application_error(-20001,&apos;捕获了异常&apos;);</span><br><span class="line">     --v_age:=150;</span><br><span class="line">     -- dbms_output.put_line(&apos;捕获了异常，年龄重置成了150&apos;);    </span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="游标-光标Cursor"><a href="#游标-光标Cursor" class="headerlink" title="游标(光标Cursor)"></a>游标(光标Cursor)</h5><p>概念: 就是用来接收多条数据的</p><p><code>需求:按员工的工种涨工资,总裁涨1000,经理涨800,其他人400</code></p><p>游标的声明语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor 游标名   is    sql查询语句 ;</span><br><span class="line">cursor  c1  is  select  ename  from  emp;    -- 查询多条记录</span><br></pre></td></tr></table></figure><h6 id="使用游标的语法"><a href="#使用游标的语法" class="headerlink" title="使用游标的语法:"></a>使用游标的语法:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">open  游标名称</span><br><span class="line">loop</span><br><span class="line">exit when 游标名称%notfound;</span><br><span class="line">fetch 游标名称  into 记录型变量;</span><br><span class="line">逻辑处理</span><br><span class="line">end loop;</span><br><span class="line">close 游标名称;</span><br></pre></td></tr></table></figure><h6 id="范列"><a href="#范列" class="headerlink" title="范列"></a>范列</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">-- 范列1: 使用游标方式输出emp中的员工编号和姓名</span><br><span class="line">declare</span><br><span class="line"> cursor cursor_emp is select * from emp;</span><br><span class="line"> v_row emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">   open   cursor_emp;    -- 打开游标,执行查询</span><br><span class="line">   loop</span><br><span class="line">     fetch cursor_emp into v_row;     -- 记录型变量  接收一行数据</span><br><span class="line">     exit when cursor_emp%notfound;   -- 取一行到变量中</span><br><span class="line">     dbms_output.put_line(v_row.ename||&apos;---&apos;||v_row.job); </span><br><span class="line">   end loop;</span><br><span class="line">  close cursor_emp;  -- 关闭游标</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 范列2: 查询20号和40号部门的所有人的name和job</span><br><span class="line">--游标传参数 </span><br><span class="line">declare </span><br><span class="line"> cursor cursor_emp(d1 number ,d2 number) is select * from emp where deptno =d1 or  deptno =d2;</span><br><span class="line"> v_row emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">  open cursor_emp(20,30);</span><br><span class="line">  loop</span><br><span class="line">    fetch  cursor_emp into  v_row;</span><br><span class="line">    exit when cursor_emp%notfound ;</span><br><span class="line">    dbms_output.put_line(v_row.ename||&apos;*********&apos;||v_row.job);</span><br><span class="line">  end loop;</span><br><span class="line">  close cursor_emp;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">declare </span><br><span class="line"> cursor cursor_emp(d1 number ,d2 number) is select * from emp where deptno in (d1,d2);</span><br><span class="line"> v_row emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">  open cursor_emp(20,30);</span><br><span class="line">  loop</span><br><span class="line">    fetch  cursor_emp into  v_row;</span><br><span class="line">    exit when cursor_emp%notfound ;</span><br><span class="line">    dbms_output.put_line(v_row.ename||&apos;*********&apos;||v_row.job);</span><br><span class="line">  end loop;</span><br><span class="line">  close cursor_emp;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 范列3: 写一段PL/SQL程序,为部门号为10员工涨工资</span><br><span class="line">select * from emp where deptno = 10;</span><br><span class="line">declare </span><br><span class="line">   cursor cursor_emp(d1 emp.deptno%type)  is select empno from emp where deptno = d1;</span><br><span class="line">   v_row emp.empno%type;</span><br><span class="line">begin</span><br><span class="line">   open cursor_emp(10);  -- 开始查询</span><br><span class="line">   loop</span><br><span class="line">     fetch cursor_emp into v_row;</span><br><span class="line">     exit when cursor_emp%notfound;</span><br><span class="line">     update emp set sal = sal +100 where empno = v_row; </span><br><span class="line">   end loop;</span><br><span class="line">   close cursor_emp;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h5><p>​    存储过程(Stroed Procedure)是在大型数据库系统中,一组为了完成特定功能的sql语句集,经编译后,存储在数据库中,用户通过指定存储过程的名字并给出参数(如有参数)来执行它.存储过程是数据库中的一个重要对象,任何一个设计良好的数据库应用程序都应该用到存储过程.</p><p>简单说: 就是一段被命名化的plsql   <strong>预编译到数据库中</strong>  用户指定存储过程的名字并给出参数(如有参数)来执行它</p><h5 id="创建存储过程的语法"><a href="#创建存储过程的语法" class="headerlink" title="创建存储过程的语法:"></a>创建存储过程的语法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create [or replace]  procedure  存储过程名称([参数1 [in]/out 数据类型 ,[参数2 [in]/out 数据类型],...........)</span><br><span class="line">is|as -- 代替了declare 如果没有变量声明时不能省略</span><br><span class="line">begin</span><br><span class="line">   plsql子程序体</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="存储过程的使用"><a href="#存储过程的使用" class="headerlink" title="存储过程的使用"></a>存储过程的使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">--打印指定员工的年薪   </span><br><span class="line">-- 参数中的in 可以省略   out不能省略</span><br><span class="line">create or replace procedure pro_yealsal(empno1 number)</span><br><span class="line">is    -- 代替了declare</span><br><span class="line">  v_yearsal number(10,2);</span><br><span class="line">begin </span><br><span class="line">  select sal*12+nvl(comm,0) into v_yearsal from emp where empno =empno1;</span><br><span class="line">  dbms_output.put_line(&apos;年薪是：&apos;||v_yearsal);</span><br><span class="line">end;</span><br><span class="line">-- 调用方式1:</span><br><span class="line">call pro_yealsal(7369);</span><br><span class="line">-- 调用方式2:</span><br><span class="line">begin</span><br><span class="line">   pro_yealsal(7499);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 定义了  emp.empno%type  emp.sal%type</span><br><span class="line">create or replace procedure pro_yealsal(empno1  emp.empno%type)</span><br><span class="line">  is    -- 代替了declare</span><br><span class="line">    v_yearsal emp.sal%type;</span><br><span class="line">  begin </span><br><span class="line">    select sal*12+nvl(comm,0) into v_yearsal from emp where empno =empno1;</span><br><span class="line">    </span><br><span class="line">    dbms_output.put_line(&apos;年薪是：&apos;||v_yearsal);</span><br><span class="line">  end;</span><br><span class="line"> -- 调用方式1:</span><br><span class="line">  call pro_yealsal(7369);</span><br><span class="line">  -- 调用方式2:</span><br><span class="line">  begin</span><br><span class="line">     pro_yealsal(7499);</span><br><span class="line">  end;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">--使用out参数接收指定员工的年薪</span><br><span class="line">create or replace procedure pro_yealsal2(empno1 number,v_yearsal out number)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">  select sal*12+nvl(comm,0) into v_yearsal from emp where empno = empno1;       </span><br><span class="line">end;</span><br><span class="line">--使用带out类型参数的存储过程</span><br><span class="line">declare</span><br><span class="line">  yearsal number(10,2); </span><br><span class="line">begin </span><br><span class="line">  pro_yealsal2(7369,yearsal);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是：&apos;||yearsal);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create or replace function 存储函数的名称(name in type,name out type .......)</span><br><span class="line">return  数据类型</span><br><span class="line">is|as </span><br><span class="line">begin </span><br><span class="line">return 具体的值;</span><br><span class="line">end[函数名称];</span><br></pre></td></tr></table></figure><h5 id="存储函数的使用"><a href="#存储函数的使用" class="headerlink" title="存储函数的使用"></a>存储函数的使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--  返回指定员工的年薪 empno</span><br><span class="line">create or replace function  get_yearsal(empno3 number)</span><br><span class="line">return number</span><br><span class="line">is</span><br><span class="line">   yearsal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  select  sal*12 +nvl(comm,0) into  yearsal from emp where empno = empno3;</span><br><span class="line">  return yearsal;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--使用存储函数</span><br><span class="line">declare</span><br><span class="line">  year_sal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  year_sal := get_yearsal(7369);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是&apos;||year_sal);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line( get_yearsal(7369) );</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="存储函数和存储过程的区别"><a href="#存储函数和存储过程的区别" class="headerlink" title="==存储函数和存储过程的区别=="></a>==存储函数和存储过程的区别==</h5><p>1.语法不通</p><p>2.使用场景不通</p><p>   存储函数一般多被存储过程调用</p><p>   存储过程多用于项目之间的数据访问</p><p>3.sql中可以直接使用存储函数,但是不能直接使用存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- sql中可以直接使用存储函数</span><br><span class="line">select ename,func_yealsal(empno)  from emp;</span><br></pre></td></tr></table></figure><p>存储过程和存储函数的区别在于函数可以有一个返回值;而过程没有返回值,但过程和函数都可以通过out指定一个或多个输出参数.我们可以在利用out参数,在过程和函数中实现多个返回值.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- out参数类型是游标的存储过程</span><br><span class="line">-- 场景：游标中放的是指定部门的员工</span><br><span class="line">create or replace procedure proc_cursor(d1 number,cursor_emp out sys_refcursor)</span><br><span class="line">is </span><br><span class="line">begin</span><br><span class="line">      open cursor_emp from select * form emp where deptno = d1;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="Java程序调用存储过程"><a href="#Java程序调用存储过程" class="headerlink" title="Java程序调用存储过程"></a>Java程序调用存储过程</h4><h5 id="JDBC连接Oracle"><a href="#JDBC连接Oracle" class="headerlink" title="JDBC连接Oracle"></a>JDBC连接Oracle</h5><h6 id="1-java链接oracle的jar包"><a href="#1-java链接oracle的jar包" class="headerlink" title="1.java链接oracle的jar包"></a>1.java链接oracle的jar包</h6><p>​    可以在虚拟机的 C:\oracle\product\10.2.0\ db_1 \ jdbc\lib :   ojbbc14.jar</p><h6 id="2-数据库的连接"><a href="#2-数据库的连接" class="headerlink" title="2.数据库的连接"></a>2.数据库的连接</h6><p>BaseDao.classs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载驱动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">String url=<span class="string">"jdbc:oracle:thin:@192.168.227.10:1521:orcl"</span>;</span><br><span class="line">String user=<span class="string">"heima_68"</span>;</span><br><span class="line">String password=<span class="string">"heima_68"</span>;</span><br><span class="line"><span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs,Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出指定部门的员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptno</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmp</span><span class="params">(Long deptno)</span></span>&#123;</span><br><span class="line">Connection conn =<span class="keyword">null</span>;</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">String sql = <span class="string">"select * from emp where deptno=?"</span>;</span><br><span class="line">pst =conn.prepareStatement(sql);</span><br><span class="line">pst.setLong(<span class="number">1</span>, deptno);</span><br><span class="line">rs  = pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">System.out.println(rs.getLong(<span class="number">1</span>) + <span class="string">"---"</span> + rs.getString(<span class="string">"ENAME"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-测试连接"><a href="#3-测试连接" class="headerlink" title="3.测试连接"></a>3.测试连接</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">EmpDao.getEmp(<span class="number">10L</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java调用存储过程"><a href="#Java调用存储过程" class="headerlink" title="Java调用存储过程"></a>Java调用存储过程</h5><h6 id="1-定义好的存储过程"><a href="#1-定义好的存储过程" class="headerlink" title="1.定义好的存储过程:"></a>1.定义好的存储过程:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--使用out参数接收指定员工的年薪</span><br><span class="line">create or replace procedure pro_yealsal2(empno1 number,v_yearsal out number)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">  select sal*12+nvl(comm,0) into v_yearsal from emp where empno = empno1;       </span><br><span class="line">end;</span><br><span class="line">--使用带out类型参数的存储过程</span><br><span class="line">declare</span><br><span class="line">  yearsal number(10,2); </span><br><span class="line">begin </span><br><span class="line">  pro_yealsal2(7369,yearsal);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是：&apos;||yearsal);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">v_sal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  pro_yearsal(7369,v_sal);</span><br><span class="line">  dbms_output.put_line(v_sal);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h6 id="2-java调用"><a href="#2-java调用" class="headerlink" title="2.java调用"></a>2.java调用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleTypes;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcedureDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取指定部门员工的年薪</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储函数使用</span></span><br><span class="line"><span class="comment">    *  &#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储过程使用</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">getYearSal</span><span class="params">(Long deptno)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">CallableStatement cstm = <span class="keyword">null</span>;    <span class="comment">// CallableStatement用于执行 SQL 存储过程的接口</span></span><br><span class="line">Long yearSal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">cstm = conn.prepareCall(<span class="string">"call pro_yealsal2(?,?)"</span>); <span class="comment">// 调用存储过程 </span></span><br><span class="line">cstm.setLong(<span class="number">1</span>, deptno);</span><br><span class="line"><span class="comment">// 第二个 ? 是需要指定参数类型即可</span></span><br><span class="line">cstm.registerOutParameter(<span class="number">2</span>,OracleTypes.NUMBER);</span><br><span class="line">cstm.execute();</span><br><span class="line">yearSal = cstm.getLong(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> yearSal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//EmpDao.getEmp(10L);</span></span><br><span class="line">Long yearSal = ProcedureDao.getYearSal(<span class="number">7934L</span>);</span><br><span class="line">System.out.println(<span class="string">"年薪 :   "</span> + yearSal);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java程序调用存储函数"><a href="#Java程序调用存储函数" class="headerlink" title="Java程序调用存储函数"></a>Java程序调用存储函数</h4><h5 id="1-准备好的存储函数"><a href="#1-准备好的存储函数" class="headerlink" title="1.准备好的存储函数"></a>1.准备好的存储函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--  返回指定员工的年薪 empno</span><br><span class="line">create or replace function  get_yearsal(empno3 number)</span><br><span class="line">return number</span><br><span class="line">is</span><br><span class="line">   yearsal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  select  sal*12 +nvl(comm,0) into  yearsal from emp where empno = empno3;</span><br><span class="line">  return yearsal;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--使用存储函数</span><br><span class="line">declare</span><br><span class="line">  year_sal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  year_sal := get_yearsal(7369);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是&apos;||year_sal);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line( get_yearsal(7369) );</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="2-调用"><a href="#2-调用" class="headerlink" title="2.调用"></a>2.调用</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.itcast.dao;</span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import oracle.jdbc.driver.OracleTypes;</span><br><span class="line">public class FunctionDao &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取指定部门员工的年薪</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储函数使用</span></span><br><span class="line"><span class="comment"> *&#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储过程使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  存储函数:</span></span><br><span class="line"><span class="comment"> *  create or replace function  get_yearsal(empno3 number)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static Long getYearSal(Long deptno)&#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">CallableStatement cstm = null;    // CallableStatement用于执行 SQL 存储过程的接口</span><br><span class="line">Long yearSal = null;</span><br><span class="line">try &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">cstm = conn.prepareCall("&#123;?=call get_yearsal(?)&#125;");</span><br><span class="line">cstm.setLong(2, deptno);</span><br><span class="line">cstm.registerOutParameter(1, OracleTypes.NUMBER);</span><br><span class="line">cstm.execute();</span><br><span class="line">yearSal = cstm.getLong(1);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return  yearSal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//EmpDao.getEmp(10L);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Long yearSal = ProcedureDao.getYearSal(7934L);</span></span><br><span class="line"><span class="comment">//System.out.println("年薪 :   " + yearSal);</span></span><br><span class="line"></span><br><span class="line">Long yearSal2 = FunctionDao.getYearSal(<span class="number">7934L</span>);</span><br><span class="line">System.out.println(<span class="string">"年薪 :   "</span> + yearSal2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cursor.getEmp(10L);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java程序调用out类型游标-存储过程"><a href="#Java程序调用out类型游标-存储过程" class="headerlink" title="Java程序调用out类型游标 存储过程"></a>Java程序调用out类型游标 存储过程</h4><h5 id="1-创建游标类型的存储过程"><a href="#1-创建游标类型的存储过程" class="headerlink" title="1.创建游标类型的存储过程"></a>1.创建游标类型的存储过程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- out参数类型是 游标的存储过程</span><br><span class="line">-- 场景：游标中放的是指定部门的员工   deptno     sys_refcursor 系统引用型游标</span><br><span class="line">create or replace procedure proc_cursor(d1 number,cursor_emp out sys_refcursor)</span><br><span class="line">is </span><br><span class="line">begin</span><br><span class="line">     open cursor_emp for select * FROM  emp where deptno = d1;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="2-调用-1"><a href="#2-调用-1" class="headerlink" title="2.调用"></a>2.调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleCallableStatement;</span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleTypes;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cursor</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取指定部门员工的年薪</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储函数使用</span></span><br><span class="line"><span class="comment">   &#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储过程使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmp</span><span class="params">(Long deptno)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">CallableStatement cstm = <span class="keyword">null</span>;    <span class="comment">// CallableStatement用于执行 SQL 存储过程的接口</span></span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">cstm = conn.prepareCall(<span class="string">"call proc_cursor(?,?)"</span>); <span class="comment">// 调用存储过程 </span></span><br><span class="line">cstm.setLong(<span class="number">1</span>, deptno);</span><br><span class="line">cstm.registerOutParameter(<span class="number">2</span>,OracleTypes.CURSOR);</span><br><span class="line">cstm.execute();</span><br><span class="line">rs = ((OracleCallableStatement)cstm).getCursor(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">System.out.println(rs.getLong(<span class="string">"EMPNO"</span>)+<span class="string">"----"</span>+ rs.getString(<span class="string">"ENAME"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-测试-2"><a href="#3-测试-2" class="headerlink" title="3.测试"></a>3.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//EmpDao.getEmp(10L);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Long yearSal = ProcedureDao.getYearSal(7934L);</span></span><br><span class="line"><span class="comment">//System.out.println("年薪 :   " + yearSal);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Long yearSal2 = FunctionDao.getYearSal(7934L);</span></span><br><span class="line"><span class="comment">//System.out.println("年薪 :   " + yearSal2);</span></span><br><span class="line"></span><br><span class="line">Cursor.getEmp(<span class="number">10L</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><h5 id="触发器的作用"><a href="#触发器的作用" class="headerlink" title="触发器的作用"></a>触发器的作用</h5><p>​    数据确认</p><p>​    实施复杂的安全型检查</p><p>​    做审计,跟踪表上所做的数据操作等</p><p>​    数据的备份和同步</p><p>当表中的数据发生改变时，触发了某些操作</p><h5 id="触发器的类型"><a href="#触发器的类型" class="headerlink" title="触发器的类型"></a>触发器的类型</h5><h6 id="语句级触发器"><a href="#语句级触发器" class="headerlink" title="语句级触发器"></a>语句级触发器</h6><p>​    在指定的操作之前或者之后执行一次,不管这条语句影响了多少行</p><h6 id="行级触发器"><a href="#行级触发器" class="headerlink" title="行级触发器"></a>行级触发器</h6><p>​    触发语句作用的每一条记录都被触发.在行级触发器中使用old 和 new 伪记录变量,识别值的状态</p><h6 id="触发器的使用"><a href="#触发器的使用" class="headerlink" title="触发器的使用"></a>触发器的使用</h6><h6 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法:"></a>1.语法:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">delete  insert update</span><br><span class="line">语法:</span><br><span class="line">create  or  replace   trigger  触发器名称</span><br><span class="line">before|after</span><br><span class="line">delete | insert | update </span><br><span class="line">on 表名</span><br><span class="line">[for each row]</span><br><span class="line"></span><br><span class="line">[declare]</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create  or replace trigger tri_emp</span><br><span class="line">after</span><br><span class="line">insert</span><br><span class="line">on emp</span><br><span class="line">--[for each row]</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&apos;新入职了一名员工&apos;);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">insert into emp(empno,deptno) values(1,10);</span><br></pre></td></tr></table></figure><h6 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用:"></a>2.使用:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">-- 案列一 :</span><br><span class="line">--假如&apos;2017-10-20&apos;系统维护，不能修改emp中的数据</span><br><span class="line">create or replace trigger tri_emp</span><br><span class="line">before </span><br><span class="line">delete or insert or update </span><br><span class="line">on emp</span><br><span class="line">--[for each row]</span><br><span class="line">declare </span><br><span class="line">  v_dateStr varchar2(20); </span><br><span class="line">begin</span><br><span class="line">  ----判断当天sysdate是否是&apos;2017-10-21&apos;</span><br><span class="line">  select to_char(sysdate,&apos;yyyy-mm-dd&apos;)  into v_dateStr  from dual;</span><br><span class="line">  if v_dateStr = &apos;2017-10-21&apos; then </span><br><span class="line">      raise_application_error(-20002,&apos;今天系统维护，不能修改emp中的数据&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">insert into emp(empno,deptno) values(2,10);</span><br><span class="line">update emp set ename=&apos;AAAA&apos; where empno =1 ;</span><br><span class="line">delete from emp where empno=1;</span><br><span class="line">select * from emp; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--案例二:</span><br><span class="line">---备份员工的工资数据</span><br><span class="line">--1.创建表</span><br><span class="line">create table emp_sal_log(</span><br><span class="line">    eid number(10) PRIMARY KEY ,</span><br><span class="line">    empno number(10),</span><br><span class="line">    sal0 number(10,2),</span><br><span class="line">    sal1 number(10,2),</span><br><span class="line">    logDate date</span><br><span class="line">)</span><br><span class="line">--2.创建序列</span><br><span class="line">create sequence seq_emp_sal_log;</span><br><span class="line">--3.创建触发器</span><br><span class="line">create or replace trigger  tri_emp_sal</span><br><span class="line">after</span><br><span class="line">update of sal </span><br><span class="line">on emp </span><br><span class="line">for each row  -- 出现了 :old 或者 :new 使用for each row</span><br><span class="line">--  :new   :old 伪记录</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">  insert into emp_sal_log  values(seq_emp_sal_log.nextval,:new.empno, :old.sal,:new.sal,sysdate);</span><br><span class="line">end;</span><br><span class="line">  </span><br><span class="line">             :new    :old</span><br><span class="line">update               </span><br><span class="line">delete       null    </span><br><span class="line">insert               null</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">update emp set sal=10000 where empno=7369;</span><br><span class="line">select * from emp_sal_log;</span><br><span class="line">select * from emp;</span><br><span class="line"></span><br><span class="line">update emp set deptno=10 where empno=7369;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案列三:</span><br><span class="line">-- 解决主键为null插入数据</span><br><span class="line">create table t_demo(</span><br><span class="line">  tid number(10) primary key,</span><br><span class="line">  tname varchar2(10)</span><br><span class="line">)</span><br><span class="line">-- 这句话执行失败   主键不能为空</span><br><span class="line">insert into t_demo(tname) values(&apos;aaaa&apos;);</span><br><span class="line"></span><br><span class="line">-- 解决问题</span><br><span class="line">create or replace trigger tri_demo</span><br><span class="line">before</span><br><span class="line">insert </span><br><span class="line">on t_demo</span><br><span class="line">for each row </span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">  -- 在插入之前对即将插入的对象赋值id</span><br><span class="line">  select seq_emp_sal_log.nextval into :new.tid from dual;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">insert into t_demo(tname) values(&apos;aaaa&apos;);</span><br><span class="line">select * from t_demo;</span><br></pre></td></tr></table></figure><h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><h4 id="对数据的误操作一"><a href="#对数据的误操作一" class="headerlink" title="对数据的误操作一:"></a>对数据的误操作一:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--误操作一</span><br><span class="line">drop table emp;    -- 误删了一张表数据</span><br><span class="line"></span><br><span class="line">-- 解决办法 </span><br><span class="line">-- 在Recycle bin (Oracle回收站) 可以恢复数据</span><br></pre></td></tr></table></figure><h4 id="对数据的误操作二"><a href="#对数据的误操作二" class="headerlink" title="对数据的误操作二:"></a>对数据的误操作二:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 误操作二:</span><br><span class="line">delete  *   from  emp  where empno = 1;</span><br><span class="line"></span><br><span class="line"> -- 解决办法 :</span><br><span class="line">create table emp_bak</span><br><span class="line">as</span><br><span class="line">select * from emp as of TIMESTAMP to_timestamp(&apos;20171020 103435&apos;,&apos;yyyymmdd&apos;,</span><br><span class="line">  hh24miss);</span><br><span class="line">select * from emp_bak;</span><br></pre></td></tr></table></figure><h3 id="Mysql-amp-Oracle"><a href="#Mysql-amp-Oracle" class="headerlink" title="Mysql&amp;Oracle"></a>Mysql&amp;Oracle</h3><h4 id="触发器-1"><a href="#触发器-1" class="headerlink" title="触发器:"></a>触发器:</h4><table><thead><tr><th>差异</th><th>MYSQL</th><th>ORACLE</th><th>说明</th></tr></thead><tbody><tr><td>创建语句不同</td><td>create trigger ‘AA’ BEFORE  INSERT on  ‘BB’   for each row</td><td>create or replace trigger AA    before insert or update or delete on BB    for each row</td><td>1.Oracle可以在一个触发器触发insert,delete,update事件.      Mysql每个触发器只支持一个事件. 也就是说,目前每个trigger需要拆分成3个mysql trigger.</td></tr><tr><td>引用新旧数据不同</td><td>取得新数据:  NEW.aa  取得老数据:  OLD.bb</td><td>取得新数据:  :new.aa  取得老数据:  :old.bb</td><td>1.oracle 多一对冒号</td></tr></tbody></table><h4 id="存储过程-1"><a href="#存储过程-1" class="headerlink" title="存储过程:"></a>存储过程:</h4><table><thead><tr><th>差异</th><th>MYSQL</th><th>ORACLE</th><th>说明</th></tr></thead><tbody><tr><td>创建语句不同</td><td>DROP PROCEDURE IF EXISTS  ‘SD_USER_P_ADD_USR’;  create procedure AA(aa varchar(100))</td><td>create or replace procedure AA(     varchar aa) is</td><td>1.oracle创建语比较简洁,mysql要先执行drop  2.mysql先变量再类型,oracle相反,且不必限定长度  3.如果是number或varchar2的话不需要定义长度。否则编译不能通过</td></tr><tr><td></td><td>DECLARE EXIT HANDLER FOR   AAEXCEPTION    BEGIN     …   END;</td><td>EXCEPTION      WHEN OTHERS THEN      ROLLBACK ;      ….</td><td>1.mysql不能自定义异常,且使用内部异常时需要先定义</td></tr></tbody></table><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1.plsql基本语法    **</p><p>2.存储过程和存储函数  <em>*</em></p><p>3.jdbc调用存过程和存储函数    <strong>*</strong></p><p>4.触发器         <em>**</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Oracle第四天&quot;&gt;&lt;a href=&quot;#Oracle第四天&quot; class=&quot;headerlink&quot; title=&quot;Oracle第四天&quot;&gt;&lt;/a&gt;Oracle第四天&lt;/h3&gt;&lt;h4 id=&quot;PL-SQL编程语言&quot;&gt;&lt;a href=&quot;#PL-SQL编程语言&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.top.com/2017/11/26/oracle03/"/>
    <id>http://www.top.com/2017/11/26/oracle03/</id>
    <published>2017-11-26T06:20:45.388Z</published>
    <updated>2017-10-21T14:04:45.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle第三天"><a href="#Oracle第三天" class="headerlink" title="Oracle第三天"></a>Oracle第三天</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select instance_name from v$instance;    -- 查询 sid</span><br></pre></td></tr></table></figure><p>count问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select count(*)  from emp ;</span><br><span class="line">select count(empno) from emp;   -- 指定了count的列   主键列  有索引</span><br><span class="line">select count(ename) from emp;   -- 指定了count的列 普通列</span><br><span class="line">select count(0) from emp; -- 先找主键</span><br><span class="line">select count(1) from emp;  -- 先找主键</span><br><span class="line">select count(5454515) from emp;  -- 先找主键</span><br><span class="line"></span><br><span class="line">select count(comm)  from emp;   -- 4  自动跳过null值</span><br></pre></td></tr></table></figure><table><thead><tr><th>步骤</th><th>mysql</th><th>Oracle</th></tr></thead><tbody><tr><td>1</td><td>创建数据库 create  database mingzi</td><td>创建表空间同时创建 .dbf文件</td></tr><tr><td>2</td><td>创建表</td><td>创建用户,指定操作的空间</td></tr><tr><td>3</td><td>操作数据</td><td>赋权限</td></tr><tr><td>4</td><td>操作数据</td><td>创建表</td></tr><tr><td>5</td><td>操作数据</td><td>操作数据</td></tr></tbody></table><h4 id="1-创建表空间用户"><a href="#1-创建表空间用户" class="headerlink" title="1.创建表空间用户"></a>1.创建表空间用户</h4><p>当前用户是管理员 ,才有权限创建用户 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 1.1创建表空间同时创建dbf文件</span><br><span class="line">create tablespace heima_68_space   --表空间的名字</span><br><span class="line">datafile &apos;c:\\heima_68.dbf&apos;        --数据文件</span><br><span class="line">size 10M                           --指定数据文件的大小</span><br><span class="line">autoextend on                      --数据文件自动增长</span><br><span class="line">next 1M                            --增长的大小</span><br><span class="line"></span><br><span class="line">select  *  from  session_privs ;   -- 查看当前用户的权限</span><br><span class="line"></span><br><span class="line">--  1.2创建用户，指定操作的表空间</span><br><span class="line">create user  heima_68     -- 用户名</span><br><span class="line">identified  by  heima_68    -- 密码</span><br><span class="line">default  tablespace  heima_68_space ;  -- 指定操作的表空间</span><br><span class="line"></span><br><span class="line">-- 1.3赋权限</span><br><span class="line">select  *  from  session_privs ;   -- 查看当前用户的权限</span><br><span class="line">-- 权限  三种角色</span><br><span class="line">dba</span><br><span class="line">resource</span><br><span class="line">connect</span><br><span class="line">-- 授权</span><br><span class="line">grant   dba to  heima_68 ;</span><br></pre></td></tr></table></figure><h4 id="2-Oracle-常见的数据类型"><a href="#2-Oracle-常见的数据类型" class="headerlink" title="2.Oracle 常见的数据类型"></a>2.Oracle 常见的数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--2.1字符型  char varchar2</span><br><span class="line">char        255      固定长度     name  char(10)  &apos;TOM&apos;</span><br><span class="line">varchar2   3999     不固定长度    name  varchar2  &apos;TOM&apos;</span><br><span class="line"></span><br><span class="line">-- 2.2数值型  number </span><br><span class="line">id   number(3)   999</span><br><span class="line">aa   number(3,2)  9.99    总长度  不包括小数点和负号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 2.3日期型</span><br><span class="line">date 相当于mysql的datetime</span><br><span class="line">timestamp  时间戳  精度支持秒小数点后9位</span><br><span class="line"></span><br><span class="line">-- 2.4 大数据类型</span><br><span class="line">long  相当于mysql longtext  支持2个G内存</span><br><span class="line">clob  支持4G</span><br><span class="line">blob  存放视频,图片等</span><br></pre></td></tr></table></figure><h4 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3.创建表"></a>3.创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">-- 3.1约束   主键  非空  唯一 检查 外键</span><br><span class="line">drop table person;</span><br><span class="line">create  ------ drop</span><br><span class="line"></span><br><span class="line">create table person(</span><br><span class="line"> pid number(10) ,</span><br><span class="line"> pname varchar2(30) not null,</span><br><span class="line"> telephone varchar2(11),</span><br><span class="line"> gender char(1),     --  0女  1男</span><br><span class="line"> constraint person_pk_pid primary key(pid),</span><br><span class="line"> constraint person_unique_telephone unique(telephone),</span><br><span class="line"> constraint person_check_gender check(gender in(0,1))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into person  values(1,&apos;TOM&apos;,&apos;13898765432&apos;,&apos;1&apos;);</span><br><span class="line">insert into person  values(2,&apos;JERREY&apos;,&apos;13898765431&apos;,&apos;1&apos;);</span><br><span class="line">insert into person  values(3,&apos;JERREY&apos;,&apos;13898765433&apos;,&apos;0&apos;);</span><br><span class="line">insert into person  values(4,null,&apos;13898765434&apos;,&apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from person</span><br><span class="line"></span><br><span class="line">create table orders(</span><br><span class="line"> ooid number(10) primary key,</span><br><span class="line"> totalPrice number(10,2)</span><br><span class="line">)</span><br><span class="line">create table orderdetail(</span><br><span class="line"> odid number(10) primary key,</span><br><span class="line"> goodsName varchar2(30),</span><br><span class="line"> ooid number(10),</span><br><span class="line"> constraint orderdetail_fk_ooid foreign key(ooid) references orders(ooid)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into orders values(1,1000);</span><br><span class="line">insert into orders values(2,5000);</span><br><span class="line"></span><br><span class="line">select * from orders</span><br><span class="line"></span><br><span class="line">insert into orderdetail values(1,&apos;鼠标&apos;,1);</span><br><span class="line">insert into orderdetail values(2,&apos;键盘&apos;,2);</span><br><span class="line">delete from orderdetail where ooid=1</span><br><span class="line">delete from orders where ooid=1</span><br><span class="line"></span><br><span class="line">-- 3.2 修改表（了解）</span><br><span class="line">alter table person add (address varchar2(10))--添加列</span><br><span class="line">alter table person modify(address varchar2(100)) --修改列</span><br><span class="line">alter table person drop column address  --删除列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 3.3 操作数据</span><br><span class="line">drop table person;</span><br><span class="line">create  ------ drop</span><br><span class="line"></span><br><span class="line">create table person(</span><br><span class="line"> pid number(10) ,</span><br><span class="line"> pname varchar2(30) not null,</span><br><span class="line"> telephone varchar2(11),</span><br><span class="line"> gender char(1),     --  0女  1男</span><br><span class="line"> birthday date,</span><br><span class="line"> constraint person_pk_pid primary key(pid),</span><br><span class="line"> constraint person_unique_telephone unique(telephone),</span><br><span class="line"> constraint person_check_gender check(gender in(0,1))</span><br><span class="line">)</span><br><span class="line">insert into person values(1,&apos;TOM&apos;,&apos;12345678909&apos;,&apos;1&apos;,to_date(&apos;2008-08-08&apos;,&apos;yyyy-mm-dd&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---- 快速复制表</span><br><span class="line">create table myemp as (select * from scott.emp)</span><br><span class="line">create table mydept as (select * from scott.dept)</span><br><span class="line"></span><br><span class="line">--  给纽约NEW YORK地区的员工涨100元工资</span><br><span class="line">select * from myemp</span><br><span class="line">select * from mydept</span><br><span class="line"></span><br><span class="line">select * from myemp where deptno in (select deptno from mydept where loc=&apos;NEW YORK&apos;)</span><br><span class="line"></span><br><span class="line">  update myemp set sal=sal+100 where deptno in (select deptno from mydept where loc=&apos;NEW YORK&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-事务的保存点savepoint"><a href="#4-事务的保存点savepoint" class="headerlink" title="4.事务的保存点savepoint"></a>4.事务的保存点savepoint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">select * from  person</span><br><span class="line"></span><br><span class="line">update person set pname=&apos;大郎&apos; where pid=1;</span><br><span class="line">savepoint a;</span><br><span class="line">insert into person values(2,&apos;小潘&apos;,&apos;12345432123&apos;,&apos;0&apos;,null);</span><br><span class="line">savepoint b;</span><br><span class="line">delete from person where pid=2;</span><br><span class="line">rollback to a;</span><br><span class="line"></span><br><span class="line">rollback to b;</span><br><span class="line"></span><br><span class="line">rollback to a</span><br><span class="line"></span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">场景</span><br><span class="line">用户注册</span><br><span class="line"> 1、insert  user</span><br><span class="line"> 2、发送短信 insert 短信记录表</span><br><span class="line"> </span><br><span class="line"> insert  user</span><br><span class="line"> savepoint a;</span><br><span class="line"> insert log</span><br></pre></td></tr></table></figure><h4 id="5-事务的隔离级别"><a href="#5-事务的隔离级别" class="headerlink" title="5.事务的隔离级别"></a>5.事务的隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">（1）Read uncommitted 读未提交</span><br><span class="line">公司发工资了，领导把5000元打到singo的账号上，但是该事务并未提交，而singo正好去查看账户，发现工资已经到账，是5000元整，非常高兴。</span><br><span class="line">可是不幸的是，领导发现发给singo的工资金额不对，是2000元，于是迅速回滚了事务，修改金额后，将事务提交，最后singo实际的工资只有2000元，</span><br><span class="line">singo空欢喜一场。</span><br><span class="line"></span><br><span class="line">总结：出现上述情况，即我们所说的脏读，两个并发的事务，“事务A：领导给singo发工资”、“事务B：singo查询工资账户”，事务B读取了事务A尚未提交的数据。</span><br><span class="line"></span><br><span class="line">当隔离级别设置为Read uncommitted时，就可能出现脏读，如何避免脏读，请看下一个隔离级别。</span><br><span class="line"> （2）Read committed 读提已交</span><br><span class="line"></span><br><span class="line">singo拿着工资卡去消费，系统读取到卡里确实有2000元，而此时她的老婆也正好在网上转账，把singo工资卡的2000元转到另一账户，</span><br><span class="line">并在singo之前提交了事务，当singo扣款时，系统检查到singo的工资卡已经没有钱，扣款失败，singo十分纳闷，明明卡里有钱，为何......</span><br><span class="line"></span><br><span class="line">总结：出现上述情况，即我们所说的不可重复读，两个并发的事务，“事务A：singo消费”、“事务B：singo的老婆网上转账”，事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。</span><br><span class="line"></span><br><span class="line">当隔离级别设置为Read committed时，避免了脏读，但是可能会造成不可重复读。</span><br><span class="line"></span><br><span class="line">大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。如何解决不可重复读这一问题，请看下一个隔离级别。</span><br><span class="line"></span><br><span class="line">  (3) Repeatable read 重复读</span><br><span class="line"></span><br><span class="line">singo的老婆工作在银行部门，她时常通过银行内部系统查看singo的信用卡消费记录。</span><br><span class="line">有一天，她正在查询到singo当月信用卡的总消费金额（<span class="keyword">select</span> <span class="keyword">sum</span>(amount) <span class="keyword">from</span> <span class="keyword">transaction</span> <span class="keyword">where</span> <span class="keyword">month</span> = 本月）为<span class="number">80</span>元，</span><br><span class="line">而singo此时正好在外面胡吃海塞后在收银台买单，消费<span class="number">1000</span>元，即新增了一条<span class="number">1000</span>元的消费记录（<span class="keyword">insert</span> <span class="keyword">transaction</span> ... ），</span><br><span class="line">并提交了事务，随后singo的老婆将singo当月信用卡消费的明细打印到A4纸上，却发现消费总额为<span class="number">1080</span>元，singo的老婆很诧异，</span><br><span class="line">以为出现了幻觉，幻读就这样产生了。</span><br><span class="line"></span><br><span class="line">总结：当隔离级别设置为Repeatable <span class="keyword">read</span>时，可以避免不可重复读。当singo拿着工资卡去消费时，一旦系统开始读取工资卡信息（即事务开始），singo的老婆就不可能对该记录进行修改，也就是singo的老婆不能在此时转账。</span><br><span class="line"></span><br><span class="line">虽然Repeatable <span class="keyword">read</span>避免了不可重复读，但还有可能出现幻读。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   （<span class="number">4</span>）<span class="keyword">Serializable</span> 序列化</span><br><span class="line"><span class="keyword">Serializable</span>是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">√: 可能出现    ×: 不会出现</span><br><span class="line"></span><br><span class="line">         脏读  不可重复读  幻读</span><br><span class="line"><span class="keyword">Read</span> uncommitted√   √√</span><br><span class="line"><span class="keyword">Read</span> committed×√    √</span><br><span class="line">Repeatable <span class="keyword">read</span>××√</span><br><span class="line"><span class="keyword">Serializable</span>×××</span><br></pre></td></tr></table></figure><h4 id="6-数据库的其他对象"><a href="#6-数据库的其他对象" class="headerlink" title="6.数据库的其他对象"></a>6.数据库的其他对象</h4><h5 id="视图view"><a href="#视图view" class="headerlink" title="视图view"></a>视图view</h5><p>​    概念: 是个虚表,可以把视图当作表来操作</p><p>​    作用|好处: </p><p>​    1.可以封装复杂的sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create view view_hireCount as</span><br><span class="line">select    </span><br><span class="line">  sum(t.counts) &quot;Total&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1980&apos;,counts)) &quot;1980&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1981&apos;,counts)) &quot;1981&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1982&apos;,counts)) &quot;1982&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1987&apos;,counts)) &quot;1987&quot; </span><br><span class="line"> from  (select   to_char(hiredate,&apos;yyyy&apos;) years  ,count(*)  counts  from emp  group by to_char(hiredate,&apos;yyyy&apos;))  t ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select *  from view_hireCount;</span><br></pre></td></tr></table></figure><p>​    2.可以隐藏敏感列</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create view view_emp as select empno,ename,job,mgr,hiredate,deptno  from  myemp ;</span><br><span class="line"></span><br><span class="line">select * from view_emp;</span><br><span class="line">update view_emp2 set ename=&apos;bbbb&apos; where empno =7369;</span><br><span class="line">select * from myemp;</span><br><span class="line"></span><br><span class="line">--只读视图  with  read only</span><br><span class="line">create view view_emp2 as select empno,ename,job,mgr,hiredate,deptno  from myemp with  read only ;</span><br><span class="line">select * from view_emp;</span><br><span class="line">update view_emp2 set ename=&apos;bbbb&apos; where empno =7369;</span><br><span class="line">select * from myemp2;</span><br></pre></td></tr></table></figure><h5 id="序列sequence"><a href="#序列sequence" class="headerlink" title="序列sequence"></a>序列sequence</h5><p>​    概念:  独立于表之外的对象,主键自增</p><p>​    作用: 主要用来做主键自增;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--序列的简单语法</span><br><span class="line"></span><br><span class="line">--使用序列</span><br><span class="line">create  sequence seq_person ;</span><br><span class="line"></span><br><span class="line">--第一次使用,只能使用seq_person.nextval </span><br><span class="line">select seq_person.nextval from dual;</span><br><span class="line">select seq_person.currval from dual;</span><br><span class="line"></span><br><span class="line">select * from person;</span><br><span class="line">insert into person values(seq_person.nextval,&apos;小明&apos;,&apos;1232&apos;,&apos;0&apos;,&apos;null&apos;)</span><br><span class="line"></span><br><span class="line">--序列的复杂语法</span><br><span class="line">5 7 9 11 13 15 3 5 7 9</span><br><span class="line">create  sequence sel_test </span><br><span class="line">increament by 2 -- 递增值,默认是1</span><br><span class="line">minvalue  3 -- 最小值,默认是1</span><br><span class="line">maxvalue --15 --最大值  默认是19个9   </span><br><span class="line">start width 5 --起始值 默认是1</span><br><span class="line">cycle  --循环   默认nocycle</span><br><span class="line">cache 10 --缓存</span><br></pre></td></tr></table></figure><h5 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h5><p>​    概念: 相当于一本数的目录</p><p>​    作用|好处: 为了提高查询效率</p><p>​    主键和唯一约束默认就会创建索引</p><p>​    怎么用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">create index index_emp_ename on myemp(ename);</span><br><span class="line"></span><br><span class="line">select *  from myemp where ename = &apos;SCOTT&apos;;</span><br><span class="line"></span><br><span class="line">1.创建一个表</span><br><span class="line">create table t_test(</span><br><span class="line">tid number(10),</span><br><span class="line">  tname varchar2(20)</span><br><span class="line">);</span><br><span class="line">2.插入500万条数据</span><br><span class="line">begin </span><br><span class="line">  for i  in 1..5000000</span><br><span class="line">    loop </span><br><span class="line">   insert into t_test  values(i,&apos;测试数据&apos;||i )</span><br><span class="line">  end loop;</span><br><span class="line">  commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">3.查询记录时间</span><br><span class="line">select * form t_test where tname=&apos;测试数据566899686&apos;;</span><br><span class="line"></span><br><span class="line">4.创建索引</span><br><span class="line">create index index_test on t_test(tname);</span><br><span class="line"></span><br><span class="line">5.查询 记录时间(索引)</span><br><span class="line">select * form t_test where tname=&apos;测试数据56615186&apos;;</span><br></pre></td></tr></table></figure><h5 id="提高查询效率-面试"><a href="#提高查询效率-面试" class="headerlink" title="提高查询效率(面试)"></a>提高查询效率(面试)</h5><ol><li>创建索引</li><li>子查询  (笛卡尔积)</li><li>把经常用的多表数据放在一张表中 (创建)</li></ol><h5 id="同义词-synonym"><a href="#同义词-synonym" class="headerlink" title="同义词 synonym"></a>同义词 synonym</h5><p>概念</p><p>作用: 缩短访问对象的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create synonym e from scott.emp;</span><br><span class="line"></span><br><span class="line">create synonym  e  from scott.emp;</span><br><span class="line"></span><br><span class="line">select * from e;</span><br><span class="line">drop synonym e;   -- drop 自己的</span><br><span class="line">drop public synonym e;</span><br></pre></td></tr></table></figure><h4 id="7-数据的导入导出"><a href="#7-数据的导入导出" class="headerlink" title="7.数据的导入导出"></a>7.数据的导入导出</h4><ol><li><p>全部导出</p><p>…</p></li><li><p>按照用户导出(重点)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、全部导出</span><br><span class="line">2、按照用户导出</span><br><span class="line">注意 : exp和 imp 使用命令的前提是当前电脑上安装了Oracle</span><br><span class="line">按照用户导出</span><br><span class="line"></span><br><span class="line">把scott用户下的所有对象导入到heima_68用户</span><br><span class="line">导出:exp scott/tiger@192.168.227.10:1521/orcl file=c:\\scott20171018.dmp owner = scott;</span><br><span class="line"></span><br><span class="line">导入:imp heima_68/heima_68@192.168.66.10:1521/orcl  file=c:\\scott20171018.dmp full=y</span><br><span class="line">3、导出某表</span><br></pre></td></tr></table></figure></li><li><p>导出某表</p><p>….</p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>创建表空间用户 ==保存语句==</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create tablespace heima_68_space   --表空间的名字</span><br><span class="line">datafile &apos;c:\\heima_68.dbf&apos;        --数据文件</span><br><span class="line">size 10M                           --指定数据文件的大小</span><br><span class="line">autoextend on                      --数据文件自动增长</span><br><span class="line">next 1M                            --增长的大小</span><br></pre></td></tr></table></figure><p> ​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select  *  from  session_privs ;   -- 查看当前用户的权限</span><br><span class="line"></span><br><span class="line">create user heima_68    --用户名</span><br><span class="line">identified  by heima_68  -- 密码</span><br><span class="line">default  tablespace heima_68_space   -- 指定表空间</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p></li><li><p>创建表</p><p>​     数据类型  ==重点==</p><p>​     创建表     ==重点==</p><p>​     修改表结构  了解</p></li><li><p>操作数据  ==重点==</p><p> insert  </p><p> delete</p><p>  update</p></li><li><p>事务保存点 了解</p></li><li><p>视图  ==重点==</p></li><li><p>序列 ==重点==</p></li><li><p>索引==重点Oracle独有==</p></li><li><p>同义词  了解</p></li><li><p>导入导出 ==重点==   ==保存语句==</p><p>注意 : exp和 imp 使用命令的前提是当前电脑上安装了Oracle</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">把scott用户下的所有对象导入到heima_68用户</span><br><span class="line"></span><br><span class="line">导出:exp scott/tiger@192.168.227.10:1521/orcl file=c:\\scott20171018.dmp owner = scott;</span><br><span class="line"></span><br><span class="line">导入:imp heima_68/heima_68@192.168.66.10:1521/orcl  file=c:\\scott20171018.dmp full=y</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Oracle第三天&quot;&gt;&lt;a href=&quot;#Oracle第三天&quot; class=&quot;headerlink&quot; title=&quot;Oracle第三天&quot;&gt;&lt;/a&gt;Oracle第三天&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
</feed>
