<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.top.com/"/>
  <updated>2018-10-12T11:37:21.748Z</updated>
  <id>http://www.top.com/</id>
  
  <author>
    <name>马文磊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot常用配置</title>
    <link href="http://www.top.com/2018/03/21/SpringBoot%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.top.com/2018/03/21/SpringBoot常用配置/</id>
    <published>2018-03-21T06:35:32.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot常用配置"><a href="#SpringBoot常用配置" class="headerlink" title="SpringBoot常用配置"></a>SpringBoot常用配置</h2><h3 id="1-SPRING-CONFIG"><a href="#1-SPRING-CONFIG" class="headerlink" title="1. SPRING CONFIG"></a>1. SPRING CONFIG</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.config.name    </span><br><span class="line"># 配置文件名称，默认为application </span><br><span class="line">spring.config.location  </span><br><span class="line">#配置文件存放位置，默认为classpath目录下</span><br></pre></td></tr></table></figure><h3 id="2-mvc"><a href="#2-mvc" class="headerlink" title="2.mvc"></a>2.mvc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.async.request-timeout </span><br><span class="line">#设定async请求的超时时间，以毫秒为单位，如果没有设置的话，以具体实现的超时时间为准，比如tomcat的servlet3的话是10秒. </span><br><span class="line">spring.mvc.date-format = yyyy-MM-dd HH:mm:ss</span><br><span class="line">#设定日期的格式，比如dd/MM/yyyy或者yyyy-MM-dd HH:mm:ss</span><br><span class="line">spring.mvc.favicon.enabled </span><br><span class="line">#是否支持favicon.ico，默认为: true </span><br><span class="line">spring.mvc.ignore-default-model-on-redirect </span><br><span class="line">#在重定向时是否忽略默认model的内容，默认为true </span><br><span class="line">spring.mvc.locale </span><br><span class="line">#指定使用的Locale. </span><br><span class="line">spring.mvc.message-codes-resolver-format </span><br><span class="line">#指定message codes的格式化策略(PREFIX_ERROR_CODE,POSTFIX_ERROR_CODE). </span><br><span class="line">spring.mvc.view.prefix </span><br><span class="line">#指定mvc视图的前缀. </span><br><span class="line">spring.mvc.view.suffix </span><br><span class="line">#指定mvc视图的后缀.</span><br></pre></td></tr></table></figure><h3 id="3-view"><a href="#3-view" class="headerlink" title="3.view"></a>3.view</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.view.prefix </span><br><span class="line">#设定mvc视图的前缀. </span><br><span class="line">spring.view.suffix </span><br><span class="line">#设定mvc视图的后缀.</span><br></pre></td></tr></table></figure><h3 id="4-resource"><a href="#4-resource" class="headerlink" title="4.resource"></a>4.resource</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spring.resources.add-mappings </span><br><span class="line">#是否开启默认的资源处理，默认为true </span><br><span class="line">spring.resources.cache-period </span><br><span class="line">#设定资源的缓存时效，以秒为单位. </span><br><span class="line">spring.resources.chain.cache </span><br><span class="line">#是否开启缓存，默认为: true </span><br><span class="line">spring.resources.chain.enabled </span><br><span class="line">#是否开启资源 handling chain，默认为false </span><br><span class="line">spring.resources.chain.html-application-cache </span><br><span class="line">#是否开启h5应用的cache manifest重写，默认为: false </span><br><span class="line">spring.resources.chain.strategy.content.enabled </span><br><span class="line">#是否开启内容版本策略，默认为false </span><br><span class="line">spring.resources.chain.strategy.content.paths </span><br><span class="line">#指定要应用的版本的路径，多个以逗号分隔，默认为:[/**] </span><br><span class="line">spring.resources.chain.strategy.fixed.enabled </span><br><span class="line">#是否开启固定的版本策略，默认为false </span><br><span class="line">spring.resources.chain.strategy.fixed.paths </span><br><span class="line">#指定要应用版本策略的路径，多个以逗号分隔 </span><br><span class="line">spring.resources.chain.strategy.fixed.version </span><br><span class="line">#指定版本策略使用的版本号 </span><br><span class="line">spring.resources.static-locations </span><br><span class="line">#指定静态资源路径，默认为classpath:[/META-INF/resources/,/resources/, /static/, /public/]以及context:/</span><br></pre></td></tr></table></figure><h3 id="5-multipart"><a href="#5-multipart" class="headerlink" title="5.multipart"></a>5.multipart</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">multipart.enabled </span><br><span class="line">#是否开启文件上传支持，默认为true </span><br><span class="line">multipart.file-size-threshold </span><br><span class="line">#设定文件写入磁盘的阈值，单位为MB或KB，默认为0 </span><br><span class="line">multipart.location </span><br><span class="line">#指定文件上传路径. </span><br><span class="line">multipart.max-file-size </span><br><span class="line">#指定文件大小最大值，默认1MB </span><br><span class="line">multipart.max-request-size </span><br><span class="line">#指定每次请求的最大值，默认为10MB</span><br></pre></td></tr></table></figure><h3 id="6-freemarker"><a href="#6-freemarker" class="headerlink" title="6.freemarker"></a>6.freemarker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">spring.freemarker.allow-request-override </span><br><span class="line">#指定HttpServletRequest的属性是否可以覆盖controller的model的同名项 </span><br><span class="line">spring.freemarker.allow-session-override </span><br><span class="line">#指定HttpSession的属性是否可以覆盖controller的model的同名项 </span><br><span class="line">spring.freemarker.cache </span><br><span class="line">#是否开启template caching. </span><br><span class="line">spring.freemarker.charset </span><br><span class="line">#设定Template的编码. </span><br><span class="line">spring.freemarker.check-template-location </span><br><span class="line">#是否检查templates路径是否存在. </span><br><span class="line">spring.freemarker.content-type </span><br><span class="line">#设定Content-Type. </span><br><span class="line">spring.freemarker.enabled </span><br><span class="line">#是否允许mvc使用freemarker. </span><br><span class="line">spring.freemarker.expose-request-attributes </span><br><span class="line">#设定所有request的属性在merge到模板的时候，是否要都添加到model中. </span><br><span class="line">spring.freemarker.expose-session-attributes </span><br><span class="line">#设定所有HttpSession的属性在merge到模板的时候，是否要都添加到model中. </span><br><span class="line">spring.freemarker.expose-spring-macro-helpers </span><br><span class="line">#设定是否以springMacroRequestContext的形式暴露RequestContext给Spring’s macro library使用 </span><br><span class="line">spring.freemarker.prefer-file-system-access </span><br><span class="line">#是否优先从文件系统加载template，以支持热加载，默认为true </span><br><span class="line">spring.freemarker.prefix </span><br><span class="line">#设定freemarker模板的前缀. </span><br><span class="line">spring.freemarker.request-context-attribute </span><br><span class="line">#指定RequestContext属性的名. </span><br><span class="line">spring.freemarker.settings </span><br><span class="line">#设定FreeMarker keys. </span><br><span class="line">spring.freemarker.suffix </span><br><span class="line">#设定模板的后缀. </span><br><span class="line">spring.freemarker.template-loader-path </span><br><span class="line">#设定模板的加载路径，多个以逗号分隔，默认: [“classpath:/templates/”] </span><br><span class="line">spring.freemarker.view-names </span><br><span class="line">#指定使用模板的视图列表.</span><br></pre></td></tr></table></figure><h3 id="7-http"><a href="#7-http" class="headerlink" title="7.http"></a>7.http</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.hateoas.apply-to-primary-object-mapper </span><br><span class="line">#设定是否对object mapper也支持HATEOAS，默认为: true </span><br><span class="line">spring.http.converters.preferred-json-mapper </span><br><span class="line">#是否优先使用JSON mapper来转换. </span><br><span class="line">spring.http.encoding.charset </span><br><span class="line">#指定http请求和相应的Charset，默认: UTF-8 </span><br><span class="line">spring.http.encoding.enabled </span><br><span class="line">#是否开启http的编码支持，默认为true </span><br><span class="line">spring.http.encoding.force </span><br><span class="line">#是否强制对http请求和响应进行编码，默认为true</span><br></pre></td></tr></table></figure><h3 id="8-json"><a href="#8-json" class="headerlink" title="8.json"></a>8.json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">spring.jackson.date-format </span><br><span class="line">#指定日期格式，比如yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名 </span><br><span class="line">spring.jackson.deserialization </span><br><span class="line">#是否开启Jackson的反序列化 </span><br><span class="line">spring.jackson.generator </span><br><span class="line">#是否开启json的generators. </span><br><span class="line">spring.jackson.joda-date-time-format </span><br><span class="line">#指定Joda date/time的格式，比如yyyy-MM-dd HH:mm:ss). 如果没有配置的话，dateformat会作为backup </span><br><span class="line">spring.jackson.locale </span><br><span class="line">#指定json使用的Locale. </span><br><span class="line">spring.jackson.mapper </span><br><span class="line">#是否开启Jackson通用的特性. </span><br><span class="line">spring.jackson.parser </span><br><span class="line">#是否开启jackson的parser特性. </span><br><span class="line">spring.jackson.property-naming-strategy </span><br><span class="line">#指定PropertyNamingStrategy (CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)或者指定PropertyNamingStrategy子类的全限定类名. </span><br><span class="line">spring.jackson.serialization </span><br><span class="line">#是否开启jackson的序列化. </span><br><span class="line">spring.jackson.serialization-inclusion </span><br><span class="line">#指定序列化时属性的inclusion方式，具体查看JsonInclude.Include枚举. </span><br><span class="line">spring.jackson.time-zone </span><br><span class="line">#指定日期格式化时区，比如America/Los_Angeles或者GMT+10.</span><br></pre></td></tr></table></figure><h4 id="9-LOGGING"><a href="#9-LOGGING" class="headerlink" title="9.LOGGING"></a>9.LOGGING</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logging.path=/var/logs </span><br><span class="line">logging.file=myapp.log </span><br><span class="line">logging.config= # location of config file (default classpath:logback.xml for logback) </span><br><span class="line">logging.level.*= # levels for loggers, e.g. “logging.level.org.springframework=DEBUG” (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF)</span><br></pre></td></tr></table></figure><h4 id="10-IDENTITY-ContextIdApplicationContextInitializer"><a href="#10-IDENTITY-ContextIdApplicationContextInitializer" class="headerlink" title="10.IDENTITY (ContextIdApplicationContextInitializer)"></a>10.IDENTITY (ContextIdApplicationContextInitializer)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name= </span><br><span class="line">spring.application.index=</span><br></pre></td></tr></table></figure><h4 id="11-EMBEDDED-SERVER-CONFIGURATION-ServerProperties"><a href="#11-EMBEDDED-SERVER-CONFIGURATION-ServerProperties" class="headerlink" title="11.EMBEDDED SERVER CONFIGURATION (ServerProperties)"></a>11.EMBEDDED SERVER CONFIGURATION (ServerProperties)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080 </span><br><span class="line">server.address= # bind to a specific NIC </span><br><span class="line">server.session-timeout= # session timeout in seconds </span><br><span class="line">server.context-parameters.*= # Servlet context init parameters, e.g. server.context-parameters.a=alpha </span><br><span class="line">server.context-path= # the context path, defaults to ‘/’ </span><br><span class="line">server.servlet-path= # the servlet path, defaults to ‘/’ </span><br><span class="line">server.ssl.enabled=true # if SSL support is enabled </span><br><span class="line">server.ssl.client-auth= # want or need </span><br><span class="line">server.ssl.key-alias= </span><br><span class="line">server.ssl.ciphers= # supported SSL ciphers </span><br><span class="line">server.ssl.key-password= </span><br><span class="line">server.ssl.key-store= </span><br><span class="line">server.ssl.key-store-password= </span><br><span class="line">server.ssl.key-store-provider= </span><br><span class="line">server.ssl.key-store-type= </span><br><span class="line">server.ssl.protocol=TLS </span><br><span class="line">server.ssl.trust-store= </span><br><span class="line">server.ssl.trust-store-password= </span><br><span class="line">server.ssl.trust-store-provider= </span><br><span class="line">server.ssl.trust-store-type= </span><br><span class="line">server.tomcat.access-log-pattern= # log pattern of the access log </span><br><span class="line">server.tomcat.access-log-enabled=false # is access logging enabled </span><br><span class="line">server.tomcat.internal-proxies=10\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;|\ </span><br><span class="line">192\.168\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;|\ </span><br><span class="line">169\.254\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;|\ </span><br><span class="line">127\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125; # regular expression matching trusted IP addresses </span><br><span class="line">server.tomcat.protocol-header=x-forwarded-proto # front end proxy forward header </span><br><span class="line">server.tomcat.port-header= # front end proxy port header </span><br><span class="line">server.tomcat.remote-ip-header=x-forwarded-for </span><br><span class="line">server.tomcat.basedir=/tmp # base dir (usually not needed, defaults to tmp) </span><br><span class="line">server.tomcat.background-processor-delay=30; # in seconds </span><br><span class="line">server.tomcat.max-http-header-size= # maximum size in bytes of the HTTP message header </span><br><span class="line">server.tomcat.max-threads = 0 # number of threads in protocol handler </span><br><span class="line">server.tomcat.uri-encoding = UTF-8 # character encoding to use for URL decoding</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot常用配置&quot;&gt;&lt;a href=&quot;#SpringBoot常用配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot常用配置&quot;&gt;&lt;/a&gt;SpringBoot常用配置&lt;/h2&gt;&lt;h3 id=&quot;1-SPRING-CONFIG&quot;&gt;
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://www.top.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot热部署</title>
    <link href="http://www.top.com/2018/03/21/SpringBoot%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.top.com/2018/03/21/SpringBoot热部署/</id>
    <published>2018-03-21T06:33:23.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot热部署"><a href="#SpringBoot热部署" class="headerlink" title="SpringBoot热部署"></a>SpringBoot热部署</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">是在发现代码有更改之后，重新启动应用，但是速度比手动停止后再启动更快。其深层原理是使</span><br><span class="line">用了两个ClassLoader，一个Classloader加载那些不会改变的类(第三方Jar包),另一个ClassLoa</span><br><span class="line">der加载会更改的类，称为restart ClassLoader,这样在有代码更改的时候，原来的restart</span><br><span class="line">ClassLoader被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。</span><br><span class="line">即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机）</span><br></pre></td></tr></table></figure><h3 id="IDEA开启SpringBoot热启动"><a href="#IDEA开启SpringBoot热启动" class="headerlink" title="IDEA开启SpringBoot热启动"></a>IDEA开启SpringBoot热启动</h3><h4 id="一、开启idea自动make功能"><a href="#一、开启idea自动make功能" class="headerlink" title="一、开启idea自动make功能"></a>一、开启idea自动make功能</h4><p>1、CTRL + SHIFT + A –&gt; 查找make project automatically –&gt; 选中</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/180202/5D2jHikmkd.png?imageslim" alt="mark"></p><p>2、CTRL + SHIFT + A –&gt; 查找Registry –&gt; 找到并勾选compiler.automake.allow.when.app.running <img src="http://ozaomob5f.bkt.clouddn.com/images/180202/ECEEA18F3I.png?imageslim" alt="mark"></p><ol><li>最后重启idea</li></ol><h3 id="二、使用spring-boot-1-3开始有的热部署功能"><a href="#二、使用spring-boot-1-3开始有的热部署功能" class="headerlink" title="二、使用spring-boot-1.3开始有的热部署功能"></a>二、使用spring-boot-1.3开始有的热部署功能</h3><h4 id="1、加maven依赖"><a href="#1、加maven依赖" class="headerlink" title="1、加maven依赖"></a>1、加maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、开启热部署"><a href="#2、开启热部署" class="headerlink" title="2、开启热部署"></a>2、开启热部署</h4><p>复制代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span>//该配置必须</span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot热部署&quot;&gt;&lt;a href=&quot;#SpringBoot热部署&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot热部署&quot;&gt;&lt;/a&gt;SpringBoot热部署&lt;/h2&gt;&lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; cla
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://www.top.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis03</title>
    <link href="http://www.top.com/2018/03/21/Mybatis03/"/>
    <id>http://www.top.com/2018/03/21/Mybatis03/</id>
    <published>2018-03-21T06:27:57.000Z</published>
    <updated>2018-10-12T11:37:21.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态的sql"><a href="#动态的sql" class="headerlink" title="动态的sql"></a>动态的sql</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        sql: 定义sql片段,抽取公共的sql</span></span><br><span class="line"><span class="comment">        id: 定义sql片段的唯一标识</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userSqlWhere"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"user.sex !=null and user.sex !='' "</span>&gt;</span></span><br><span class="line"> sex = #&#123;user.sex&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"user.username !=null and user.username !=''  "</span>&gt;</span></span><br><span class="line">and username like "%"#&#123;user.username&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询姓张的用户,性别为男 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">不使用where标签</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;select id="findUserWithSexAndUsername" parameterType="QueryVo" resultType="user"&gt;</span></span><br><span class="line"><span class="comment">select * from user </span></span><br><span class="line"><span class="comment">where 1=1</span></span><br><span class="line"><span class="comment">&lt;if test="user.sex !=null and user.sex !='' "&gt;</span></span><br><span class="line"><span class="comment">sex=#&#123;user.sex&#125; </span></span><br><span class="line"><span class="comment">&lt;/if&gt;</span></span><br><span class="line"><span class="comment">&lt;if test="user.username !=null and user.username !=''  "&gt;</span></span><br><span class="line"><span class="comment">and username like "%"#&#123;user.username&#125;"%"</span></span><br><span class="line"><span class="comment">&lt;/if&gt; </span></span><br><span class="line"><span class="comment">&lt;/select&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">使用where标签</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithSexAndUsername"</span> <span class="attr">parameterType</span>=<span class="string">"QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user </span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"user.sex !=null and user.sex !='' "</span>&gt;</span></span><br><span class="line"> sex = #&#123;user.sex&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"user.username !=null and user.username !=''  "</span>&gt;</span></span><br><span class="line">and username like "%"#&#123;user.username&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 查询性别为男,姓张的用户的总条数</span></span><br><span class="line"><span class="comment"> where标签 :自动生成where条件,不需要的时候自动去掉and</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithCount"</span> <span class="attr">parameterType</span>=<span class="string">"QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line"> select count(1) from user</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">include: 引入sql片段</span></span><br><span class="line"><span class="comment">id: 通过id引入sql片段</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userSqlWhere"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 需求: </span></span><br><span class="line"><span class="comment">  向sql传递数组或List，mybatis使用foreach解析，</span></span><br><span class="line"><span class="comment">  如下：</span></span><br><span class="line"><span class="comment">  SELECT * FROM USER  WHERE id= 24 OR id =25 OR id =39;</span></span><br><span class="line"><span class="comment">SELECT * FROM USER  WHERE id IN (24,25,39);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">SELECT * FROM USERS WHERE username LIKE '%张%' AND (id =10 OR id =89 OR id=16)</span></span><br><span class="line"><span class="comment">SELECT * FROM USERS WHERE username LIKE '%张%'  id IN (10,89,16)</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithListOr"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!= null and ids.size &gt; 0"</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">     foreach:循环遍历标签,此时foreach用来循环遍历queryVo里面的ids集合</span></span><br><span class="line"><span class="comment">     item:临时遍量,把每次获取的值存储在item中</span></span><br><span class="line"><span class="comment">     open:以什么开始,循环以什么开始</span></span><br><span class="line"><span class="comment">     separator:循环的间隔符号</span></span><br><span class="line"><span class="comment">     close:循环以什么结束</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span>  <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">"OR"</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">     id=#&#123;id&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">&lt;!--  SELECT * FROM USER  WHERE id IN (24,25,39); --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithListIn"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    SELECT * FROM user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ids!= null and ids.size &gt; 0"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span>  <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"and id in("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">     #&#123;id&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态的sql&quot;&gt;&lt;a href=&quot;#动态的sql&quot; class=&quot;headerlink&quot; title=&quot;动态的sql&quot;&gt;&lt;/a&gt;动态的sql&lt;/h1&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://www.top.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis02</title>
    <link href="http://www.top.com/2018/03/05/Mybatis02/"/>
    <id>http://www.top.com/2018/03/05/Mybatis02/</id>
    <published>2018-03-05T03:14:21.000Z</published>
    <updated>2018-10-12T11:37:21.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mybatis参数传递"><a href="#Mybatis参数传递" class="headerlink" title="Mybatis参数传递"></a>Mybatis参数传递</h2><hr><h3 id="1-传递简单类型"><a href="#1-传递简单类型" class="headerlink" title="1.传递简单类型"></a>1.传递简单类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据id查询 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithID"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据用户名模糊查询  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithLikeUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where username like "%"#&#123;username&#125;"%"</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据用户名模糊查询  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithLikeUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span></span><br><span class="line">select * from user where username like "%"#&#123;username&#125;"%"</span><br><span class="line">// 最好不要使用 *  来查询 </span><br><span class="line">select * from  user where username like concat('%',#&#123;username&#125;,'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-传递多个参数类型-不同类型时"><a href="#2-传递多个参数类型-不同类型时" class="headerlink" title="2.传递多个参数类型,不同类型时"></a>2.传递多个参数类型,不同类型时</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Param("page") Integer page</span><br><span class="line"></span><br><span class="line">@Param("pageSize") Integer pageSize</span><br><span class="line"></span><br><span class="line">@Param("username") String  username</span><br></pre></td></tr></table></figure><h3 id="3-传递pojo对象"><a href="#3-传递pojo对象" class="headerlink" title="3.传递pojo对象"></a>3.传递pojo对象</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser2"</span> <span class="attr">parameterType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">selectKey:查询用户主键,保存时候查询</span></span><br><span class="line"><span class="comment">keyProperty:查询结果映射主键的名称</span></span><br><span class="line"><span class="comment">order:主键生成策略,主键是sql语句执行后生成的</span></span><br><span class="line"><span class="comment">resultType:指定返回的类型</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-传递pojo包装对象"><a href="#4-传递pojo包装对象" class="headerlink" title="4.传递pojo包装对象"></a>4.传递pojo包装对象</h3><p>开发中通过pojo传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。Pojo类中包含pojo。</p><p>需求：根据用户名查询用户信息，查询条件放到QueryVo的user属性中</p><p>POJO类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    使用包装类型查询用户使用ognl从对象中取属性值，</span></span><br><span class="line"><span class="comment">    如果是包装对象可以使用.操作符来取内容部的属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByQueryVo"</span> <span class="attr">parameterType</span>=<span class="string">"queryvo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT * FROM user where username like '%$&#123;user.username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis返回参数"><a href="#Mybatis返回参数" class="headerlink" title="Mybatis返回参数"></a>Mybatis返回参数</h2><h3 id="1-resultType"><a href="#1-resultType" class="headerlink" title="1. resultType"></a>1. resultType</h3><h4 id="1-1-输出简单类型——resultType"><a href="#1-1-输出简单类型——resultType" class="headerlink" title="1.1 输出简单类型——resultType"></a>1.1 输出简单类型——resultType</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithCount"</span> <span class="attr">parameterType</span>=<span class="string">"QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line"> select count(1) from user</span><br><span class="line"> where sex = #&#123;user.sex&#125;</span><br><span class="line"> and username  like  "%"#&#123;user.username&#125;"%" </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意使用 concat('%',#&#123;...&#125;,'%')  --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithCount"</span> <span class="attr">parameterType</span>=<span class="string">"QueryVo"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line"> select count(1) from user</span><br><span class="line"> where sex = #&#123;user.sex&#125;</span><br><span class="line"> and username  like  concat('%',#&#123;user.username&#125;,'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-输出POJO类型——resultType"><a href="#1-2-输出POJO类型——resultType" class="headerlink" title="1.2 输出POJO类型——resultType"></a>1.2 输出POJO类型——resultType</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需求:查询订单,关联查询用户,实现一对一关联查询,使用resultType进行关系映射 --&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderswithUserOneToOne"</span>     <span class="attr">resultType</span>=<span class="string">"OrderCustomer"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">orders.id,</span><br><span class="line">orders.user_id userId,</span><br><span class="line">orders.number,</span><br><span class="line">orders.createtime createTime,</span><br><span class="line">orders.note,</span><br><span class="line">user.*</span><br><span class="line">FROM orders,USER </span><br><span class="line">WHERE orders.user_id = user.id;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-输出POJO类型——-输出pojo列表"><a href="#1-3-输出POJO类型——-输出pojo列表" class="headerlink" title="1.3 输出POJO类型——-输出pojo列表"></a>1.3 输出POJO类型——-输出pojo列表</h4><p>需求:查询订单,关联查询用户,实现一对一关联查询,使用resultType进行关系映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.OrdersMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求:查询订单,关联查询用户,实现一对一关联查询,使用resultType进行关系映射</span></span><br><span class="line"><span class="comment"> --&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderswithUserOneToOne"</span>  <span class="attr">resultType</span>=<span class="string">"OrderCustomer"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">orders.id,</span><br><span class="line">orders.user_id userId,</span><br><span class="line">orders.number,</span><br><span class="line">orders.createtime createTime,</span><br><span class="line">orders.note,</span><br><span class="line">user.*</span><br><span class="line">FROM orders,USER </span><br><span class="line">WHERE orders.user_id = user.id;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> 定义map关系映射</span></span><br><span class="line"><span class="comment"> resultMap: 定义查询列名和javabean属性名称一一对应关系映射标签</span></span><br><span class="line"><span class="comment"> type:查询结果返回值类型</span></span><br><span class="line"><span class="comment"> id:resultMap的唯一</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"orders"</span> <span class="attr">id</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> id:定义主键映射关系</span></span><br><span class="line"><span class="comment"> column:查询列表</span></span><br><span class="line"><span class="comment"> property:javabean属性名称</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  result :定义普通属性的关系映射</span></span><br><span class="line"><span class="comment">  column :查询列名</span></span><br><span class="line"><span class="comment">  property:javabean属性名称</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span>  <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span>  <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span>  <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span>  <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  association:用户描述一对一关系映射属性</span></span><br><span class="line"><span class="comment">  property: 指定映射的属性</span></span><br><span class="line"><span class="comment">  javaType: 指定映射属性类型</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求:查询订单,关联查询用户,实现一对一关联查询,使用resultMap进行关系映射</span></span><br><span class="line"><span class="comment"> --&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findOrderswithUserOneToOneMap"</span>  <span class="attr">resultMap</span>=<span class="string">"orderMap"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM orders,user </span><br><span class="line">WHERE orders.user_id = user.id;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-ResultMap"><a href="#2-ResultMap" class="headerlink" title="2.ResultMap"></a>2.ResultMap</h3><h4 id="2-1-输出POJO类型"><a href="#2-1-输出POJO类型" class="headerlink" title="2.1 输出POJO类型"></a>2.1 输出POJO类型</h4><p>需求: 查询用户关联查询订单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.dao.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求:查询用户关联查询订单</span></span><br><span class="line"><span class="comment">只能使用resultMap进行关系映射,不能使用ResultType</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 定义关系映射的Map --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"user"</span> <span class="attr">id</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 一个用户对应多个订单 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  collection:定义一对多的关系映射</span></span><br><span class="line"><span class="comment">  property:表示映射user中的那个属性</span></span><br><span class="line"><span class="comment">  ofType:指定映射对象最终类型</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"oList"</span> <span class="attr">ofType</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"oid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span>  <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"number"</span>  <span class="attr">property</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createtime"</span>  <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"note"</span>  <span class="attr">property</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   </span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserWithOrders"</span> <span class="attr">resultMap</span>=<span class="string">"userMap"</span>&gt;</span></span><br><span class="line">  SELECT </span><br><span class="line">  user.*,</span><br><span class="line">  orders.id oid ,</span><br><span class="line">  orders.user_id,</span><br><span class="line">  orders.number,</span><br><span class="line">  orders.createtime,</span><br><span class="line">  orders.user_id</span><br><span class="line">  FROM USER ,orders</span><br><span class="line">  WHERE user.id = orders.user_id;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"><span class="comment">//一个用户对应多个订单</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Orders&gt; oList;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Orders类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orders</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> Integer userId;</span><br><span class="line"><span class="keyword">private</span> String number;</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="keyword">private</span> String note;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Mybatis参数传递&quot;&gt;&lt;a href=&quot;#Mybatis参数传递&quot; class=&quot;headerlink&quot; title=&quot;Mybatis参数传递&quot;&gt;&lt;/a&gt;Mybatis参数传递&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-传递简单类型&quot;&gt;&lt;a href=&quot;#1-传递
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://www.top.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis01</title>
    <link href="http://www.top.com/2018/02/05/Mybatis01/"/>
    <id>http://www.top.com/2018/02/05/Mybatis01/</id>
    <published>2018-02-05T03:14:21.000Z</published>
    <updated>2018-10-12T11:37:21.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Mybatis中-select"><a href="#1-Mybatis中-select" class="headerlink" title="1.Mybatis中 select"></a>1.Mybatis中 select</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">"selectByChannelCode"</span> resultType=<span class="string">"com.zhongfl.tiejun.api.channel.model.ChannelVisitDetail"</span>&gt;        </span><br><span class="line">    SELECT</span><br><span class="line">    &lt;include refid=<span class="string">"Base_Column_List"</span>/&gt;</span><br><span class="line">    FROM  channel_visit_detail</span><br><span class="line">    WHERE   channel_code = #&#123;channelCode&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Mybatis中-insert"><a href="#2-Mybatis中-insert" class="headerlink" title="2. Mybatis中 insert"></a>2. Mybatis中 insert</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">"insert"</span> parameterType=<span class="string">"com.zhongfl.tiejun.api.channel.model.ChannelOperationLog"</span>&gt;</span><br><span class="line">    insert into channel_operationlog_log</span><br><span class="line">    &lt;trim prefix=<span class="string">"("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"channelId != null"</span>&gt;</span><br><span class="line">        channel_id,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"operType != null"</span>&gt;</span><br><span class="line">        oper_type,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"sourceLevel != null"</span>&gt;</span><br><span class="line">        source_level,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"targetLevel != null"</span>&gt;</span><br><span class="line">        target_level,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"remark != null"</span>&gt;</span><br><span class="line">        remark,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"modifiedBy != null"</span>&gt;</span><br><span class="line">        modified_by,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">        oper_time,</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    &lt;trim prefix=<span class="string">"values ("</span> suffix=<span class="string">")"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"channelId != null"</span>&gt;</span><br><span class="line">        #&#123;channelId&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"operType != null"</span>&gt;</span><br><span class="line">        #&#123;operType&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"sourceLevel != null"</span>&gt;</span><br><span class="line">        #&#123;sourceLevel&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"targetLevel != null"</span>&gt;</span><br><span class="line">        #&#123;targetLevel&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"remark != null"</span>&gt;</span><br><span class="line">        #&#123;remark&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">      &lt;<span class="keyword">if</span> test=<span class="string">"modifiedBy != null"</span>&gt;</span><br><span class="line">        #&#123;modifiedBy&#125;,</span><br><span class="line">      &lt;/if&gt;</span><br><span class="line">        now(),</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">  &lt;/insert&gt;</span><br></pre></td></tr></table></figure><h2 id="3-注意模糊查询-concat-‘-’-custName-’-’-的使用"><a href="#3-注意模糊查询-concat-‘-’-custName-’-’-的使用" class="headerlink" title="3.注意模糊查询 concat(‘%’,#{custName},’%’)的使用"></a>3.注意模糊查询 concat(‘%’,#{custName},’%’)的使用</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 根据分页条件查询 客户信息 --&gt;</span><br><span class="line">    &lt;select id=<span class="string">"findByConditions"</span></span><br><span class="line">            parameterType=<span class="string">"com.example.demo.domain.QueryVo"</span></span><br><span class="line">            resultType=<span class="string">"com.example.demo.domain.Customer"</span>&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        a.cust_id custId,</span><br><span class="line">        a.cust_createtime custCreatetime,</span><br><span class="line">        a.cust_linkman custLinkman,</span><br><span class="line">        a.cust_address custAddress,</span><br><span class="line">        a.cust_name custName,</span><br><span class="line">        b.dict_item_name custSource,</span><br><span class="line">        c.dict_item_name custIndustry,</span><br><span class="line">        d.dict_item_name custLevel,</span><br><span class="line">        a.cust_phone custPhone,</span><br><span class="line">        a.cust_mobile custMobile</span><br><span class="line">        FROM customer a ,base_dict b ,base_dict c , base_dict d</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            a.cust_source = b.dict_id</span><br><span class="line">            AND a.cust_industry= c.dict_id</span><br><span class="line">            AND a.cust_level = d.dict_id</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"custName != null and custName != '' "</span>&gt;</span><br><span class="line">                AND a.<span class="function">cust_name LIKE <span class="title">concat</span><span class="params">(<span class="string">'%'</span>,#&#123;custName&#125;,<span class="string">'%'</span>)</span></span></span><br><span class="line"><span class="function">            &lt;/<span class="keyword">if</span>&gt;</span></span><br><span class="line"><span class="function">            &lt;<span class="keyword">if</span> test</span>=<span class="string">"custSource != null and custSource != '' "</span>&gt;</span><br><span class="line">                AND a.cust_source = #&#123;custSource&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"custIndustry != null and custIndustry != '' "</span>&gt;</span><br><span class="line">                AND a.cust_industry = #&#123;custIndustry&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">"custLevel != null  and custLevel != '' "</span>&gt;</span><br><span class="line">                AND a.cust_level = #&#123;custLevel&#125;</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">"startNum != null "</span>&gt;</span><br><span class="line">            LIMIT #&#123;page&#125;,#&#123;pageSize&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Mybatis中-select&quot;&gt;&lt;a href=&quot;#1-Mybatis中-select&quot; class=&quot;headerlink&quot; title=&quot;1.Mybatis中 select&quot;&gt;&lt;/a&gt;1.Mybatis中 select&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="http://www.top.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>oracle04</title>
    <link href="http://www.top.com/2018/02/05/oracle04/"/>
    <id>http://www.top.com/2018/02/05/oracle04/</id>
    <published>2018-02-05T02:57:41.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle第四天"><a href="#Oracle第四天" class="headerlink" title="Oracle第四天"></a>Oracle第四天</h3><h4 id="PL-SQL编程语言"><a href="#PL-SQL编程语言" class="headerlink" title="PL/SQL编程语言"></a>PL/SQL编程语言</h4><h5 id="什么是pl-sql语言"><a href="#什么是pl-sql语言" class="headerlink" title="什么是pl/sql语言"></a>什么是pl/sql语言</h5><p>​    PLSQL是Oracle对sql语言的过程化扩展,指在sql命令语言中增加了过程处理语句(如分支,循环等),使</p><p>sql语言具有过程处理能力. 面向过程</p><h5 id="PL-SQL的语法"><a href="#PL-SQL的语法" class="headerlink" title="PL/SQL的语法"></a>PL/SQL的语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[declare]</span><br><span class="line">--声明   变量（普通变量、引用型变量、记录型变量） 常量  异常  游标</span><br><span class="line">begin </span><br><span class="line">-- 语句序列 (DML语句)</span><br><span class="line">[exception]</span><br><span class="line">-- 捕获异常</span><br><span class="line">end;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h5 id="常量和变量的定义"><a href="#常量和变量的定义" class="headerlink" title="常量和变量的定义"></a>常量和变量的定义</h5><p>在sql中用 into来赋值</p><p>说明变量(char,varchar2,date,number,boolean,long)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">declare</span><br><span class="line">    v_name varchar2(30) := &apos;Tom&apos; ;  --  := 相当于java中的 =, = 相当于java中的== </span><br><span class="line">    v_age number(9) :=1 ; </span><br><span class="line">    v_gender constant number(1) := 1;  -- 常量</span><br><span class="line">    v_sal emp.sal%type := 1000;    -- 引用型  </span><br><span class="line">    v_row  emp%rowtype ;   -- 记录型   一行数据</span><br><span class="line">begin </span><br><span class="line">    v_name:=&apos;JERRY&apos;; </span><br><span class="line">    --v_gender:=&apos;0&apos;;   -- 常量不可改变 报错</span><br><span class="line"></span><br><span class="line">     select ename,sal into v_name,v_sal from emp where empno=7369;</span><br><span class="line">     select * into v_row from emp where empno=7369;</span><br><span class="line">   --dbms_output.put_line(v_name||&apos;--&apos;||v_sal||&apos;——&apos;||v_gender);</span><br><span class="line">     dbms_output.put_line(v_row.ename||&apos;--&apos;||v_row.sal||&apos;——&apos;||v_row.job);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="IF语句"><a href="#IF语句" class="headerlink" title="IF语句"></a>IF语句</h5><p>语法一：<br>​    if  条件  then<br>          逻辑处理<br>​    end if;</p><p>语法二：<br>​    if 条件 then<br>          逻辑处理<br>     else<br>​         逻辑处理<br>​    end if;</p><p>语法三：<br>​    if 条件 then<br>          逻辑处理<br>​    elsif 条件<br>          逻辑处理<br>​         …….   </p><p>​     else<br>         逻辑处理<br>​    end if;  </p><p>if语句 : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- 输出我是1</span><br><span class="line">declare </span><br><span class="line">   pnum number := &amp;num;</span><br><span class="line">begin</span><br><span class="line">   if pnum = 1 then </span><br><span class="line">  dbms_output.put_line(&apos;我是1&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 条件判断</span><br><span class="line">declare </span><br><span class="line">  mynum number := &amp;num;</span><br><span class="line">begin</span><br><span class="line">  if  mynum = 1 then </span><br><span class="line">   dbms_output.put_line(&apos;我是1&apos;);</span><br><span class="line">  else</span><br><span class="line">   dbms_output.put_line(&apos;我不是1&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 未成年人,成年人,老年人</span><br><span class="line">declare </span><br><span class="line">   age number(3) :=&amp;nums;   --  &amp;表示指向一个地址,弹出一个输入框</span><br><span class="line">begin </span><br><span class="line">  if age &lt; 18 then</span><br><span class="line">   dbms_output.put_line(&apos;未成年&apos;);</span><br><span class="line">  elsif age &gt;= 18 and  age &lt;= 60 then</span><br><span class="line">    dbms_output.put_line(&apos;中年人&apos;);</span><br><span class="line">  else</span><br><span class="line">    dbms_output.put_line(&apos;老人&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><h6 id="1-语法1-无条件循环-有条件退出"><a href="#1-语法1-无条件循环-有条件退出" class="headerlink" title="1.语法1:无条件循环,有条件退出"></a>1.语法1:无条件循环,有条件退出</h6><p>​    loop </p><p>​    end  loop;</p><h6 id="2-语法2-条件循环while"><a href="#2-语法2-条件循环while" class="headerlink" title="2.语法2 :条件循环while"></a>2.语法2 :条件循环while</h6><p>​    while 条件<br>           loop<br>​<br>​             end loop;</p><h6 id="3-语法3-条件循环for"><a href="#3-语法3-条件循环for" class="headerlink" title="3.语法3:条件循环for"></a>3.语法3:条件循环for</h6><p>for 变量名 in 起始值..终止值<br>   loop</p><p>   end loop;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-- 语法1:无条件循环,有条件退出</span><br><span class="line">--输出1到100个数</span><br><span class="line">declare </span><br><span class="line">   v_num number(9) := 1;</span><br><span class="line">begin</span><br><span class="line">   loop </span><br><span class="line">     --if v_num &gt; 100 then</span><br><span class="line">     --  exit;</span><br><span class="line">     --end if;</span><br><span class="line">     exit when v_num &gt;100;</span><br><span class="line">       dbms_output.put_line(v_num);</span><br><span class="line">       v_num :=v_num +1 ;  -- 不支持 ++  -- </span><br><span class="line">   end loop;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">语法2 :有条件循环 条件循环while</span><br><span class="line">-- 输出1到100个数</span><br><span class="line">declare</span><br><span class="line">  v_num number(9) := 1;</span><br><span class="line">begin</span><br><span class="line">  while v_num &lt;= 100</span><br><span class="line">  loop</span><br><span class="line">     dbms_output.put_line(v_num);</span><br><span class="line">     v_num :=v_num +1 ;</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法3:  条件循环for</span><br><span class="line">declare</span><br><span class="line">  v_num number(9) := 1;</span><br><span class="line">begin</span><br><span class="line">  for v_num in 1..100</span><br><span class="line">  loop</span><br><span class="line">     dbms_output.put_line(v_num);</span><br><span class="line">  end loop;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="异常-exception"><a href="#异常-exception" class="headerlink" title="异常 exception"></a>异常 exception</h5><p>异常的作用: 为了提高语言的容错性和健壮性</p><p>no_data_found 没有找到数据</p><p>too_many_rows  select….into语句匹配多个行</p><p>zero_divide  除数为0</p><p>value_error 算术或转换错误</p><p>timeout_on_resourse 在等待资源时发生超时__</p><p><strong>命名的系统异常</strong> </p><table><thead><tr><th><strong>命名的系统异常</strong></th><th><strong>产生原因</strong></th></tr></thead><tbody><tr><td>ACCESS_INTO_NULL</td><td>未定义对象</td></tr><tr><td>CASE_NOT_FOUND</td><td>CASE 中若未包含相应的 WHEN ，并且没有设置 ELSE 时</td></tr><tr><td>COLLECTION_IS_NULL</td><td>集合元素未初始化</td></tr><tr><td>CURSER_ALREADY_OPEN</td><td>游标已经打开</td></tr><tr><td>DUP_VAL_ON_INDEX</td><td>唯一索引对应的列上有重复的值</td></tr><tr><td>INVALID_CURSOR</td><td>在不合法的游标上进行操作</td></tr><tr><td>INVALID_NUMBER</td><td>内嵌的 SQL 语句不能将字符转换为数字</td></tr><tr><td><strong>NO_DATA_FOUND</strong></td><td>使用 select into 未返回行，或应用索引表未初始化的元素时</td></tr><tr><td><strong>TOO_MANY_ROWS</strong></td><td>执行 select into 时，结果集超过一行</td></tr><tr><td><strong>ZERO_DIVIDE</strong></td><td>除数为 0</td></tr><tr><td>SUBSCRIPT_BEYOND_COUNT</td><td>元素下标超过嵌套表或 VARRAY 的最大值</td></tr><tr><td>SUBSCRIPT_OUTSIDE_LIMIT</td><td>使用嵌套表或 VARRAY 时，将下标指定为负数</td></tr><tr><td><strong>VALUE_ERROR</strong></td><td>赋值时，变量长度不足以容纳实际数据</td></tr><tr><td>LOGIN_DENIED</td><td>PL/SQL 应用程序连接到 oracle 数据库时，提供了不正确的用户名或密码</td></tr><tr><td>NOT_LOGGED_ON</td><td>PL/SQL 应用程序在没有连接 oralce 数据库的情况下访问数据</td></tr><tr><td>PROGRAM_ERROR</td><td>PL/SQL 内部问题，可能需要重装数据字典＆ pl./SQL 系统包</td></tr><tr><td>ROWTYPE_MISMATCH</td><td>宿主游标变量与 PL/SQL 游标变量的返回类型不兼容</td></tr><tr><td>SELF_IS_NULL</td><td>使用对象类型时，在 null 对象上调用对象方法</td></tr><tr><td>STORAGE_ERROR</td><td>运行 PL/SQL 时，超出内存空间</td></tr><tr><td>SYS_INVALID_ID</td><td>无效的 ROWID 字符串</td></tr><tr><td>TIMEOUT_ON_RESOURCE</td><td>Oracle 在等待资源时超时</td></tr></tbody></table><h6 id="预定义-异常"><a href="#预定义-异常" class="headerlink" title="预定义 异常"></a>预定义 异常</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">--预定义异常</span><br><span class="line">-- 案列 1:</span><br><span class="line">declare</span><br><span class="line"> v_num number(5);</span><br><span class="line">begin</span><br><span class="line">    --v_num:=10/0;  </span><br><span class="line">    v_num:=1000000;  </span><br><span class="line">   exception</span><br><span class="line">     --VALUE_ERROR</span><br><span class="line">     --ZERO_DIVIDE</span><br><span class="line">     when  others then</span><br><span class="line">     v_num:=0;  </span><br><span class="line">     dbms_output.put_line(v_num);   </span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案列 2:</span><br><span class="line">declare</span><br><span class="line"> v_num number;</span><br><span class="line">begin</span><br><span class="line">    v_num:=1/0;</span><br><span class="line">   exception</span><br><span class="line">     when ZERO_DIVIDE  then</span><br><span class="line">        dbms_output.put_line(&quot;除0异常!!&quot;); </span><br><span class="line">     when VALUE_ERROR  then  </span><br><span class="line">          dbms_output.put_line(&quot;数值转换错误!!&quot;); </span><br><span class="line">     when others  then</span><br><span class="line">        dbms_output.put_line(&quot;其他错误!!&quot;); </span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h6 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--自定义异常</span><br><span class="line"></span><br><span class="line">-- 输入一个年龄数据,大于150就抛出异常</span><br><span class="line">declare </span><br><span class="line">   v_age number(10) := &amp;nums;</span><br><span class="line">   exc_age exception;</span><br><span class="line">begin</span><br><span class="line">  if v_age &gt; 150 then</span><br><span class="line">      raise exc_age ; </span><br><span class="line">  end if;  </span><br><span class="line">  exception</span><br><span class="line">    when exc_age then </span><br><span class="line">     ---p1 错误代码    p2 错误信息</span><br><span class="line">     raise_application_error(-20001,&apos;捕获了异常&apos;);</span><br><span class="line">     --v_age:=150;</span><br><span class="line">     -- dbms_output.put_line(&apos;捕获了异常，年龄重置成了150&apos;);    </span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="游标-光标Cursor"><a href="#游标-光标Cursor" class="headerlink" title="游标(光标Cursor)"></a>游标(光标Cursor)</h5><p>概念: 就是用来接收多条数据的</p><p><code>需求:按员工的工种涨工资,总裁涨1000,经理涨800,其他人400</code></p><p>游标的声明语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cursor 游标名   is    sql查询语句 ;</span><br><span class="line">cursor  c1  is  select  ename  from  emp;    -- 查询多条记录</span><br></pre></td></tr></table></figure><h6 id="使用游标的语法"><a href="#使用游标的语法" class="headerlink" title="使用游标的语法:"></a>使用游标的语法:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">open  游标名称</span><br><span class="line">loop</span><br><span class="line">exit when 游标名称%notfound;</span><br><span class="line">fetch 游标名称  into 记录型变量;</span><br><span class="line">逻辑处理</span><br><span class="line">end loop;</span><br><span class="line">close 游标名称;</span><br></pre></td></tr></table></figure><h6 id="范列"><a href="#范列" class="headerlink" title="范列"></a>范列</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">-- 范列1: 使用游标方式输出emp中的员工编号和姓名</span><br><span class="line">declare</span><br><span class="line"> cursor cursor_emp is select * from emp;</span><br><span class="line"> v_row emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">   open   cursor_emp;    -- 打开游标,执行查询</span><br><span class="line">   loop</span><br><span class="line">     fetch cursor_emp into v_row;     -- 记录型变量  接收一行数据</span><br><span class="line">     exit when cursor_emp%notfound;   -- 取一行到变量中</span><br><span class="line">     dbms_output.put_line(v_row.ename||&apos;---&apos;||v_row.job); </span><br><span class="line">   end loop;</span><br><span class="line">  close cursor_emp;  -- 关闭游标</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 范列2: 查询20号和40号部门的所有人的name和job</span><br><span class="line">--游标传参数 </span><br><span class="line">declare </span><br><span class="line"> cursor cursor_emp(d1 number ,d2 number) is select * from emp where deptno =d1 or  deptno =d2;</span><br><span class="line"> v_row emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">  open cursor_emp(20,30);</span><br><span class="line">  loop</span><br><span class="line">    fetch  cursor_emp into  v_row;</span><br><span class="line">    exit when cursor_emp%notfound ;</span><br><span class="line">    dbms_output.put_line(v_row.ename||&apos;*********&apos;||v_row.job);</span><br><span class="line">  end loop;</span><br><span class="line">  close cursor_emp;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">declare </span><br><span class="line"> cursor cursor_emp(d1 number ,d2 number) is select * from emp where deptno in (d1,d2);</span><br><span class="line"> v_row emp%rowtype;</span><br><span class="line">begin</span><br><span class="line">  open cursor_emp(20,30);</span><br><span class="line">  loop</span><br><span class="line">    fetch  cursor_emp into  v_row;</span><br><span class="line">    exit when cursor_emp%notfound ;</span><br><span class="line">    dbms_output.put_line(v_row.ename||&apos;*********&apos;||v_row.job);</span><br><span class="line">  end loop;</span><br><span class="line">  close cursor_emp;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 范列3: 写一段PL/SQL程序,为部门号为10员工涨工资</span><br><span class="line">select * from emp where deptno = 10;</span><br><span class="line">declare </span><br><span class="line">   cursor cursor_emp(d1 emp.deptno%type)  is select empno from emp where deptno = d1;</span><br><span class="line">   v_row emp.empno%type;</span><br><span class="line">begin</span><br><span class="line">   open cursor_emp(10);  -- 开始查询</span><br><span class="line">   loop</span><br><span class="line">     fetch cursor_emp into v_row;</span><br><span class="line">     exit when cursor_emp%notfound;</span><br><span class="line">     update emp set sal = sal +100 where empno = v_row; </span><br><span class="line">   end loop;</span><br><span class="line">   close cursor_emp;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念:"></a>概念:</h5><p>​    存储过程(Stroed Procedure)是在大型数据库系统中,一组为了完成特定功能的sql语句集,经编译后,存储在数据库中,用户通过指定存储过程的名字并给出参数(如有参数)来执行它.存储过程是数据库中的一个重要对象,任何一个设计良好的数据库应用程序都应该用到存储过程.</p><p>简单说: 就是一段被命名化的plsql   <strong>预编译到数据库中</strong>  用户指定存储过程的名字并给出参数(如有参数)来执行它</p><h5 id="创建存储过程的语法"><a href="#创建存储过程的语法" class="headerlink" title="创建存储过程的语法:"></a>创建存储过程的语法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create [or replace]  procedure  存储过程名称([参数1 [in]/out 数据类型 ,[参数2 [in]/out 数据类型],...........)</span><br><span class="line">is|as -- 代替了declare 如果没有变量声明时不能省略</span><br><span class="line">begin</span><br><span class="line">   plsql子程序体</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="存储过程的使用"><a href="#存储过程的使用" class="headerlink" title="存储过程的使用"></a>存储过程的使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">--打印指定员工的年薪   </span><br><span class="line">-- 参数中的in 可以省略   out不能省略</span><br><span class="line">create or replace procedure pro_yealsal(empno1 number)</span><br><span class="line">is    -- 代替了declare</span><br><span class="line">  v_yearsal number(10,2);</span><br><span class="line">begin </span><br><span class="line">  select sal*12+nvl(comm,0) into v_yearsal from emp where empno =empno1;</span><br><span class="line">  dbms_output.put_line(&apos;年薪是：&apos;||v_yearsal);</span><br><span class="line">end;</span><br><span class="line">-- 调用方式1:</span><br><span class="line">call pro_yealsal(7369);</span><br><span class="line">-- 调用方式2:</span><br><span class="line">begin</span><br><span class="line">   pro_yealsal(7499);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 定义了  emp.empno%type  emp.sal%type</span><br><span class="line">create or replace procedure pro_yealsal(empno1  emp.empno%type)</span><br><span class="line">  is    -- 代替了declare</span><br><span class="line">    v_yearsal emp.sal%type;</span><br><span class="line">  begin </span><br><span class="line">    select sal*12+nvl(comm,0) into v_yearsal from emp where empno =empno1;</span><br><span class="line">    </span><br><span class="line">    dbms_output.put_line(&apos;年薪是：&apos;||v_yearsal);</span><br><span class="line">  end;</span><br><span class="line"> -- 调用方式1:</span><br><span class="line">  call pro_yealsal(7369);</span><br><span class="line">  -- 调用方式2:</span><br><span class="line">  begin</span><br><span class="line">     pro_yealsal(7499);</span><br><span class="line">  end;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">--使用out参数接收指定员工的年薪</span><br><span class="line">create or replace procedure pro_yealsal2(empno1 number,v_yearsal out number)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">  select sal*12+nvl(comm,0) into v_yearsal from emp where empno = empno1;       </span><br><span class="line">end;</span><br><span class="line">--使用带out类型参数的存储过程</span><br><span class="line">declare</span><br><span class="line">  yearsal number(10,2); </span><br><span class="line">begin </span><br><span class="line">  pro_yealsal2(7369,yearsal);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是：&apos;||yearsal);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="存储函数"><a href="#存储函数" class="headerlink" title="存储函数"></a>存储函数</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create or replace function 存储函数的名称(name in type,name out type .......)</span><br><span class="line">return  数据类型</span><br><span class="line">is|as </span><br><span class="line">begin </span><br><span class="line">return 具体的值;</span><br><span class="line">end[函数名称];</span><br></pre></td></tr></table></figure><h5 id="存储函数的使用"><a href="#存储函数的使用" class="headerlink" title="存储函数的使用"></a>存储函数的使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--  返回指定员工的年薪 empno</span><br><span class="line">create or replace function  get_yearsal(empno3 number)</span><br><span class="line">return number</span><br><span class="line">is</span><br><span class="line">   yearsal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  select  sal*12 +nvl(comm,0) into  yearsal from emp where empno = empno3;</span><br><span class="line">  return yearsal;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--使用存储函数</span><br><span class="line">declare</span><br><span class="line">  year_sal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  year_sal := get_yearsal(7369);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是&apos;||year_sal);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line( get_yearsal(7369) );</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="存储函数和存储过程的区别"><a href="#存储函数和存储过程的区别" class="headerlink" title="==存储函数和存储过程的区别=="></a>==存储函数和存储过程的区别==</h5><p>1.语法不通</p><p>2.使用场景不通</p><p>   存储函数一般多被存储过程调用</p><p>   存储过程多用于项目之间的数据访问</p><p>3.sql中可以直接使用存储函数,但是不能直接使用存储过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- sql中可以直接使用存储函数</span><br><span class="line">select ename,func_yealsal(empno)  from emp;</span><br></pre></td></tr></table></figure><p>存储过程和存储函数的区别在于函数可以有一个返回值;而过程没有返回值,但过程和函数都可以通过out指定一个或多个输出参数.我们可以在利用out参数,在过程和函数中实现多个返回值.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- out参数类型是游标的存储过程</span><br><span class="line">-- 场景：游标中放的是指定部门的员工</span><br><span class="line">create or replace procedure proc_cursor(d1 number,cursor_emp out sys_refcursor)</span><br><span class="line">is </span><br><span class="line">begin</span><br><span class="line">      open cursor_emp from select * form emp where deptno = d1;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h4 id="Java程序调用存储过程"><a href="#Java程序调用存储过程" class="headerlink" title="Java程序调用存储过程"></a>Java程序调用存储过程</h4><h5 id="JDBC连接Oracle"><a href="#JDBC连接Oracle" class="headerlink" title="JDBC连接Oracle"></a>JDBC连接Oracle</h5><h6 id="1-java链接oracle的jar包"><a href="#1-java链接oracle的jar包" class="headerlink" title="1.java链接oracle的jar包"></a>1.java链接oracle的jar包</h6><p>​    可以在虚拟机的 C:\oracle\product\10.2.0\ db_1 \ jdbc\lib :   ojbbc14.jar</p><h6 id="2-数据库的连接"><a href="#2-数据库的连接" class="headerlink" title="2.数据库的连接"></a>2.数据库的连接</h6><p>BaseDao.classs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载驱动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">String url=<span class="string">"jdbc:oracle:thin:@192.168.227.10:1521:orcl"</span>;</span><br><span class="line">String user=<span class="string">"heima_68"</span>;</span><br><span class="line">String password=<span class="string">"heima_68"</span>;</span><br><span class="line"><span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(ResultSet rs,Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(conn!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpDao.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出指定部门的员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> deptno</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmp</span><span class="params">(Long deptno)</span></span>&#123;</span><br><span class="line">Connection conn =<span class="keyword">null</span>;</span><br><span class="line">PreparedStatement pst = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">String sql = <span class="string">"select * from emp where deptno=?"</span>;</span><br><span class="line">pst =conn.prepareStatement(sql);</span><br><span class="line">pst.setLong(<span class="number">1</span>, deptno);</span><br><span class="line">rs  = pst.executeQuery();</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">System.out.println(rs.getLong(<span class="number">1</span>) + <span class="string">"---"</span> + rs.getString(<span class="string">"ENAME"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-测试连接"><a href="#3-测试连接" class="headerlink" title="3.测试连接"></a>3.测试连接</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">EmpDao.getEmp(<span class="number">10L</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Java调用存储过程"><a href="#Java调用存储过程" class="headerlink" title="Java调用存储过程"></a>Java调用存储过程</h5><h6 id="1-定义好的存储过程"><a href="#1-定义好的存储过程" class="headerlink" title="1.定义好的存储过程:"></a>1.定义好的存储过程:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--使用out参数接收指定员工的年薪</span><br><span class="line">create or replace procedure pro_yealsal2(empno1 number,v_yearsal out number)</span><br><span class="line">is</span><br><span class="line">begin</span><br><span class="line">  select sal*12+nvl(comm,0) into v_yearsal from emp where empno = empno1;       </span><br><span class="line">end;</span><br><span class="line">--使用带out类型参数的存储过程</span><br><span class="line">declare</span><br><span class="line">  yearsal number(10,2); </span><br><span class="line">begin </span><br><span class="line">  pro_yealsal2(7369,yearsal);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是：&apos;||yearsal);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">declare</span><br><span class="line">v_sal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  pro_yearsal(7369,v_sal);</span><br><span class="line">  dbms_output.put_line(v_sal);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h6 id="2-java调用"><a href="#2-java调用" class="headerlink" title="2.java调用"></a>2.java调用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleTypes;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcedureDao</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取指定部门员工的年薪</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储函数使用</span></span><br><span class="line"><span class="comment">    *  &#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储过程使用</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">getYearSal</span><span class="params">(Long deptno)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">CallableStatement cstm = <span class="keyword">null</span>;    <span class="comment">// CallableStatement用于执行 SQL 存储过程的接口</span></span><br><span class="line">Long yearSal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">cstm = conn.prepareCall(<span class="string">"call pro_yealsal2(?,?)"</span>); <span class="comment">// 调用存储过程 </span></span><br><span class="line">cstm.setLong(<span class="number">1</span>, deptno);</span><br><span class="line"><span class="comment">// 第二个 ? 是需要指定参数类型即可</span></span><br><span class="line">cstm.registerOutParameter(<span class="number">2</span>,OracleTypes.NUMBER);</span><br><span class="line">cstm.execute();</span><br><span class="line">yearSal = cstm.getLong(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> yearSal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//EmpDao.getEmp(10L);</span></span><br><span class="line">Long yearSal = ProcedureDao.getYearSal(<span class="number">7934L</span>);</span><br><span class="line">System.out.println(<span class="string">"年薪 :   "</span> + yearSal);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java程序调用存储函数"><a href="#Java程序调用存储函数" class="headerlink" title="Java程序调用存储函数"></a>Java程序调用存储函数</h4><h5 id="1-准备好的存储函数"><a href="#1-准备好的存储函数" class="headerlink" title="1.准备好的存储函数"></a>1.准备好的存储函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--  返回指定员工的年薪 empno</span><br><span class="line">create or replace function  get_yearsal(empno3 number)</span><br><span class="line">return number</span><br><span class="line">is</span><br><span class="line">   yearsal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  select  sal*12 +nvl(comm,0) into  yearsal from emp where empno = empno3;</span><br><span class="line">  return yearsal;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--使用存储函数</span><br><span class="line">declare</span><br><span class="line">  year_sal number(10,2);</span><br><span class="line">begin</span><br><span class="line">  year_sal := get_yearsal(7369);</span><br><span class="line">  dbms_output.put_line(&apos;年薪是&apos;||year_sal);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line( get_yearsal(7369) );</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="2-调用"><a href="#2-调用" class="headerlink" title="2.调用"></a>2.调用</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.itcast.dao;</span><br><span class="line">import java.sql.CallableStatement;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import oracle.jdbc.driver.OracleTypes;</span><br><span class="line">public class FunctionDao &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取指定部门员工的年薪</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储函数使用</span></span><br><span class="line"><span class="comment"> *&#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储过程使用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  存储函数:</span></span><br><span class="line"><span class="comment"> *  create or replace function  get_yearsal(empno3 number)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public static Long getYearSal(Long deptno)&#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">CallableStatement cstm = null;    // CallableStatement用于执行 SQL 存储过程的接口</span><br><span class="line">Long yearSal = null;</span><br><span class="line">try &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">cstm = conn.prepareCall("&#123;?=call get_yearsal(?)&#125;");</span><br><span class="line">cstm.setLong(2, deptno);</span><br><span class="line">cstm.registerOutParameter(1, OracleTypes.NUMBER);</span><br><span class="line">cstm.execute();</span><br><span class="line">yearSal = cstm.getLong(1);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return  yearSal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//EmpDao.getEmp(10L);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Long yearSal = ProcedureDao.getYearSal(7934L);</span></span><br><span class="line"><span class="comment">//System.out.println("年薪 :   " + yearSal);</span></span><br><span class="line"></span><br><span class="line">Long yearSal2 = FunctionDao.getYearSal(<span class="number">7934L</span>);</span><br><span class="line">System.out.println(<span class="string">"年薪 :   "</span> + yearSal2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Cursor.getEmp(10L);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java程序调用out类型游标-存储过程"><a href="#Java程序调用out类型游标-存储过程" class="headerlink" title="Java程序调用out类型游标 存储过程"></a>Java程序调用out类型游标 存储过程</h4><h5 id="1-创建游标类型的存储过程"><a href="#1-创建游标类型的存储过程" class="headerlink" title="1.创建游标类型的存储过程"></a>1.创建游标类型的存储过程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- out参数类型是 游标的存储过程</span><br><span class="line">-- 场景：游标中放的是指定部门的员工   deptno     sys_refcursor 系统引用型游标</span><br><span class="line">create or replace procedure proc_cursor(d1 number,cursor_emp out sys_refcursor)</span><br><span class="line">is </span><br><span class="line">begin</span><br><span class="line">     open cursor_emp for select * FROM  emp where deptno = d1;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><h5 id="2-调用-1"><a href="#2-调用-1" class="headerlink" title="2.调用"></a>2.调用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleCallableStatement;</span><br><span class="line"><span class="keyword">import</span> oracle.jdbc.driver.OracleTypes;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cursor</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取指定部门员工的年薪</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  &#123;?= call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储函数使用</span></span><br><span class="line"><span class="comment">   &#123;call &lt;procedure-name&gt;[(&lt;arg1&gt;,&lt;arg2&gt;, ...)]&#125;   // 给存储过程使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getEmp</span><span class="params">(Long deptno)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">CallableStatement cstm = <span class="keyword">null</span>;    <span class="comment">// CallableStatement用于执行 SQL 存储过程的接口</span></span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = BaseDao.getConn();</span><br><span class="line">cstm = conn.prepareCall(<span class="string">"call proc_cursor(?,?)"</span>); <span class="comment">// 调用存储过程 </span></span><br><span class="line">cstm.setLong(<span class="number">1</span>, deptno);</span><br><span class="line">cstm.registerOutParameter(<span class="number">2</span>,OracleTypes.CURSOR);</span><br><span class="line">cstm.execute();</span><br><span class="line">rs = ((OracleCallableStatement)cstm).getCursor(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">System.out.println(rs.getLong(<span class="string">"EMPNO"</span>)+<span class="string">"----"</span>+ rs.getString(<span class="string">"ENAME"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-测试-2"><a href="#3-测试-2" class="headerlink" title="3.测试"></a>3.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itcast.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//EmpDao.getEmp(10L);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Long yearSal = ProcedureDao.getYearSal(7934L);</span></span><br><span class="line"><span class="comment">//System.out.println("年薪 :   " + yearSal);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Long yearSal2 = FunctionDao.getYearSal(7934L);</span></span><br><span class="line"><span class="comment">//System.out.println("年薪 :   " + yearSal2);</span></span><br><span class="line"></span><br><span class="line">Cursor.getEmp(<span class="number">10L</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><h5 id="触发器的作用"><a href="#触发器的作用" class="headerlink" title="触发器的作用"></a>触发器的作用</h5><p>​    数据确认</p><p>​    实施复杂的安全型检查</p><p>​    做审计,跟踪表上所做的数据操作等</p><p>​    数据的备份和同步</p><p>当表中的数据发生改变时，触发了某些操作</p><h5 id="触发器的类型"><a href="#触发器的类型" class="headerlink" title="触发器的类型"></a>触发器的类型</h5><h6 id="语句级触发器"><a href="#语句级触发器" class="headerlink" title="语句级触发器"></a>语句级触发器</h6><p>​    在指定的操作之前或者之后执行一次,不管这条语句影响了多少行</p><h6 id="行级触发器"><a href="#行级触发器" class="headerlink" title="行级触发器"></a>行级触发器</h6><p>​    触发语句作用的每一条记录都被触发.在行级触发器中使用old 和 new 伪记录变量,识别值的状态</p><h6 id="触发器的使用"><a href="#触发器的使用" class="headerlink" title="触发器的使用"></a>触发器的使用</h6><h6 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法:"></a>1.语法:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">delete  insert update</span><br><span class="line">语法:</span><br><span class="line">create  or  replace   trigger  触发器名称</span><br><span class="line">before|after</span><br><span class="line">delete | insert | update </span><br><span class="line">on 表名</span><br><span class="line">[for each row]</span><br><span class="line"></span><br><span class="line">[declare]</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create  or replace trigger tri_emp</span><br><span class="line">after</span><br><span class="line">insert</span><br><span class="line">on emp</span><br><span class="line">--[for each row]</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&apos;新入职了一名员工&apos;);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">insert into emp(empno,deptno) values(1,10);</span><br></pre></td></tr></table></figure><h6 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用:"></a>2.使用:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">-- 案列一 :</span><br><span class="line">--假如&apos;2017-10-20&apos;系统维护，不能修改emp中的数据</span><br><span class="line">create or replace trigger tri_emp</span><br><span class="line">before </span><br><span class="line">delete or insert or update </span><br><span class="line">on emp</span><br><span class="line">--[for each row]</span><br><span class="line">declare </span><br><span class="line">  v_dateStr varchar2(20); </span><br><span class="line">begin</span><br><span class="line">  ----判断当天sysdate是否是&apos;2017-10-21&apos;</span><br><span class="line">  select to_char(sysdate,&apos;yyyy-mm-dd&apos;)  into v_dateStr  from dual;</span><br><span class="line">  if v_dateStr = &apos;2017-10-21&apos; then </span><br><span class="line">      raise_application_error(-20002,&apos;今天系统维护，不能修改emp中的数据&apos;);</span><br><span class="line">  end if;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">insert into emp(empno,deptno) values(2,10);</span><br><span class="line">update emp set ename=&apos;AAAA&apos; where empno =1 ;</span><br><span class="line">delete from emp where empno=1;</span><br><span class="line">select * from emp; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--案例二:</span><br><span class="line">---备份员工的工资数据</span><br><span class="line">--1.创建表</span><br><span class="line">create table emp_sal_log(</span><br><span class="line">    eid number(10) PRIMARY KEY ,</span><br><span class="line">    empno number(10),</span><br><span class="line">    sal0 number(10,2),</span><br><span class="line">    sal1 number(10,2),</span><br><span class="line">    logDate date</span><br><span class="line">)</span><br><span class="line">--2.创建序列</span><br><span class="line">create sequence seq_emp_sal_log;</span><br><span class="line">--3.创建触发器</span><br><span class="line">create or replace trigger  tri_emp_sal</span><br><span class="line">after</span><br><span class="line">update of sal </span><br><span class="line">on emp </span><br><span class="line">for each row  -- 出现了 :old 或者 :new 使用for each row</span><br><span class="line">--  :new   :old 伪记录</span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">  insert into emp_sal_log  values(seq_emp_sal_log.nextval,:new.empno, :old.sal,:new.sal,sysdate);</span><br><span class="line">end;</span><br><span class="line">  </span><br><span class="line">             :new    :old</span><br><span class="line">update               </span><br><span class="line">delete       null    </span><br><span class="line">insert               null</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">update emp set sal=10000 where empno=7369;</span><br><span class="line">select * from emp_sal_log;</span><br><span class="line">select * from emp;</span><br><span class="line"></span><br><span class="line">update emp set deptno=10 where empno=7369;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 案列三:</span><br><span class="line">-- 解决主键为null插入数据</span><br><span class="line">create table t_demo(</span><br><span class="line">  tid number(10) primary key,</span><br><span class="line">  tname varchar2(10)</span><br><span class="line">)</span><br><span class="line">-- 这句话执行失败   主键不能为空</span><br><span class="line">insert into t_demo(tname) values(&apos;aaaa&apos;);</span><br><span class="line"></span><br><span class="line">-- 解决问题</span><br><span class="line">create or replace trigger tri_demo</span><br><span class="line">before</span><br><span class="line">insert </span><br><span class="line">on t_demo</span><br><span class="line">for each row </span><br><span class="line">declare</span><br><span class="line">begin</span><br><span class="line">  -- 在插入之前对即将插入的对象赋值id</span><br><span class="line">  select seq_emp_sal_log.nextval into :new.tid from dual;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 测试</span><br><span class="line">insert into t_demo(tname) values(&apos;aaaa&apos;);</span><br><span class="line">select * from t_demo;</span><br></pre></td></tr></table></figure><h3 id="实际情况"><a href="#实际情况" class="headerlink" title="实际情况"></a>实际情况</h3><h4 id="对数据的误操作一"><a href="#对数据的误操作一" class="headerlink" title="对数据的误操作一:"></a>对数据的误操作一:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--误操作一</span><br><span class="line">drop table emp;    -- 误删了一张表数据</span><br><span class="line"></span><br><span class="line">-- 解决办法 </span><br><span class="line">-- 在Recycle bin (Oracle回收站) 可以恢复数据</span><br></pre></td></tr></table></figure><h4 id="对数据的误操作二"><a href="#对数据的误操作二" class="headerlink" title="对数据的误操作二:"></a>对数据的误操作二:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 误操作二:</span><br><span class="line">delete  *   from  emp  where empno = 1;</span><br><span class="line"></span><br><span class="line"> -- 解决办法 :</span><br><span class="line">create table emp_bak</span><br><span class="line">as</span><br><span class="line">select * from emp as of TIMESTAMP to_timestamp(&apos;20171020 103435&apos;,&apos;yyyymmdd&apos;,</span><br><span class="line">  hh24miss);</span><br><span class="line">select * from emp_bak;</span><br></pre></td></tr></table></figure><h3 id="Mysql-amp-Oracle"><a href="#Mysql-amp-Oracle" class="headerlink" title="Mysql&amp;Oracle"></a>Mysql&amp;Oracle</h3><h4 id="触发器-1"><a href="#触发器-1" class="headerlink" title="触发器:"></a>触发器:</h4><table><thead><tr><th>差异</th><th>MYSQL</th><th>ORACLE</th><th>说明</th></tr></thead><tbody><tr><td>创建语句不同</td><td>create trigger ‘AA’ BEFORE  INSERT on  ‘BB’   for each row</td><td>create or replace trigger AA    before insert or update or delete on BB    for each row</td><td>1.Oracle可以在一个触发器触发insert,delete,update事件.      Mysql每个触发器只支持一个事件. 也就是说,目前每个trigger需要拆分成3个mysql trigger.</td></tr><tr><td>引用新旧数据不同</td><td>取得新数据:  NEW.aa  取得老数据:  OLD.bb</td><td>取得新数据:  :new.aa  取得老数据:  :old.bb</td><td>1.oracle 多一对冒号</td></tr></tbody></table><h4 id="存储过程-1"><a href="#存储过程-1" class="headerlink" title="存储过程:"></a>存储过程:</h4><table><thead><tr><th>差异</th><th>MYSQL</th><th>ORACLE</th><th>说明</th></tr></thead><tbody><tr><td>创建语句不同</td><td>DROP PROCEDURE IF EXISTS  ‘SD_USER_P_ADD_USR’;  create procedure AA(aa varchar(100))</td><td>create or replace procedure AA(     varchar aa) is</td><td>1.oracle创建语比较简洁,mysql要先执行drop  2.mysql先变量再类型,oracle相反,且不必限定长度  3.如果是number或varchar2的话不需要定义长度。否则编译不能通过</td></tr><tr><td></td><td>DECLARE EXIT HANDLER FOR   AAEXCEPTION    BEGIN     …   END;</td><td>EXCEPTION      WHEN OTHERS THEN      ROLLBACK ;      ….</td><td>1.mysql不能自定义异常,且使用内部异常时需要先定义</td></tr></tbody></table><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1.plsql基本语法    **</p><p>2.存储过程和存储函数  <em>*</em></p><p>3.jdbc调用存过程和存储函数    <strong>*</strong></p><p>4.触发器         <em>**</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Oracle第四天&quot;&gt;&lt;a href=&quot;#Oracle第四天&quot; class=&quot;headerlink&quot; title=&quot;Oracle第四天&quot;&gt;&lt;/a&gt;Oracle第四天&lt;/h3&gt;&lt;h4 id=&quot;PL-SQL编程语言&quot;&gt;&lt;a href=&quot;#PL-SQL编程语言&quot; cla
      
    
    </summary>
    
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
      <category term="oracle" scheme="http://www.top.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>oracle03</title>
    <link href="http://www.top.com/2018/02/05/oracle03/"/>
    <id>http://www.top.com/2018/02/05/oracle03/</id>
    <published>2018-02-05T02:57:36.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle03"><a href="#Oracle03" class="headerlink" title="Oracle03"></a>Oracle03</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select instance_name from v$instance;    -- 查询 sid</span><br></pre></td></tr></table></figure><p>count问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select count(*)  from emp ;</span><br><span class="line">select count(empno) from emp;   -- 指定了count的列   主键列  有索引</span><br><span class="line">select count(ename) from emp;   -- 指定了count的列 普通列</span><br><span class="line">select count(0) from emp; -- 先找主键</span><br><span class="line">select count(1) from emp;  -- 先找主键</span><br><span class="line">select count(5454515) from emp;  -- 先找主键</span><br><span class="line"></span><br><span class="line">select count(comm)  from emp;   -- 4  自动跳过null值</span><br></pre></td></tr></table></figure><table><thead><tr><th>步骤</th><th>mysql</th><th>Oracle</th></tr></thead><tbody><tr><td>1</td><td>创建数据库 create  database mingzi</td><td>创建表空间同时创建 .dbf文件</td></tr><tr><td>2</td><td>创建表</td><td>创建用户,指定操作的空间</td></tr><tr><td>3</td><td>操作数据</td><td>赋权限</td></tr><tr><td>4</td><td>操作数据</td><td>创建表</td></tr><tr><td>5</td><td>操作数据</td><td>操作数据</td></tr></tbody></table><h4 id="1-创建表空间用户"><a href="#1-创建表空间用户" class="headerlink" title="1.创建表空间用户"></a>1.创建表空间用户</h4><p>当前用户是管理员 ,才有权限创建用户 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 1.1创建表空间同时创建dbf文件</span><br><span class="line">create tablespace heima_68_space   --表空间的名字</span><br><span class="line">datafile &apos;c:\\heima_68.dbf&apos;        --数据文件</span><br><span class="line">size 10M                           --指定数据文件的大小</span><br><span class="line">autoextend on                      --数据文件自动增长</span><br><span class="line">next 1M                            --增长的大小</span><br><span class="line"></span><br><span class="line">select  *  from  session_privs ;   -- 查看当前用户的权限</span><br><span class="line"></span><br><span class="line">--  1.2创建用户，指定操作的表空间</span><br><span class="line">create user  heima_68     -- 用户名</span><br><span class="line">identified  by  heima_68    -- 密码</span><br><span class="line">default  tablespace  heima_68_space ;  -- 指定操作的表空间</span><br><span class="line"></span><br><span class="line">-- 1.3赋权限</span><br><span class="line">select  *  from  session_privs ;   -- 查看当前用户的权限</span><br><span class="line">-- 权限  三种角色</span><br><span class="line">dba</span><br><span class="line">resource</span><br><span class="line">connect</span><br><span class="line">-- 授权</span><br><span class="line">grant   dba to  heima_68 ;</span><br></pre></td></tr></table></figure><h4 id="2-Oracle-常见的数据类型"><a href="#2-Oracle-常见的数据类型" class="headerlink" title="2.Oracle 常见的数据类型"></a>2.Oracle 常见的数据类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--2.1字符型  char varchar2</span><br><span class="line">char        255      固定长度     name  char(10)  &apos;TOM&apos;</span><br><span class="line">varchar2   3999     不固定长度    name  varchar2  &apos;TOM&apos;</span><br><span class="line"></span><br><span class="line">-- 2.2数值型  number </span><br><span class="line">id   number(3)   999</span><br><span class="line">aa   number(3,2)  9.99    总长度  不包括小数点和负号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 2.3日期型</span><br><span class="line">date 相当于mysql的datetime</span><br><span class="line">timestamp  时间戳  精度支持秒小数点后9位</span><br><span class="line"></span><br><span class="line">-- 2.4 大数据类型</span><br><span class="line">long  相当于mysql longtext  支持2个G内存</span><br><span class="line">clob  支持4G</span><br><span class="line">blob  存放视频,图片等</span><br></pre></td></tr></table></figure><h4 id="3-创建表"><a href="#3-创建表" class="headerlink" title="3.创建表"></a>3.创建表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">-- 3.1约束   主键  非空  唯一 检查 外键</span><br><span class="line">drop table person;</span><br><span class="line">create  ------ drop</span><br><span class="line"></span><br><span class="line">create table person(</span><br><span class="line"> pid number(10) ,</span><br><span class="line"> pname varchar2(30) not null,</span><br><span class="line"> telephone varchar2(11),</span><br><span class="line"> gender char(1),     --  0女  1男</span><br><span class="line"> constraint person_pk_pid primary key(pid),</span><br><span class="line"> constraint person_unique_telephone unique(telephone),</span><br><span class="line"> constraint person_check_gender check(gender in(0,1))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into person  values(1,&apos;TOM&apos;,&apos;13898765432&apos;,&apos;1&apos;);</span><br><span class="line">insert into person  values(2,&apos;JERREY&apos;,&apos;13898765431&apos;,&apos;1&apos;);</span><br><span class="line">insert into person  values(3,&apos;JERREY&apos;,&apos;13898765433&apos;,&apos;0&apos;);</span><br><span class="line">insert into person  values(4,null,&apos;13898765434&apos;,&apos;0&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from person</span><br><span class="line"></span><br><span class="line">create table orders(</span><br><span class="line"> ooid number(10) primary key,</span><br><span class="line"> totalPrice number(10,2)</span><br><span class="line">)</span><br><span class="line">create table orderdetail(</span><br><span class="line"> odid number(10) primary key,</span><br><span class="line"> goodsName varchar2(30),</span><br><span class="line"> ooid number(10),</span><br><span class="line"> constraint orderdetail_fk_ooid foreign key(ooid) references orders(ooid)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into orders values(1,1000);</span><br><span class="line">insert into orders values(2,5000);</span><br><span class="line"></span><br><span class="line">select * from orders</span><br><span class="line"></span><br><span class="line">insert into orderdetail values(1,&apos;鼠标&apos;,1);</span><br><span class="line">insert into orderdetail values(2,&apos;键盘&apos;,2);</span><br><span class="line">delete from orderdetail where ooid=1</span><br><span class="line">delete from orders where ooid=1</span><br><span class="line"></span><br><span class="line">-- 3.2 修改表（了解）</span><br><span class="line">alter table person add (address varchar2(10))--添加列</span><br><span class="line">alter table person modify(address varchar2(100)) --修改列</span><br><span class="line">alter table person drop column address  --删除列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 3.3 操作数据</span><br><span class="line">drop table person;</span><br><span class="line">create  ------ drop</span><br><span class="line"></span><br><span class="line">create table person(</span><br><span class="line"> pid number(10) ,</span><br><span class="line"> pname varchar2(30) not null,</span><br><span class="line"> telephone varchar2(11),</span><br><span class="line"> gender char(1),     --  0女  1男</span><br><span class="line"> birthday date,</span><br><span class="line"> constraint person_pk_pid primary key(pid),</span><br><span class="line"> constraint person_unique_telephone unique(telephone),</span><br><span class="line"> constraint person_check_gender check(gender in(0,1))</span><br><span class="line">)</span><br><span class="line">insert into person values(1,&apos;TOM&apos;,&apos;12345678909&apos;,&apos;1&apos;,to_date(&apos;2008-08-08&apos;,&apos;yyyy-mm-dd&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---- 快速复制表</span><br><span class="line">create table myemp as (select * from scott.emp)</span><br><span class="line">create table mydept as (select * from scott.dept)</span><br><span class="line"></span><br><span class="line">--  给纽约NEW YORK地区的员工涨100元工资</span><br><span class="line">select * from myemp</span><br><span class="line">select * from mydept</span><br><span class="line"></span><br><span class="line">select * from myemp where deptno in (select deptno from mydept where loc=&apos;NEW YORK&apos;)</span><br><span class="line"></span><br><span class="line">  update myemp set sal=sal+100 where deptno in (select deptno from mydept where loc=&apos;NEW YORK&apos;)</span><br></pre></td></tr></table></figure><h4 id="4-事务的保存点savepoint"><a href="#4-事务的保存点savepoint" class="headerlink" title="4.事务的保存点savepoint"></a>4.事务的保存点savepoint</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">select * from  person</span><br><span class="line"></span><br><span class="line">update person set pname=&apos;大郎&apos; where pid=1;</span><br><span class="line">savepoint a;</span><br><span class="line">insert into person values(2,&apos;小潘&apos;,&apos;12345432123&apos;,&apos;0&apos;,null);</span><br><span class="line">savepoint b;</span><br><span class="line">delete from person where pid=2;</span><br><span class="line">rollback to a;</span><br><span class="line"></span><br><span class="line">rollback to b;</span><br><span class="line"></span><br><span class="line">rollback to a</span><br><span class="line"></span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">场景</span><br><span class="line">用户注册</span><br><span class="line"> 1、insert  user</span><br><span class="line"> 2、发送短信 insert 短信记录表</span><br><span class="line"> </span><br><span class="line"> insert  user</span><br><span class="line"> savepoint a;</span><br><span class="line"> insert log</span><br></pre></td></tr></table></figure><h4 id="5-事务的隔离级别"><a href="#5-事务的隔离级别" class="headerlink" title="5.事务的隔离级别"></a>5.事务的隔离级别</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">（1）Read uncommitted 读未提交</span><br><span class="line">公司发工资了，领导把5000元打到singo的账号上，但是该事务并未提交，而singo正好去查看账户，发现工资已经到账，是5000元整，非常高兴。</span><br><span class="line">可是不幸的是，领导发现发给singo的工资金额不对，是2000元，于是迅速回滚了事务，修改金额后，将事务提交，最后singo实际的工资只有2000元，</span><br><span class="line">singo空欢喜一场。</span><br><span class="line"></span><br><span class="line">总结：出现上述情况，即我们所说的脏读，两个并发的事务，“事务A：领导给singo发工资”、“事务B：singo查询工资账户”，事务B读取了事务A尚未提交的数据。</span><br><span class="line"></span><br><span class="line">当隔离级别设置为Read uncommitted时，就可能出现脏读，如何避免脏读，请看下一个隔离级别。</span><br><span class="line"> （2）Read committed 读提已交</span><br><span class="line"></span><br><span class="line">singo拿着工资卡去消费，系统读取到卡里确实有2000元，而此时她的老婆也正好在网上转账，把singo工资卡的2000元转到另一账户，</span><br><span class="line">并在singo之前提交了事务，当singo扣款时，系统检查到singo的工资卡已经没有钱，扣款失败，singo十分纳闷，明明卡里有钱，为何......</span><br><span class="line"></span><br><span class="line">总结：出现上述情况，即我们所说的不可重复读，两个并发的事务，“事务A：singo消费”、“事务B：singo的老婆网上转账”，事务A事先读取了数据，事务B紧接了更新了数据，并提交了事务，而事务A再次读取该数据时，数据已经发生了改变。</span><br><span class="line"></span><br><span class="line">当隔离级别设置为Read committed时，避免了脏读，但是可能会造成不可重复读。</span><br><span class="line"></span><br><span class="line">大多数数据库的默认级别就是Read committed，比如Sql Server , Oracle。如何解决不可重复读这一问题，请看下一个隔离级别。</span><br><span class="line"></span><br><span class="line">  (3) Repeatable read 重复读</span><br><span class="line"></span><br><span class="line">singo的老婆工作在银行部门，她时常通过银行内部系统查看singo的信用卡消费记录。</span><br><span class="line">有一天，她正在查询到singo当月信用卡的总消费金额（<span class="keyword">select</span> <span class="keyword">sum</span>(amount) <span class="keyword">from</span> <span class="keyword">transaction</span> <span class="keyword">where</span> <span class="keyword">month</span> = 本月）为<span class="number">80</span>元，</span><br><span class="line">而singo此时正好在外面胡吃海塞后在收银台买单，消费<span class="number">1000</span>元，即新增了一条<span class="number">1000</span>元的消费记录（<span class="keyword">insert</span> <span class="keyword">transaction</span> ... ），</span><br><span class="line">并提交了事务，随后singo的老婆将singo当月信用卡消费的明细打印到A4纸上，却发现消费总额为<span class="number">1080</span>元，singo的老婆很诧异，</span><br><span class="line">以为出现了幻觉，幻读就这样产生了。</span><br><span class="line"></span><br><span class="line">总结：当隔离级别设置为Repeatable <span class="keyword">read</span>时，可以避免不可重复读。当singo拿着工资卡去消费时，一旦系统开始读取工资卡信息（即事务开始），singo的老婆就不可能对该记录进行修改，也就是singo的老婆不能在此时转账。</span><br><span class="line"></span><br><span class="line">虽然Repeatable <span class="keyword">read</span>避免了不可重复读，但还有可能出现幻读。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   （<span class="number">4</span>）<span class="keyword">Serializable</span> 序列化</span><br><span class="line"><span class="keyword">Serializable</span>是最高的事务隔离级别，同时代价也花费最高，性能很低，一般很少使用，在该级别下，事务顺序执行，不仅可以避免脏读、不可重复读，还避免了幻像读。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">√: 可能出现    ×: 不会出现</span><br><span class="line"></span><br><span class="line">         脏读  不可重复读  幻读</span><br><span class="line"><span class="keyword">Read</span> uncommitted√   √√</span><br><span class="line"><span class="keyword">Read</span> committed×√    √</span><br><span class="line">Repeatable <span class="keyword">read</span>××√</span><br><span class="line"><span class="keyword">Serializable</span>×××</span><br></pre></td></tr></table></figure><h4 id="6-数据库的其他对象"><a href="#6-数据库的其他对象" class="headerlink" title="6.数据库的其他对象"></a>6.数据库的其他对象</h4><h5 id="视图view"><a href="#视图view" class="headerlink" title="视图view"></a>视图view</h5><p>​    概念: 是个虚表,可以把视图当作表来操作</p><p>​    作用|好处: </p><p>​    1.可以封装复杂的sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create view view_hireCount as</span><br><span class="line">select    </span><br><span class="line">  sum(t.counts) &quot;Total&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1980&apos;,counts)) &quot;1980&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1981&apos;,counts)) &quot;1981&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1982&apos;,counts)) &quot;1982&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1987&apos;,counts)) &quot;1987&quot; </span><br><span class="line"> from  (select   to_char(hiredate,&apos;yyyy&apos;) years  ,count(*)  counts  from emp  group by to_char(hiredate,&apos;yyyy&apos;))  t ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select *  from view_hireCount;</span><br></pre></td></tr></table></figure><p>​    2.可以隐藏敏感列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create view view_emp as select empno,ename,job,mgr,hiredate,deptno  from  myemp ;</span><br><span class="line"></span><br><span class="line">select * from view_emp;</span><br><span class="line">update view_emp2 set ename=&apos;bbbb&apos; where empno =7369;</span><br><span class="line">select * from myemp;</span><br><span class="line"></span><br><span class="line">--只读视图  with  read only</span><br><span class="line">create view view_emp2 as select empno,ename,job,mgr,hiredate,deptno  from myemp with  read only ;</span><br><span class="line">select * from view_emp;</span><br><span class="line">update view_emp2 set ename=&apos;bbbb&apos; where empno =7369;</span><br><span class="line">select * from myemp2;</span><br></pre></td></tr></table></figure><h5 id="序列sequence"><a href="#序列sequence" class="headerlink" title="序列sequence"></a>序列sequence</h5><p>​    概念:  独立于表之外的对象,主键自增</p><p>​    作用: 主要用来做主键自增;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">--序列的简单语法</span><br><span class="line"></span><br><span class="line">--使用序列</span><br><span class="line">create  sequence seq_person ;</span><br><span class="line"></span><br><span class="line">--第一次使用,只能使用seq_person.nextval </span><br><span class="line">select seq_person.nextval from dual;</span><br><span class="line">select seq_person.currval from dual;</span><br><span class="line"></span><br><span class="line">select * from person;</span><br><span class="line">insert into person values(seq_person.nextval,&apos;小明&apos;,&apos;1232&apos;,&apos;0&apos;,&apos;null&apos;)</span><br><span class="line"></span><br><span class="line">--序列的复杂语法</span><br><span class="line">5 7 9 11 13 15 3 5 7 9</span><br><span class="line">create  sequence sel_test </span><br><span class="line">increament by 2 -- 递增值,默认是1</span><br><span class="line">minvalue  3 -- 最小值,默认是1</span><br><span class="line">maxvalue --15 --最大值  默认是19个9   </span><br><span class="line">start width 5 --起始值 默认是1</span><br><span class="line">cycle  --循环   默认nocycle</span><br><span class="line">cache 10 --缓存</span><br></pre></td></tr></table></figure><h5 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h5><p>​    概念: 相当于一本数的目录</p><p>​    作用|好处: 为了提高查询效率</p><p>​    主键和唯一约束默认就会创建索引</p><p>​    怎么用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">create index index_emp_ename on myemp(ename);</span><br><span class="line"></span><br><span class="line">select *  from myemp where ename = &apos;SCOTT&apos;;</span><br><span class="line"></span><br><span class="line">1.创建一个表</span><br><span class="line">create table t_test(</span><br><span class="line">tid number(10),</span><br><span class="line">  tname varchar2(20)</span><br><span class="line">);</span><br><span class="line">2.插入500万条数据</span><br><span class="line">begin </span><br><span class="line">  for i  in 1..5000000</span><br><span class="line">    loop </span><br><span class="line">   insert into t_test  values(i,&apos;测试数据&apos;||i )</span><br><span class="line">  end loop;</span><br><span class="line">  commit;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">3.查询记录时间</span><br><span class="line">select * form t_test where tname=&apos;测试数据566899686&apos;;</span><br><span class="line"></span><br><span class="line">4.创建索引</span><br><span class="line">create index index_test on t_test(tname);</span><br><span class="line"></span><br><span class="line">5.查询 记录时间(索引)</span><br><span class="line">select * form t_test where tname=&apos;测试数据56615186&apos;;</span><br></pre></td></tr></table></figure><h5 id="提高查询效率-面试"><a href="#提高查询效率-面试" class="headerlink" title="提高查询效率(面试)"></a>提高查询效率(面试)</h5><ol><li>创建索引</li><li>子查询  (笛卡尔积)</li><li>把经常用的多表数据放在一张表中 (创建)</li></ol><h5 id="同义词-synonym"><a href="#同义词-synonym" class="headerlink" title="同义词 synonym"></a>同义词 synonym</h5><p>概念</p><p>作用: 缩短访问对象的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create synonym e from scott.emp;</span><br><span class="line"></span><br><span class="line">create synonym  e  from scott.emp;</span><br><span class="line"></span><br><span class="line">select * from e;</span><br><span class="line">drop synonym e;   -- drop 自己的</span><br><span class="line">drop public synonym e;</span><br></pre></td></tr></table></figure><h4 id="7-数据的导入导出"><a href="#7-数据的导入导出" class="headerlink" title="7.数据的导入导出"></a>7.数据的导入导出</h4><ol><li><p>全部导出</p><p>…</p></li><li><p>按照用户导出(重点)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、全部导出</span><br><span class="line">2、按照用户导出</span><br><span class="line">注意 : exp和 imp 使用命令的前提是当前电脑上安装了Oracle</span><br><span class="line">按照用户导出</span><br><span class="line"></span><br><span class="line">把scott用户下的所有对象导入到heima_68用户</span><br><span class="line">导出:exp scott/tiger@192.168.227.10:1521/orcl file=c:\\scott20171018.dmp owner = scott;</span><br><span class="line"></span><br><span class="line">导入:imp heima_68/heima_68@192.168.66.10:1521/orcl  file=c:\\scott20171018.dmp full=y</span><br><span class="line">3、导出某表</span><br></pre></td></tr></table></figure></li><li><p>导出某表</p><p>….</p></li></ol><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li><p>创建表空间用户 ==保存语句==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create tablespace heima_68_space   --表空间的名字</span><br><span class="line">datafile &apos;c:\\heima_68.dbf&apos;        --数据文件</span><br><span class="line">size 10M                           --指定数据文件的大小</span><br><span class="line">autoextend on                      --数据文件自动增长</span><br><span class="line">next 1M                            --增长的大小</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">​```plsql</span><br><span class="line">select  *  from  session_privs ;   -- 查看当前用户的权限</span><br><span class="line"></span><br><span class="line">create user heima_68    --用户名</span><br><span class="line">identified  by heima_68  -- 密码</span><br><span class="line">default  tablespace heima_68_space   -- 指定表空间</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1. 创建表</span><br><span class="line"></span><br><span class="line">   ​     数据类型  ==重点==</span><br><span class="line"></span><br><span class="line">   ​     创建表     ==重点==</span><br><span class="line"></span><br><span class="line">   ​     修改表结构  了解</span><br><span class="line"></span><br><span class="line">2. 操作数据  ==重点==</span><br><span class="line"></span><br><span class="line">   insert  </span><br><span class="line"></span><br><span class="line">   delete</span><br><span class="line"></span><br><span class="line">    update</span><br><span class="line"></span><br><span class="line">3. 事务保存点 了解</span><br><span class="line"></span><br><span class="line">4. 视图  ==重点==</span><br><span class="line"></span><br><span class="line">5. 序列 ==重点==</span><br><span class="line"></span><br><span class="line">6. 索引==重点Oracle独有==</span><br><span class="line"></span><br><span class="line">7. 同义词  了解</span><br><span class="line"></span><br><span class="line">8. 导入导出 ==重点==   ==保存语句==</span><br><span class="line"></span><br><span class="line">   注意 : exp和 imp 使用命令的前提是当前电脑上安装了Oracle</span><br><span class="line"></span><br><span class="line">   ```plsql</span><br><span class="line">   把scott用户下的所有对象导入到heima_68用户</span><br><span class="line"></span><br><span class="line">   导出:exp scott/tiger@192.168.227.10:1521/orcl file=c:\\scott20171018.dmp owner = scott;</span><br><span class="line"></span><br><span class="line">   导入:imp heima_68/heima_68@192.168.66.10:1521/orcl  file=c:\\scott20171018.dmp full=y</span><br></pre></td></tr></table></figure><p>   ​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Oracle03&quot;&gt;&lt;a href=&quot;#Oracle03&quot; class=&quot;headerlink&quot; title=&quot;Oracle03&quot;&gt;&lt;/a&gt;Oracle03&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
      <category term="oracle" scheme="http://www.top.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>oracle02</title>
    <link href="http://www.top.com/2018/01/13/oracle02/"/>
    <id>http://www.top.com/2018/01/13/oracle02/</id>
    <published>2018-01-13T07:45:00.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><h3 id="sql原则"><a href="#sql原则" class="headerlink" title="sql原则 :"></a>sql原则 :</h3><h4 id="书写顺序"><a href="#书写顺序" class="headerlink" title="书写顺序 :"></a>书写顺序 :</h4><p>​    <code>select   from   where   group    by   having  order by</code></p><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序:"></a>执行顺序:</h4><p>​        <code>from   where   group  by  haing   select  order by</code></p><h4 id="双引号问"><a href="#双引号问" class="headerlink" title="双引号问"></a>双引号问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">默认创建的都是大写的</span><br><span class="line"></span><br><span class="line">select  empno ,ename from  &quot;emp&quot;;    //  oracle  区分大小写    表示查 表名为  emp  ,而不是EMP</span><br><span class="line"></span><br><span class="line">select  empno ,ename from  emp;    //  oracle  区分大小写    表示查 表名为  EMP,而不是emp</span><br><span class="line"></span><br><span class="line">oracle默认会把   &quot;emp&quot; 装换为大写      可以用来保存和查询  大写的内容</span><br><span class="line"></span><br><span class="line">select empno , ename from &quot;emp&quot;</span><br><span class="line"></span><br><span class="line">create  table aaa (  // 在数据库中保存是会把 aaa 保存为AAA;</span><br><span class="line">   id char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select * from &quot;aaa&quot;  //查不到</span><br><span class="line"></span><br><span class="line">create  table &quot;bbb&quot; (  // 在数据库中保存是会把 aaa 保存为bbb;</span><br><span class="line"> &quot;id&quot; char(1)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">select &quot;id&quot; from &quot;bbb&quot; // 可以查到</span><br></pre></td></tr></table></figure><h3 id="案列学习知识"><a href="#案列学习知识" class="headerlink" title="案列学习知识"></a>案列学习知识</h3><h4 id="1-笛卡尔积"><a href="#1-笛卡尔积" class="headerlink" title="1.笛卡尔积"></a>1.笛卡尔积</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询员工表和部门表</span><br><span class="line">select * from emp; --14</span><br><span class="line">select * from dept; --4</span><br><span class="line"></span><br><span class="line">select * from emp , dept   --56=14*4  笛卡尔积</span><br><span class="line">select * from emp e, dept d where e.deptno=d.deptno</span><br><span class="line"></span><br><span class="line">--范例：查询出雇员的编号，姓名，部门的编号和名称，地址</span><br><span class="line">select empno,ename,d.deptno,dname,loc from emp e, dept d where e.deptno=d.deptno</span><br></pre></td></tr></table></figure><h4 id="2-自关联-自查询-自连接"><a href="#2-自关联-自查询-自连接" class="headerlink" title="2.自关联  自查询  自连接"></a>2.自关联  自查询  自连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--范例：查询出每个员工的上级领导  --自关联  自查询  自连接</span><br><span class="line">--(员工编号、员工姓名、员工部门编号、员工工资、领导编号、领导姓名、领导工资)</span><br><span class="line">select * from emp</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal from emp e1,--员工表</span><br><span class="line">emp e2 --领导表</span><br><span class="line">where e1.mgr=e2.empno</span><br><span class="line"></span><br><span class="line">--范例: 在上一个例子的基础上查询该员工的部门名称</span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,d.dname,e2.empno,e2.ename,e2.sal from emp e1,--员工表</span><br><span class="line">emp e2, --领导表,</span><br><span class="line">dept d</span><br><span class="line">where e1.mgr=e2.empno and e1.deptno=d.deptno</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--范例：在上一个例子的基础上查询出员工的工资等级和他的上级领导的工资等级</span><br><span class="line">--select * from salgrade 等级表</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,d.dname,s.grade,e2.empno,e2.ename,e2.sal,s1.grade </span><br><span class="line">from emp e1,--员工表</span><br><span class="line">emp e2, --领导表,</span><br><span class="line">dept d,</span><br><span class="line">salgrade s,</span><br><span class="line">salgrade s1</span><br><span class="line">where e1.mgr=e2.empno and e1.deptno=d.deptno and e1.sal between s.losal and s.hisal</span><br><span class="line"> and e2.sal between s1.losal and s1.hisal</span><br></pre></td></tr></table></figure><h4 id="3-外连接"><a href="#3-外连接" class="headerlink" title="3.外连接"></a>3.外连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">--范例：查询出所有员工的上级领导</span><br><span class="line">SELECT * FROM    emp e ,dept d  WHERE    e.deptno =  d.deptno ;  // 14</span><br><span class="line"></span><br><span class="line">-- left join on    right join on </span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1,emp e2 </span><br><span class="line">where e1.mgr=e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 left join emp e2 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e2 right join emp e1 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 ,emp e2 </span><br><span class="line">WHERE   e1.mgr = e2.empno(+);</span><br><span class="line"></span><br><span class="line">e1 :14</span><br><span class="line">e2 :13</span><br><span class="line"></span><br><span class="line">--范例：查询出所有的部门下的员工，要求把没有员工的部门也展示出来</span><br><span class="line">select * from  dept;</span><br><span class="line">SELECT * FROM   emp;</span><br><span class="line"></span><br><span class="line">select * from emp e ,dept d where e.deptno(+) = d.deptno;</span><br></pre></td></tr></table></figure><h4 id="4-子查询"><a href="#4-子查询" class="headerlink" title="4.子查询"></a>4.子查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">--查询比SCOTT工资高的员工</span><br><span class="line">select * from emp where sal &gt; ( select sal from emp where ename = &apos;SCOTT&apos; );</span><br><span class="line"></span><br><span class="line">select * from dept;</span><br><span class="line">--查询职位是经理并且工资比7782号员工高的员工</span><br><span class="line">select * from emp where  job = &apos;MANAGER&apos;  and sal &gt; (select sal from emp where empno = 7782);</span><br><span class="line"></span><br><span class="line">SELECT * FROM  emp;</span><br><span class="line"></span><br><span class="line">--查询工资最低的员工</span><br><span class="line">select  * from  emp  WHERE  sal=(select min(sal) from emp);</span><br><span class="line"></span><br><span class="line">--查询部门最低工资  大于30号部门最低工资的结果</span><br><span class="line">SELECT  deptno,min(sal) FROM   emp group by deptno  having min(sal) &gt; (select min(sal) from emp WHERE  deptno = 30);</span><br><span class="line"></span><br><span class="line">--查询出和scott同部门并且同职位的员工</span><br><span class="line">select * from emp;</span><br><span class="line"></span><br><span class="line">select * from emp WHERE deptno = (select deptno from emp WHERE  ename=&apos;SCOTT&apos;)</span><br><span class="line">and job = (SELECT job FROM  emp WHERE  ename=&apos;SCOTT&apos;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM  emp WHERE (deptno,job) = (select deptno,job from emp WHERE  ename=&apos;SCOTT&apos;  );</span><br><span class="line">SELECT * FROM  emp WHERE (deptno,job) in (select deptno,job from emp WHERE  ename=&apos;SCOTT&apos;  );</span><br><span class="line">--查询每个部门的最低工资和最低工资的雇员和部门名称</span><br><span class="line">select  deptno,min(sal) minsal  from emp group by deptno;</span><br><span class="line"></span><br><span class="line">select * from emp ;</span><br><span class="line"></span><br><span class="line">select * from emp e ,(select deptno,min(sal) minsal  from emp group by deptno) t where e.deptno = t.deptno</span><br><span class="line"> and  t.minsal  = e.sal;</span><br><span class="line"></span><br><span class="line">select * from emp e, (select deptno,min(sal) minsal from emp group by deptno) t, dept d</span><br><span class="line">where e.sal=t.minsal and e.deptno=t.deptno and d.deptno=e.deptno;</span><br><span class="line"></span><br><span class="line">select d.deptno,t.minsal,e.ename,d.dname from emp e, (select deptno,min(sal) minsal from emp group by deptno) t, dept d</span><br><span class="line">where e.sal=t.minsal and e.deptno=t.deptno and d.deptno=e.deptno;     </span><br><span class="line"></span><br><span class="line">--查询出不是领导的员工</span><br><span class="line">select * from  emp  where  empno  not in  (select mgr from emp where mgr is not null);</span><br></pre></td></tr></table></figure><h4 id="5-分页查询"><a href="#5-分页查询" class="headerlink" title="5.分页查询"></a>5.分页查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">--课堂练习</span><br><span class="line">--查询员工表中工资最高的前三名</span><br><span class="line">-- 工资排序</span><br><span class="line">-- 分页   每页显示三条</span><br><span class="line">rownum 序号 随着查询而产生 </span><br><span class="line">rowid 每行数据在磁盘上的物理地址</span><br><span class="line"></span><br><span class="line">select e.*,rownum ,rowid  from emp e; </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc) e   where rownum&lt;4 </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc)  where  rownum &lt; 7 ;</span><br><span class="line"></span><br><span class="line">select  *  from (select e.*,rownum r from  (select * from emp order by sal desc) e where  rownum &lt; 7) t </span><br><span class="line"></span><br><span class="line">where t.r &gt;3;</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r from (select * from emp order by sal desc) e  where rownum &lt;10 )  t </span><br><span class="line">where   t.r &gt;6</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r  from  (select * from emp order by sal desc) e </span><br><span class="line">  where rownum&lt;7 ) t  where  t.r&gt;3</span><br><span class="line"></span><br><span class="line">--找到员工表中薪水大于本部门平均薪水的员工</span><br><span class="line">select *  from  emp e ,(select  deptno,avg(sal) avgsal from emp group by deptno)  t </span><br><span class="line">where e.deptno = t.deptno and   e.sal &gt; t.avgsal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--统计每年入职的员工个数</span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select  2  &quot;1981&quot;, 3 &quot;1982&quot; from  dual;</span><br><span class="line"></span><br><span class="line">decode decode(列名,&quot;列中的值&quot;,显示的值)</span><br><span class="line"></span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select    </span><br><span class="line">  sum(t.counts) &quot;Total&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1980&apos;,counts)) &quot;1980&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1981&apos;,counts)) &quot;1981&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1982&apos;,counts)) &quot;1982&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1987&apos;,counts)) &quot;1987&quot; </span><br><span class="line"> from  (select   to_char(hiredate,&apos;yyyy&apos;) years  ,count(*)  counts  from emp  group by to_char(hiredate,&apos;yyyy&apos;))  t ;</span><br></pre></td></tr></table></figure><h4 id="6-集合运算"><a href="#6-集合运算" class="headerlink" title="6.集合运算"></a>6.集合运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">--范例：工资大于1500，或者是20号部门下的员工</span><br><span class="line">select * from emp  where sal &gt; 1500 or deptno=20;</span><br><span class="line"></span><br><span class="line">select * from  emp where sal &gt; 1500</span><br><span class="line">union  --并集  union all</span><br><span class="line">select *  from  emp where deptno=20;</span><br><span class="line"></span><br><span class="line">select * from emp where sal&gt;1500</span><br><span class="line">union all</span><br><span class="line">select * from emp where deptno=20;</span><br><span class="line"></span><br><span class="line">--范例：工资大于1500，并且是20号部门下的员工</span><br><span class="line">select * from emp where sal &gt; 1500 and  deptno=20;</span><br><span class="line"></span><br><span class="line">select * from emp where sal&gt;1500</span><br><span class="line">intersect</span><br><span class="line">select * from emp where deptno=20;</span><br><span class="line"></span><br><span class="line">--范例：1981年入职的普通员工（不包括总裁和经理）</span><br><span class="line">select * from emp where  to_char(hiredate,&apos;yyyy&apos;)  = &apos;1981&apos;</span><br><span class="line">minus</span><br><span class="line">select * from emp where job =&apos;MANAGER&apos; or job = &apos;PRESIDENT&apos;;</span><br><span class="line"></span><br><span class="line">如果满足列数一样并且列对应的数据类型一直就可以做集合运算</span><br><span class="line">select empno,ename,deptno from emp</span><br><span class="line">union</span><br><span class="line">select deptno,dname,deptno from dept;</span><br></pre></td></tr></table></figure><h4 id="7-exists"><a href="#7-exists" class="headerlink" title="7.exists"></a>7.exists</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">  select * from 表名 where exists(sql查询语句)</span><br><span class="line"></span><br><span class="line">   exists(sql查询语句)   sql查询语句如果能查到结果   exists(sql查询语句)  返回true</span><br><span class="line"></span><br><span class="line">   exists(sql查询语句)  sql查询语句如果没有查到结果   exists(sql查询语句)  返回false</span><br><span class="line"></span><br><span class="line">  select * from emp where exists(select * from dept where deptno=10)</span><br><span class="line">  select * from emp where 1=1</span><br><span class="line">  select * from emp where exists(select * from dept where deptno=100)</span><br><span class="line">  select * from emp where 1=2</span><br><span class="line"></span><br><span class="line">查询没有员工的部门</span><br><span class="line"></span><br><span class="line">select * from dept d where not exists(select * from emp e where e.deptno=d.deptno)</span><br><span class="line"></span><br><span class="line">Oracle独有的分组方式:select后面出现的物理列，group by 后面一定要出现</span><br><span class="line"></span><br><span class="line">select d.deptno,d.dname, avg(sal)</span><br><span class="line">  from emp e, dept d</span><br><span class="line"> where e.deptno = d.deptno</span><br><span class="line"> group by d.deptno,d.dname</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="Oracle独有的"><a href="#Oracle独有的" class="headerlink" title="Oracle独有的"></a>Oracle独有的</h4><h5 id="1、-方式的外链接"><a href="#1、-方式的外链接" class="headerlink" title="1、(+)方式的外链接"></a>1、(+)方式的外链接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--范例：查询出每个员工的上级领导  --自关联  自查询  自连接</span><br><span class="line">--(员工编号、员工姓名、员工部门编号、员工工资、领导编号、领导姓名、领导工资)</span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 left join emp e2 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e2 right join emp e1 </span><br><span class="line">on  e1.mgr = e2.empno;</span><br><span class="line"></span><br><span class="line">select e1.empno,e1.ename,e1.deptno,e1.sal,e2.empno,e2.ename,e2.sal</span><br><span class="line">from emp e1 ,emp e2 </span><br><span class="line">WHERE   e1.mgr = e2.empno(+);</span><br></pre></td></tr></table></figure><h5 id="2、decode"><a href="#2、decode" class="headerlink" title="2、decode"></a>2、decode</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">--统计每年入职的员工个数</span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select  2  &quot;1981&quot;, 3 &quot;1982&quot; from  dual;</span><br><span class="line"></span><br><span class="line">decode decode(列名,&quot;列中的值&quot;,显示的值)</span><br><span class="line"></span><br><span class="line">select   to_char(hiredate,&apos;yyyy&apos;) ,count(*)  from emp  group by to_char(hiredate,&apos;yyyy&apos;) ;</span><br><span class="line"></span><br><span class="line">select    </span><br><span class="line">  sum(t.counts) &quot;Total&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1980&apos;,counts)) &quot;1980&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1981&apos;,counts)) &quot;1981&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1982&apos;,counts)) &quot;1982&quot; ,</span><br><span class="line">  sum(decode(years,&apos;1987&apos;,counts)) &quot;1987&quot; </span><br><span class="line"> from  (select   to_char(hiredate,&apos;yyyy&apos;) years  ,count(*)  counts  from emp  group by to_char(hiredate,&apos;yyyy&apos;))  t ;</span><br></pre></td></tr></table></figure><h5 id="3、分页"><a href="#3、分页" class="headerlink" title="3、分页"></a>3、分页</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--课堂练习</span><br><span class="line">--查询员工表中工资最高的前三名</span><br><span class="line">-- 工资排序</span><br><span class="line">-- 分页   每页显示三条</span><br><span class="line">rownum 序号 随着查询而产生 </span><br><span class="line">rowid 每行数据在磁盘上的物理地址</span><br><span class="line"></span><br><span class="line">select e.*,rownum ,rowid  from emp e; </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc) e   where rownum&lt;4 </span><br><span class="line"></span><br><span class="line">select e.*,rownum  from  (select * from emp order by sal desc)  where  rownum &lt; 7 ;</span><br><span class="line"></span><br><span class="line">select  *  from (select e.*,rownum r from  (select * from emp order by sal desc) e where  rownum &lt; 7) t </span><br><span class="line"></span><br><span class="line">where t.r &gt;3;</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r from (select * from emp order by sal desc) e  where rownum &lt;10 )  t </span><br><span class="line">where   t.r &gt;6</span><br><span class="line"></span><br><span class="line">select * from (select e.*,rownum r  from  (select * from emp order by sal desc) e </span><br><span class="line">  where rownum&lt;7 ) t  where  t.r&gt;3</span><br></pre></td></tr></table></figure><h5 id="4、Oracle独有的分组方式"><a href="#4、Oracle独有的分组方式" class="headerlink" title="4、Oracle独有的分组方式"></a>4、Oracle独有的分组方式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查询没有员工的部门</span><br><span class="line"></span><br><span class="line">select * from dept d where not exists(select * from emp e where e.deptno=d.deptno)</span><br><span class="line"></span><br><span class="line">Oracle独有的分组方式:select后面出现的物理列，group by 后面一定要出现</span><br><span class="line"></span><br><span class="line">select d.deptno,d.dname, avg(sal)</span><br><span class="line">  from emp e, dept d</span><br><span class="line"> where e.deptno = d.deptno</span><br><span class="line"> group by d.deptno,d.dname</span><br></pre></td></tr></table></figure><h2 id="深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接"><a href="#深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接" class="headerlink" title="深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接"></a>深入理解SQL的四种连接-左外连接、右外连接、内连接、全连接</h2><p><strong>1、内联接</strong>（典型的联接运算，使用像 =  或 &lt;&gt; 之类的比较运算符）。包括相等联接和自然联接。<br>内联接使用比较运算符根据每个表共有的列的值匹配两个表中的行。例如，检索 students和courses表中学生标识号相同的所有行。<br><strong>    2、外联接。</strong>外联接可以是左向外联接、右向外联接或完整外部联接。<br>在 FROM子句中指定外联接时，可以由下列几组关键字中的一组指定：<br>1）LEFT  JOIN或LEFT OUTER JOIN<br>左向外联接的结果集包括  LEFT OUTER子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。<br>2）RIGHT  JOIN 或 RIGHT  OUTER  JOIN<br>右向外联接是左向外联接的反向联接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。<br>3）FULL  JOIN 或 FULL OUTER JOIN<br>完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。<br><strong>3、交叉联接   </strong>交叉联接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉联接也称作笛卡尔积。<br>FROM 子句中的表或视图可通过内联接或完整外部联接按任意顺序指定；但是，用左或右向外联接指定表或视图时，表或视图的顺序很重要。有关使用左或右向外联接排列表的更多信息，请参见使用外联接。<br><strong>例子：</strong><br>-————————————————<br>  a表     id   name     b表     id   job   parent_id<br>​              1   张3                   1     23     1<br>​              2   李四                 2     34     2<br>​              3   王武                 3     34     4<br>  a.id同parent_id   存在关系<br>-————————————————-<br> 1） 内连接<br>  select   a.<em>,b.</em>   from   a   inner   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                   1     23     1<br>  2   李四                  2     34     2<br>  2）左连接<br>  select   a.<em>,b.</em>   from   a   left   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                   1     23     1<br>  2   李四                  2     34     2<br>  3   王武                  null<br> 3） 右连接<br>  select   a.<em>,b.</em>   from   a   right   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                   1     23     1<br>  2   李四                  2     34     2<br>  null                       3     34     4<br> 4） 完全连接<br>  select   a.<em>,b.</em>   from   a   full   join   b     on   a.id=b.parent_id<br>  结果是<br>  1   张3                  1     23     1<br>  2   李四                 2     34     2<br>  null               　　  3     34     4<br>  3   王武                 null<br>——————————————————————————————–<strong>一、交叉连接（CROSS JOIN）</strong>交叉连接（CROSS JOIN）：有两种，显式的和隐式的，不带ON子句，返回的是两表的乘积，也叫笛卡尔积。<br>例如：下面的语句1和语句2的结果是相同的。</p><p><strong>语句1：隐式的交叉连接，没有CROSS JOIN。</strong>SELECT O.ID, O.ORDER_NUMBER, C.ID, C.NAME<br>FROM ORDERS O , CUSTOMERS C<br>WHERE O.ID=1;</p><p><strong>语句2：显式的交叉连接，使用CROSS JOIN。</strong>SELECT O.ID,O.ORDER_NUMBER,C.ID,<br>C.NAME<br>FROM ORDERS O CROSS JOIN CUSTOMERS C<br>WHERE O.ID=1;<br>语句1和语句2的结果是相同的，查询结果如下：</p><p><strong>二、内连接（INNER JOIN）</strong>内连接（INNER JOIN）：有两种，显式的和隐式的，返回连接表中符合连接条件和查询条件的数据行。（所谓的链接表就是数据库在做查询形成的中间表）。<br>例如：下面的语句3和语句4的结果是相同的。</p><p><strong>语句3：隐式的内连接，没有INNER JOIN，形成的中间表为两个表的笛卡尔积。</strong>SELECT O.ID,O.ORDER_NUMBER,C.ID,C.NAME<br>FROM CUSTOMERS C,ORDERS O<br>WHERE C.ID=O.CUSTOMER_ID;</p><p><strong>语句4：显示的内连接，一般称为内连接，有INNER JOIN，形成的中间表为两个表经过ON条件过滤后的笛卡尔积。</strong>SELECT O.ID,O.ORDER_NUMBER,C.ID,C.NAME<br>FROM CUSTOMERS C INNER JOIN ORDERS O ON C.ID=O.CUSTOMER_ID;<br>语句3和语句4的查询结果：</p><p><strong>三、外连接（OUTER JOIN）：</strong>外连不但返回符合连接和查询条件的数据行，还返回不符合条件的一些行。外连接分三类：左外连接（LEFT OUTER JOIN）、右外连接（RIGHT OUTER JOIN）和全外连接（FULL OUTER JOIN）。<br>三者的共同点是都返回符合连接条件和查询条件（即：内连接）的数据行。不同点如下：<br>左外连接还返回左表中不符合连接条件单符合查询条件的数据行。<br>右外连接还返回右表中不符合连接条件单符合查询条件的数据行。<br>全外连接还返回左表中不符合连接条件单符合查询条件的数据行，并且还返回右表中不符合连接条件单符合查询条件的数据行。全外连接实际是上左外连接和右外连接的数学合集（去掉重复），即“全外=左外 UNION 右外”。<br>说明：左表就是在“（LEFT OUTER JOIN）”关键字左边的表。右表当然就是右边的了。在三种类型的外连接中，OUTER 关键字是可省略的。</p><p>下面举例说明：<br><strong>语句5：左外连接（LEFT OUTER JOIN）</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;</p><p><strong>语句6：右外连接（RIGHT OUTER JOIN）</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O RIGHT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br>注意：WHERE条件放在ON后面查询的结果是不一样的。例如：</p><p><strong>语句7：WHERE条件独立。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>WHERE O.ORDER_NUMBER&lt;&gt;’MIKE_ORDER001’;</p><p><strong>语句8：将语句7中的WHERE条件放到ON后面。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID AND O.ORDER_NUMBER&lt;&gt;’MIKE_ORDER001’;</p><p>从语句7和语句8查询的结果来看，显然是不相同的，语句8显示的结果是难以理解的。因此，推荐在写连接查询的时候，ON后面只跟连接条件，而对中间表限制的条件都写到WHERE子句中。<br><strong>语句9：全外连接（FULL OUTER JOIN）。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O FULL OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br>注意：MySQL是不支持全外的连接的，这里给出的写法适合Oracle和DB2。但是可以通过左外和右外求合集来获取全外连接的查询结果。下图是上面SQL在Oracle下执行的结果：<br><strong>语句10：左外和右外的合集，实际上查询结果和语句9是相同的。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O LEFT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>UNION<br>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O RIGHT OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br>语句9和语句10的查询结果是相同的，如下：</p><p><strong>四、联合连接（UNION JOIN）：</strong>这是一种很少见的连接方式。Oracle、MySQL均不支持，其作用是：找出全外连接和内连接之间差异的所有行。这在数据分析中排错中比较常用。也可以利用数据库的集合操作来实现此功能。<br><strong>语句11：联合查询（UNION JOIN）例句，还没有找到能执行的SQL环境。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O UNION JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br><strong>语句12：语句11在DB2下的等价实现。还不知道DB2是否支持语句11呢！</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O FULL OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>EXCEPT<br>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O INNER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br><strong>语句13：语句11在Oracle下的等价实现。</strong>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O FULL OUTER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID<br>MINUS<br>SELECT O.ID,O.ORDER_NUMBER,O.CUSTOMER_ID,C.ID,C.NAME<br>FROM ORDERS O INNER JOIN CUSTOMERS C ON C.ID=O.CUSTOMER_ID;<br><strong>查询结果如下：</strong></p><p><strong>五、自然连接（NATURAL INNER JOIN）：</strong>说真的，这种连接查询没有存在的价值，既然是SQL2标准中定义的，就给出个例子看看吧。自然连接无需指定连接列，SQL会检查两个表中是否相同名称的列，且假设他们在连接条件中使用，并且在连接条件中仅包含一个连接列。不允许使用ON语句，不允许指定显示列，显示列只能用<em>表示（ORACLE环境下测试的）。对于每种连接类型（除了交叉连接外），均可指定NATURAL。下面给出几个例子。<br><strong>语句14：</strong>SELECT </em><br>FROM ORDERS O NATURAL INNER JOIN CUSTOMERS C;</p><p><strong>语句15：</strong>SELECT *<br>FROM ORDERS O NATURAL LEFT OUTER JOIN CUSTOMERS C;</p><p><strong>语句16：</strong>SELECT *<br>FROM ORDERS O NATURAL RIGHT OUTER JOIN CUSTOMERS C;</p><p><strong>语句17：</strong>SELECT *<br>FROM ORDERS O NATURAL FULL OUTER JOIN CUSTOMERS C;</p><p><strong>六、SQL查询的基本原理：两种情况介绍。第一、</strong>单表查询：根据WHERE条件过滤表中的记录，形成中间表（这个中间表对用户是不可见的）；然后根据SELECT的选择列选择相应的列进行返回最终结果。<br><strong>第二、</strong>两表连接查询：对两表求积（笛卡尔积）并用ON条件和连接连接类型进行过滤形成中间表；然后根据WHERE条件过滤中间表的记录，并根据SELECT指定的列返回查询结果。<br><strong>第三、</strong>多表连接查询：先对第一个和第二个表按照两表连接做查询，然后用查询结果和第三个表做连接查询，以此类推，直到所有的表都连接上为止，最终形成一个中间的结果表，然后根据WHERE条件过滤中间表的记录，并根据SELECT指定的列返回查询结果。<br>理解SQL查询的过程是进行SQL优化的理论依据。</p><p><strong>七、ON后面的条件（ON条件）和WHERE条件的区别：</strong>ON条件：是过滤两个链接表笛卡尔积形成中间表的约束条件。<br>WHERE条件：在有ON条件的SELECT语句中是过滤中间表的约束条件。在没有ON的单表查询中，是限制物理表或者中间查询结果返回记录的约束。在两表或多表连接中是限制连接形成最终中间表的返回结果的约束。<br>从这里可以看出，将WHERE条件移入ON后面是不恰当的。推荐的做法是：<br>ON只进行连接操作，WHERE只过滤中间表的记录。</p><p><strong>八、总结</strong>连接查询是SQL查询的核心，连接查询的连接类型选择依据实际需求。如果选择不当，非但不能提高查询效率，反而会带来一些逻辑错误或者性能低下。下面总结一下两表连接查询选择方式的依据：<br>1、 查两表关联列相等的数据用内连接。<br>2、 Col_L是Col_R的子集时用右外连接。<br>3、 Col_R是Col_L的子集时用左外连接。<br>4、 Col_R和Col_L彼此有交集但彼此互不为子集时候用全外。<br>5、 求差操作的时候用联合查询。<br>多个表查询的时候，这些不同的连接类型可以写到一块。例如：<br>SELECT T1.C1,T2.CX,T3.CY<br>FROM TAB1 T1<br>​       INNER JOIN TAB2 T2 ON (T1.C1=T2.C2)<br>​       INNER JOIN TAB3 T3 ON (T1.C1=T2.C3)<br>​       LEFT OUTER JOIN TAB4 ON(T2.C2=T3.C3);<br>WHERE T1.X &gt;T3.Y;<br>上面这个SQL查询是多表连接的一个示范。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Oracle&quot;&gt;&lt;a href=&quot;#Oracle&quot; class=&quot;headerlink&quot; title=&quot;Oracle&quot;&gt;&lt;/a&gt;Oracle&lt;/h2&gt;&lt;h3 id=&quot;sql原则&quot;&gt;&lt;a href=&quot;#sql原则&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Oracle" scheme="http://www.top.com/categories/Oracle/"/>
    
    
      <category term="oracle" scheme="http://www.top.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>oracle01</title>
    <link href="http://www.top.com/2018/01/13/oracle01/"/>
    <id>http://www.top.com/2018/01/13/oracle01/</id>
    <published>2018-01-13T07:26:00.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>sqlplus   system/system</p><p>sqlplus  system/system@192.168.227.10:1521/orcl</p><h3 id="Oracle应用开发实战"><a href="#Oracle应用开发实战" class="headerlink" title="Oracle应用开发实战"></a>Oracle应用开发实战</h3><h4 id="Oracle基本概念以及安装"><a href="#Oracle基本概念以及安装" class="headerlink" title="Oracle基本概念以及安装"></a>Oracle基本概念以及安装</h4><h5 id="Oracle简介"><a href="#Oracle简介" class="headerlink" title="Oracle简介"></a>Oracle简介</h5><h5 id="Oracle10g的安装"><a href="#Oracle10g的安装" class="headerlink" title="Oracle10g的安装"></a>Oracle10g的安装</h5><h5 id="虚拟网卡的设置"><a href="#虚拟网卡的设置" class="headerlink" title="虚拟网卡的设置"></a>虚拟网卡的设置</h5><p> sqlplus system/system 本机</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/180113/B2mkAI5B40.png?imageslim" alt="mark"></p><p>DML  数据库操作语言 insert  delete update</p><p>DQL  数据库查询语言  select  </p><p>DDL  数据库定义语言  create drop</p><p>DCL      数据库控制语言 </p><h4 id="PLSQL-Developer客户端工具的安装"><a href="#PLSQL-Developer客户端工具的安装" class="headerlink" title="PLSQL Developer客户端工具的安装"></a>PLSQL Developer客户端工具的安装</h4><h5 id="中文乱码问题解决"><a href="#中文乱码问题解决" class="headerlink" title="中文乱码问题解决"></a>中文乱码问题解决</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.查看服务器端编码</span><br><span class="line">select userenv(&apos;language&apos;) from dual;</span><br><span class="line">我实际查到的结果为:AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line">2.执行语句 select * from V$NLS_PARAMETERS </span><br><span class="line">查看第一行中PARAMETER项中为NLS_LANGUAGE 对应的VALUE项中是否和第一步得到的值一样。</span><br><span class="line">如果不是，需要设置环境变量.</span><br><span class="line">否则PLSQL客户端使用的编码和服务器端编码不一致,插入中文时就会出现乱码.</span><br><span class="line">3.设置环境变量</span><br><span class="line">计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;新建</span><br><span class="line">设置变量名:NLS_LANG,变量值:第1步查到的值, 我的是 AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line">4.重新启动PLSQL,插入数据正常</span><br></pre></td></tr></table></figure><h3 id="Oracle数据库的体系结构"><a href="#Oracle数据库的体系结构" class="headerlink" title="Oracle数据库的体系结构"></a>Oracle数据库的体系结构</h3><h4 id="数据库-database"><a href="#数据库-database" class="headerlink" title="数据库: database"></a>数据库: database</h4><p>Oracle数据库  一个操作系统只有一个库    名字 orcl</p><h4 id="实例-Instrance"><a href="#实例-Instrance" class="headerlink" title="实例 Instrance"></a>实例 Instrance</h4><p>  一个Oracle实例(Oracle instrance)由一系列的后台进程(Background Process)和内存结构(Memory  Structures)组成  .一个数据库可以有n个实例</p><h4 id="数据文件-dbf"><a href="#数据文件-dbf" class="headerlink" title="数据文件(dbf):"></a>数据文件(dbf):</h4><p>数据库中的数据是存储在表空间的,一个表空间有一个或者多个数据文件组成,一个数据文件只能对应一个表空间. 如果要删除某个数据文件,只能删除其所属的表空间了.</p><h4 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h4><p>表空间就是数据文件的逻辑映射,一个数据文件只能属于一个表空间    </p><h4 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h4><p>   用户实在实例下建立的,用来操作表空间的</p><p>—-System</p><p>—- Scott</p><p>select * from scott.emp</p><p> 用scoot用户登录   默认密码是tiger</p><p>使用sql重置scott密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter user scott identified by tiger;</span><br></pre></td></tr></table></figure><h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><h4 id="1-简单查询"><a href="#1-简单查询" class="headerlink" title="1.简单查询"></a>1.简单查询</h4><h5 id="1-简单查询-1"><a href="#1-简单查询-1" class="headerlink" title="1.简单查询"></a>1.简单查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from  dept;</span><br></pre></td></tr></table></figure><h5 id="2-别名的使用"><a href="#2-别名的使用" class="headerlink" title="2.别名的使用"></a>2.别名的使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select empno as &quot;员工编号&quot; from emp;</span><br><span class="line"></span><br><span class="line">select empno as &quot;员工编号&quot; ,ename as 员工姓名 , job &quot;职位&quot;,mgr 领导  from emp ;</span><br></pre></td></tr></table></figure><h4 id="2-四则运算"><a href="#2-四则运算" class="headerlink" title="2.四则运算"></a>2.四则运算</h4><p>​    +     -     *    /</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select sal , sal*12 from emp;</span><br><span class="line">select 1+1;   -- mysql  2    oracle  报错,确实from关键字</span><br><span class="line">select 1+1 from dept;   -- 查询结果为多列数据 </span><br><span class="line">-- dual  伪表 --</span><br><span class="line">select 1+1  from  dual;   --   目的就是为了配置查询语句 --</span><br></pre></td></tr></table></figure><h4 id="3-连接符"><a href="#3-连接符" class="headerlink" title="3.连接符"></a>3.连接符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;员工编号是XXX，姓名是XXX，职位是XXX&quot;</span><br><span class="line">select  empno ,ename , job from emp;</span><br><span class="line">select &apos;员工编号是XXX&apos; || &apos;姓名是XXX&apos; || &apos;职位是XXX&apos; from dual;</span><br><span class="line">--  把xxx替换   用来连接符 || 来代替</span><br><span class="line">select &apos;员工编号是&apos;||empno||&apos;姓名是&apos;||ename||&apos;职位是&apos;||job  from emp;</span><br></pre></td></tr></table></figure><h4 id="4-去重-distinct"><a href="#4-去重-distinct" class="headerlink" title="4.去重 distinct"></a>4.去重 distinct</h4><p>​     在条件上加上个  where后 distinct </p><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="条件查询where"><a href="#条件查询where" class="headerlink" title="条件查询where"></a>条件查询where</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--1、查询工资大于1500并且小于3000的员工</span><br><span class="line">select * from emp where  sal&gt;1500 and sal&lt;3000</span><br><span class="line">--2、between ..and   包含临界值</span><br><span class="line">select * from emp where  sal&gt;=1500 and sal&lt;=3000;</span><br><span class="line">select * from emp where  sal between 1500 and  3000;</span><br><span class="line">--  等于</span><br><span class="line">select * from emp where  sal  = 2450.00;</span><br><span class="line">select * from emp where  sal  in (2450.00,2850.00);</span><br><span class="line">--3、null 不是空字符串也不是0，是未知类型的数据并且 null和null不相等</span><br><span class="line">--查询奖金为空的员工</span><br><span class="line">-- 包含null的表达式都是空值  空值永远不等于空值</span><br><span class="line">select * from emp where comm is null;</span><br><span class="line">--查询奖金不为空的员工</span><br><span class="line">select * from emp where comm is  not  null;</span><br><span class="line">--4、not</span><br><span class="line">--查询工资不大于1500</span><br><span class="line">select * from emp where not(sal&gt;1500);</span><br><span class="line">--5、 in</span><br><span class="line">--查询员工编号是7788,7369,7566</span><br><span class="line">select * from emp where empno in(7788,7369,7566);</span><br><span class="line">--查询员工姓名是  SMITH  JONES  SCOTT</span><br><span class="line">select * from emp where ename in(&apos;SMITH&apos;,  &apos;JONES&apos;,  &apos;SCOTT&apos;);</span><br><span class="line">-- 查询一个时  相当于等于</span><br></pre></td></tr></table></figure><h4 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h4><p><strong>==注意：Oracle中是大小写敏感==</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select * from emp  where ename like &apos;_M%&apos;  --查询员工姓名中第二个字母是M的</span><br><span class="line">select * from emp  where ename like &apos;%M%&apos;  --查询员工姓名中包含字母是M的</span><br><span class="line">-- &quot;_&quot; 通配   &quot;%&quot; 多个</span><br><span class="line">-- 查询员工姓名中带_的</span><br><span class="line">-查询员工姓名中带_的</span><br><span class="line">select * from emp  where ename like &apos;%1_%&apos; escape &apos;1&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%a_%&apos; escape &apos;a&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%#_%&apos; escape &apos;#&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%@_%&apos; escape &apos;@&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%__%&apos; escape &apos;_&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%$_%&apos; escape &apos;$&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%|_%&apos; escape &apos;|&apos;;</span><br><span class="line"></span><br><span class="line">--错误的</span><br><span class="line">select * from emp  where ename like &apos;%||_%&apos; escape &apos;||&apos;;</span><br><span class="line">select * from emp  where ename like &apos;%12_%&apos; escape &apos;12&apos;;</span><br><span class="line">select * from emp  where ename like &apos;%&amp;_%&apos; escape &apos;&amp;&apos;; </span><br><span class="line">select * from emp  where ename like &apos;%%_%&apos; escape &apos;%&apos;;</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- order by    desc   asc</span><br><span class="line">-- 按照奖金从高到低排序</span><br><span class="line">select * from emp order by comm desc nulls last</span><br><span class="line"> -- 按照奖金从低到高排序</span><br><span class="line">select * from emp order by comm  nulls first</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h4><h5 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> -- lower--转小写</span><br><span class="line"> select lower(&apos;ORACLE&apos;) from dual;</span><br><span class="line"> select ename,lower(ename) from emp;</span><br><span class="line"> </span><br><span class="line"> -- upper--转大小</span><br><span class="line"> select ename,upper(ename) from emp;</span><br><span class="line"></span><br><span class="line">-- initcap--首字母大写</span><br><span class="line"> select ename,initcap(ename) from emp;</span><br><span class="line"></span><br><span class="line">-- substr--截取</span><br><span class="line"> -- oracle截取时起始位置写0和1是一样的</span><br><span class="line"> select substr(&apos;qwertyui&apos;,0,4) from dual;--qwer</span><br><span class="line"> select substr(&apos;qwertyui&apos;,1,4) from dual;--qwer</span><br><span class="line"> select substr(&apos;qwertyui&apos;,2,4) from dual;--wert</span><br><span class="line"> </span><br><span class="line"> -- length--长度</span><br><span class="line"> select length(&apos;qwertyui&apos;) from dual;--8</span><br><span class="line"> </span><br><span class="line"> --replace--替换</span><br><span class="line"> select replace(&apos;qwertyui&apos;,&apos;qw&apos;,&apos;aa&apos;) from dual;-- aaertyui</span><br><span class="line"> </span><br><span class="line"> -- concat--连接两个字符串函数  推荐使用||</span><br><span class="line"> select concat(&apos;aaa&apos; ,&apos;bbb&apos;) from dual;</span><br><span class="line"> select concat(concat(concat(&apos;aaa&apos; ,&apos;bbb&apos;),&apos;ccc&apos; ),&apos;ddd&apos;)  from dual;</span><br></pre></td></tr></table></figure><h5 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">数值函数</span><br><span class="line">round--四舍五入</span><br><span class="line">select round(12.456) from dual; --12</span><br><span class="line">select round(12.656) from dual; --13</span><br><span class="line">select round(12.456,2) from dual;--12.46</span><br><span class="line">select round(12.456,-1) from dual;--10</span><br><span class="line">select round(16.456,-1) from dual;--20</span><br><span class="line"></span><br><span class="line">-- trunc--截断   TRUNC()函数截取时不进行四舍五入   </span><br><span class="line">select trunc(12.456) from dual; --12</span><br><span class="line">select trunc(12.956) from dual; --12</span><br><span class="line">select trunc(12.456,2) from dual;--12.45</span><br><span class="line">select trunc(12.456,-1) from dual;--10</span><br><span class="line">select trunc(16.456,-1) from dual;--10  </span><br><span class="line"></span><br><span class="line">--mod--取余</span><br><span class="line">select mod(10,3) from dual;--1</span><br><span class="line">select mod(10,2) from dual;--0</span><br></pre></td></tr></table></figure><h5 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select sysdate from dual;</span><br><span class="line"></span><br><span class="line">--获取员工入职的天数</span><br><span class="line">select ename,hiredate,sysdate-hiredate from emp;</span><br><span class="line"></span><br><span class="line">--获取员工入职的周数</span><br><span class="line">select ename,hiredate,round((sysdate-hiredate)/7)  from emp;</span><br><span class="line">select  ename,hiredate,round((sysdate-hiredate)/7) from emp</span><br><span class="line"></span><br><span class="line">-- 获取员工入职的月数  </span><br><span class="line">-- months_between--两个日期的月数差</span><br><span class="line">select  ename,hiredate,months_between(sysdate,hiredate),(sysdate-hiredate)/30 from emp;</span><br><span class="line"></span><br><span class="line">-- add_months--添加月</span><br><span class="line">select  sysdate  from dual;</span><br><span class="line">select add_months(sysdate,1) from dual;</span><br><span class="line"></span><br><span class="line">-- oracle将毫秒装换为当前时间</span><br><span class="line">SELECT TO_CHAR(1511272758348/(1000 * 60 * 60 * 24) + TO_DATE(&apos;1970-01-01 08:00:00&apos;, &apos;YYYY-MM-DD HH:MI:SS&apos;), &apos;YYYY-MM-DD HH24:MI:SS&apos;) AS CDATE      </span><br><span class="line"> FROM DUAL;</span><br></pre></td></tr></table></figure><h5 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-- 转换函数</span><br><span class="line">-- to_char</span><br><span class="line">select 12,to_char(12) from dual;</span><br><span class="line"></span><br><span class="line">-- to_number</span><br><span class="line">select 12,to_number(&apos;12&apos;) from dual;</span><br><span class="line"></span><br><span class="line">select empno as &quot;员工编号&quot; ,ename as 员工姓名 , job &quot;职位&quot;,mgr 领导  from emp ;</span><br><span class="line"></span><br><span class="line">-- to_date  字符串转成日期</span><br><span class="line">select to_date(&apos;2016-01-31&apos;,&apos;yyyy-MM-dd&apos;)  from dual;</span><br><span class="line"></span><br><span class="line">select add_months(to_date(&apos;2016-01-31&apos;,&apos;yyyy-MM-dd&apos;),2) from dual;</span><br><span class="line">-- 结果一样</span><br><span class="line">select * from emp where hiredate = to_date(&apos;1981-02-20&apos;,&apos;yyyy-MM-dd&apos;);</span><br><span class="line">select * from emp where hiredate = to_date(&apos;1981/02/20&apos;,&apos;yyyy/MM/dd&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 日期转为字符串</span><br><span class="line">-- to_char</span><br><span class="line">select * from emp where to_char(hiredate,&apos;yyyy/MM/dd&apos;)= &apos;1981/02/20&apos;;</span><br><span class="line">select to_char(sysdate,&apos;yyyy-mm-dd hh24:mi:ss&apos;) from dual;</span><br><span class="line">select to_char(sysdate,&apos;yyyy&apos;),to_char(sysdate,&apos;mm&apos;),to_char(sysdate,&apos;dd&apos;),to_char(sysdate,&apos;day&apos;) from dual</span><br><span class="line">-- 今年是xxx,xxx月,xxx号,第xxx天,第xxx周</span><br><span class="line">select &apos;今天是xxx年&apos;,&apos;xxx月&apos;,&apos;xxx号&apos;,&apos;今年第xxx天&apos;,&apos;第xxx周&apos;  from dual;</span><br><span class="line">select &apos;今天是&apos; || to_char(sysdate,&apos;yyyy&apos;)  ||  to_char(sysdate,&apos;mm&apos;) || &apos;月&apos;  from dual;</span><br></pre></td></tr></table></figure><h5 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-- nvl  当comm为null时参与运算时为0</span><br><span class="line">员工年薪   null参与运算结果恒为null</span><br><span class="line">select ename,sal,comm,sal*12+nvl(comm,0) from emp;</span><br><span class="line">CLERK--职员</span><br><span class="line">SALESMAN--销售员</span><br><span class="line">---MANAGER--经理</span><br><span class="line">--ANALYST--分析师</span><br><span class="line">--PRESIDENT--总裁</span><br><span class="line">decode  --是Oracle独有的</span><br><span class="line">decode(列名,&apos;表中的数据&apos;,&apos;显示的值&apos;,&apos;表中的数据&apos;,&apos;显示的值&apos;,&apos;表中的数据&apos;,&apos;显示的值&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select ename,job  from emp;</span><br><span class="line">select ename,job ,</span><br><span class="line">decode(job,</span><br><span class="line">&apos;CLERK&apos;,&apos;职员&apos;,</span><br><span class="line">&apos;SALESMAN&apos;,&apos;销售员&apos;,</span><br><span class="line">&apos;其他&apos;</span><br><span class="line">) from emp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--条件表达式  </span><br><span class="line">--任何关系型数据库都支持</span><br><span class="line">case 列名  when 值  then 显示的值   end</span><br><span class="line"></span><br><span class="line">select ename,job ,</span><br><span class="line">   case job </span><br><span class="line">   when &apos;CLERK&apos; then &apos;职员&apos;</span><br><span class="line">   when &apos;SALESMAN&apos; then &apos;销售员&apos;</span><br><span class="line">   else &apos;其他&apos;</span><br><span class="line">    end </span><br><span class="line"> from emp</span><br></pre></td></tr></table></figure><h4 id="多行函数"><a href="#多行函数" class="headerlink" title="多行函数"></a>多行函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-- 多行函数  聚合函数  组函数</span><br><span class="line">-- sum  avg  count max min</span><br><span class="line">select avg(sal) from emp;</span><br><span class="line"></span><br><span class="line">select max(sal)- min(sal) from emp;</span><br><span class="line"></span><br><span class="line">select count(*) from emp;</span><br><span class="line"></span><br><span class="line">select sum(sal) from emp;</span><br><span class="line"> </span><br><span class="line">-- 分组</span><br><span class="line">group by</span><br><span class="line">--查询每个部门的平均工资</span><br><span class="line">select deptno,max(sal) from emp group by deptno;</span><br><span class="line"></span><br><span class="line">select deptno,avg(sal) from emp group by deptno;</span><br><span class="line"></span><br><span class="line">--查询部门的平均工资大于2000的部门</span><br><span class="line">select deptno,avg(sal) from emp group by deptno;</span><br><span class="line">having avg(sal)&gt;2000 </span><br><span class="line"></span><br><span class="line">--where 和having的区别</span><br><span class="line">--where过滤的是表中的物理列（表中存在的列）</span><br><span class="line">--where出现在group by前面  having出现在group by的后面</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">1. 查询工资大于12000的员工姓名和工资</span><br><span class="line"></span><br><span class="line">select * from employees;</span><br><span class="line"></span><br><span class="line">select  first_name|| &apos; &apos;||last_name ,salary from  employees where salary&gt;12000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 查询员工号为176的员工的姓名和部门号</span><br><span class="line">select first_name|| &apos; &apos;||last_name,department_id  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 选择工资不在5000到12000的员工的姓名和工资</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,salary as &quot;工资&quot;  from employees where salary&lt;5000 or salary&gt;12000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 选择雇用时间在1998-02-01到1998-05-01之间的员工姓名，job_id和雇用时间</span><br><span class="line">select job_id as id ,first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,round((sysdate - hire_date)) as &quot;天&quot;   from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 选择在20或50号部门工作的员工姓名和部门号</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;, department_id as &quot;部门编号&quot; from  employees where  department_id in(20,50) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. 选择在1994年雇用的员工的姓名和雇用时间</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,round((sysdate - hire_date)) as &quot;天&quot;  from employees where  </span><br><span class="line">to_char(hire_date,&apos;yyyy&apos;) = &apos;1994&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7. 选择公司中没有管理者的员工姓名及job_id </span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;, job_id as &quot;ID&quot;,manager_id  from employees  where manager_id is null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8. 选择公司中有奖金的员工姓名，工资和奖金级别</span><br><span class="line">select first_name|| &apos; &apos;||last_name as &quot;姓名&quot;,salary as &quot;工资&quot; ,commission_pct as &quot;奖金级别&quot;  from employees</span><br><span class="line"> where commission_pct is not null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 选择员工姓名的第三个字母是a的员工姓名</span><br><span class="line"></span><br><span class="line">select first_name  from employees  where first_name like  &apos;__a%&apos; ;</span><br><span class="line"></span><br><span class="line">10. 选择姓名中有字母a和e的员工姓名</span><br><span class="line">select first_name from employees where  first_name  like  &apos;%a%&apos; and  first_name  like &apos;%e%&apos;;</span><br><span class="line"> </span><br><span class="line">select first_name|| &apos; &apos;||last_name from employees  where   first_name|| &apos; &apos;||last_name  like  &apos;%a%&apos; and  </span><br><span class="line">  first_name|| &apos; &apos;||last_name  like &apos;%e%&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11. 显示系统时间</span><br><span class="line">select sysdate from dual;</span><br><span class="line"></span><br><span class="line">12. 查询员工号，姓名，工资，以及工资提高百分之20%后的结果（new salary）</span><br><span class="line">select  employee_id,first_name|| &apos; &apos;||last_name 姓名,salary  工资, salary*1.2  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13. 将员工的姓名按首字母排序，并写出姓名的长度（length）</span><br><span class="line">select  first_name|| &apos; &apos;||last_name 姓名 ,length(first_name|| &apos; &apos;||last_name ) from employees </span><br><span class="line">order by  first_name|| &apos; &apos;||last_name  asc;</span><br><span class="line"></span><br><span class="line">14. 查询各员工的姓名，并显示出各员工在公司工作的月份数</span><br><span class="line">select  first_name|| &apos; &apos;||last_name 姓名,months_between(sysdate,hire_date) &quot;工作的月份数&quot;  from employees;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15. 查询员工的姓名，以及在公司工作的月份数（worked_month），并按月份数降序排列</span><br><span class="line">select  first_name|| &apos; &apos;||last_name 姓名 ,months_between(sysdate,hire_date) &quot;工作的月份数&quot;  from employees</span><br><span class="line"> order by months_between(sysdate,hire_date) desc;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Oracle&quot;&gt;&lt;a href=&quot;#Oracle&quot; class=&quot;headerlink&quot; title=&quot;Oracle&quot;&gt;&lt;/a&gt;Oracle&lt;/h3&gt;&lt;p&gt;sqlplus   system/system&lt;/p&gt;
&lt;p&gt;sqlplus  system/system@
      
    
    </summary>
    
    
      <category term="oracle" scheme="http://www.top.com/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>排序方式</title>
    <link href="http://www.top.com/2017/12/29/%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.top.com/2017/12/29/排序方式/</id>
    <published>2017-12-28T17:36:00.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> arr[]=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">54</span>,<span class="number">56</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">15</span>,<span class="number">35</span>,<span class="number">25</span>,<span class="number">53</span>,<span class="number">51</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] sort = bubbleSort(arr);</span><br><span class="line">        <span class="comment">//System.out.println(Arrays.toString(sort));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] sort1 = selectionSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(sort1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] a)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp=a[j];</span><br><span class="line">                    a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                    a[j+<span class="number">1</span>]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[index] &gt; a[j]) &#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = a[index];</span><br><span class="line">            a[index] = a[i];</span><br><span class="line">            a[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序的原理：选择一个关键值作为基准值。比基准值小的都在左边序列（一般是无序的），比基准值大的都在右边（一般是无序的）。一般选择序列的第一个元素。</p><p>一次循环：从后往前比较，用基准值和最后一个值比较，如果比基准值小的交换位置，如果没有继续比较下一个，直到找到第一个比基准值小的值才交换。找到这个值之后，又从前往后开始比较，如果有比基准值大的，交换位置，如果没有继续比较下一个，直到找到第一个比基准值大的值才交换。直到从前往后的比较索引&gt;从后往前比较的索引，结束第一次循环，此时，对于基准值来说，左右两边就是有序的了。</p><p>接着分别比较左右两边的序列，重复上述的循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastSort</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">12</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">30</span>,<span class="number">45</span>,<span class="number">23</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = a.length-<span class="number">1</span>;</span><br><span class="line">        sort(a,start,end);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;a.length; i++)&#123;</span><br><span class="line">             System.out.println(a[i]);</span><br><span class="line">         &#125;</span><br><span class="line">        </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">         <span class="keyword">int</span> start = low;</span><br><span class="line">         <span class="keyword">int</span> end = high;</span><br><span class="line">         <span class="keyword">int</span> key = a[low];</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="keyword">while</span>(end&gt;start)&#123;</span><br><span class="line">             <span class="comment">//从后往前比较</span></span><br><span class="line">             <span class="keyword">while</span>(end&gt;start&amp;&amp;a[end]&gt;=key)  <span class="comment">//如果没有比关键值小的，比较下一个，直到有比关键值小的交换位置，然后又从前往后比较</span></span><br><span class="line">                 end--;</span><br><span class="line">             <span class="keyword">if</span>(a[end]&lt;=key)&#123;</span><br><span class="line">                 <span class="keyword">int</span> temp = a[end];</span><br><span class="line">                 a[end] = a[start];</span><br><span class="line">                 a[start] = temp;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//从前往后比较</span></span><br><span class="line">             <span class="keyword">while</span>(end&gt;start&amp;&amp;a[start]&lt;=key)<span class="comment">//如果没有比关键值大的，比较下一个，直到有比关键值大的交换位置</span></span><br><span class="line">                start++;</span><br><span class="line">             <span class="keyword">if</span>(a[start]&gt;=key)&#123;</span><br><span class="line">                 <span class="keyword">int</span> temp = a[start];</span><br><span class="line">                 a[start] = a[end];</span><br><span class="line">                 a[end] = temp;</span><br><span class="line">             &#125;</span><br><span class="line">         <span class="comment">//此时第一次循环比较结束，关键值的位置已经确定了。左边的值都比关键值小，右边的值都比关键值大，但是两边的顺序还有可能是不一样的，进行下面的递归调用</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//递归</span></span><br><span class="line">         <span class="keyword">if</span>(start&gt;low) sort(a,low,start-<span class="number">1</span>);<span class="comment">//左边序列。第一个索引位置到关键值索引-1</span></span><br><span class="line">         <span class="keyword">if</span>(end&lt;high) sort(a,end+<span class="number">1</span>,high);<span class="comment">//右边序列。从关键值索引+1到最后一个</span></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="排序" scheme="http://www.top.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://www.top.com/2017/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.top.com/2017/12/28/设计模式/</id>
    <published>2017-12-28T15:17:43.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-单列设计模式"><a href="#1-单列设计模式" class="headerlink" title="1.单列设计模式"></a>1.单列设计模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><p>1、单例类只能有一个实例。</p><p>2、单例类必须自己创建自己的唯一实例。</p><p>3、单例类必须给所有其他对象提供这一实例。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><p><strong>何时使用：</strong>当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong>判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong>构造函数是私有的。</p><p><strong>应用实例：</strong> 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</p><p><strong>优点：</strong> 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</p><p><strong>缺点：</strong>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><p><strong>使用场景：</strong> 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><p><strong>注意事项：</strong>getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *类一加载,单列初始化已经完成,保证getInstance的时候,单列已经是存在的了</span></span><br><span class="line"><span class="comment"> *所有懒汉式是线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line"><span class="comment">//直接创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon instance = <span class="keyword">new</span> SingleTon();</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有化构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回对象实列</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * 只有当调用getInstance的时候,才去初始化单列,是线程非安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line"><span class="comment">//声明变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingleTon singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有化构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供对方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SingleTon.class) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> SingleTon();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-装饰模式"><a href="#2-装饰模式" class="headerlink" title="2.装饰模式"></a>2.装饰模式</h1><p>装饰者模式</p><p>Decorator模式（别名Wrapper）：动态将职责附加到对象上，若要扩展功能，装饰者提供了比继承更具弹性的代替方案。</p><p>意图：</p><p>动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。</p><p>设计原则：</p><ol><li>多用组合，少用继承。</li></ol><p>利用继承设计子类的行为，是在编译时静态决定的，而且所有的子类都会继承到相同的行为。然而，如果能够利用组合的做法扩展对象的行为，就可以在运行时动态地进行扩展。</p><ol><li>类应设计的对扩展开放，对修改关闭。</li></ol><p>要点：</p><p>1． 装饰者和被装饰对象有相同的超类型。</p><p>2． 可以用一个或多个装饰者包装一个对象。</p><p>3． 装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，以达到特定的目的。</p><p>4． 对象可以在任何时候被装饰，所以可以在运行时动态的，不限量的用你喜欢的装饰者来装饰对象。</p><p>5． 装饰模式中使用继承的关键是想达到装饰者和被装饰对象的类型匹配，而不是获得其行为。</p><p>6． 装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型。在实际项目中可以根据需要为装饰者添加新的行为，做到“半透明”装饰者。</p><p>7． 适配器模式的用意是改变对象的接口而不一定改变对象的性能，而装饰模式的用意是保持接口并增加对象的职责。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Component：</span><br><span class="line"></span><br><span class="line">定义一个对象接口，可以给这些对象动态地添加职责。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Concrete Component：</span><br><span class="line"></span><br><span class="line">定义一个对象，可以给这个对象添加一些职责。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Write your code here</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Decorator：</span><br><span class="line"></span><br><span class="line">维持一个指向Component对象的引用，并定义一个与 Component接口一致的接口。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.component = component;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">component.operation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Component component;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Concrete Decorator：</span><br><span class="line"></span><br><span class="line">在Concrete Component的行为之前或之后，加上自己的行为，以“贴上”附加的职责。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//addBehavior也可以在前面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.operation();</span><br><span class="line"></span><br><span class="line">addBehavior();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBehavior</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//your code</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-单列设计模式&quot;&gt;&lt;a href=&quot;#1-单列设计模式&quot; class=&quot;headerlink&quot; title=&quot;1.单列设计模式&quot;&gt;&lt;/a&gt;1.单列设计模式&lt;/h1&gt;&lt;p&gt;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>map集合遍历的四种方式</title>
    <link href="http://www.top.com/2017/12/28/map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.top.com/2017/12/28/map集合遍历的四种方式/</id>
    <published>2017-12-28T15:04:48.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map集合遍历的方式"><a href="#map集合遍历的方式" class="headerlink" title="map集合遍历的方式"></a>map集合遍历的方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">"ab"</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">"ab"</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">"ab"</span>);<span class="comment">// 和上面相同 ， 会自己筛选</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 第一种：</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Set&lt;Integer&gt; set = map.keySet(); //得到所有key的集合</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * for (Integer in : set) &#123; String str = map.get(in);</span></span><br><span class="line"><span class="comment">         * System.out.println(in + "     " + str); &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"第一种：通过Map.keySet遍历key和value："</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer in : map.keySet()) &#123;</span><br><span class="line">            <span class="comment">//map.keySet()返回的是所有key的值</span></span><br><span class="line">            String str = map.get(in);<span class="comment">//得到每个key多对用value的值</span></span><br><span class="line">            System.out.println(in + <span class="string">"     "</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 第二种：</span></span><br><span class="line">        System.out.println(<span class="string">"第二种：通过Map.entrySet使用iterator遍历key和value："</span>);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">             Map.Entry&lt;Integer, String&gt; entry = it.next();</span><br><span class="line">               System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 第三种：推荐，尤其是容量大时</span></span><br><span class="line">        System.out.println(<span class="string">"第三种：通过Map.entrySet遍历key和value"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="comment">//Map.entry&lt;Integer,String&gt; 映射项（键-值对）  有几个方法：用上面的名字entry</span></span><br><span class="line">            <span class="comment">//entry.getKey() ;entry.getValue(); entry.setValue();</span></span><br><span class="line">            <span class="comment">//map.entrySet()  返回此映射中包含的映射关系的 Set视图。</span></span><br><span class="line">            System.out.println(<span class="string">"key= "</span> + entry.getKey() + <span class="string">" and value= "</span></span><br><span class="line">                    + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 第四种：</span></span><br><span class="line">        System.out.println(<span class="string">"第四种：通过Map.values()遍历所有的value，但不能遍历key"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String v : map.values()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"value= "</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map集合遍历的方式&quot;&gt;&lt;a href=&quot;#map集合遍历的方式&quot; class=&quot;headerlink&quot; title=&quot;map集合遍历的方式&quot;&gt;&lt;/a&gt;map集合遍历的方式&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="map" scheme="http://www.top.com/tags/map/"/>
    
      <category term="map遍历" scheme="http://www.top.com/tags/map%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>@Autowired @Resource @Qualifier的区别</title>
    <link href="http://www.top.com/2017/12/28/Autowired-Resource-Qualifier%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.top.com/2017/12/28/Autowired-Resource-Qualifier的区别/</id>
    <published>2017-12-28T12:42:04.000Z</published>
    <updated>2018-10-12T11:37:21.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring中Bean的配置"><a href="#Spring中Bean的配置" class="headerlink" title="Spring中Bean的配置"></a>Spring中Bean的配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id:名称 保证唯一 不要出现特殊符号</span><br><span class="line">class:类的全限定名(不论是继承类还是类本身都可以)</span><br><span class="line">scope:声明bean的作用范围</span><br><span class="line">常见值:</span><br><span class="line">        singlton:单例 (默认值)</span><br><span class="line">        prototype:多例</span><br></pre></td></tr></table></figure><h1 id="Spring常用的注解"><a href="#Spring常用的注解" class="headerlink" title="Spring常用的注解"></a>Spring常用的注解</h1><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171228/GeDba62BeJ.png?imageslim" alt="mark"></p><p>  <img src="http://ozaomob5f.bkt.clouddn.com/images/171228/lm1faI8clm.png?imageslim" alt="mark"></p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171228/3D5fjCHiGi.png?imageslim" alt="mark"></p><h1 id="Spring中-Autowired-Resource-Qualifie"><a href="#Spring中-Autowired-Resource-Qualifie" class="headerlink" title="Spring中@Autowired,@Resource ,@Qualifie"></a>Spring中@Autowired,@Resource ,@Qualifie</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置注解代替xml配置Bean开关</span></span><br><span class="line"><span class="comment"> base-package: 指定扫描哪些包中的注解</span></span><br><span class="line"><span class="comment"> 1.可以使用逗号分隔多个包名</span></span><br><span class="line"><span class="comment"> 2.cn.itcast =&gt; 所有以cn.itcast开头的包都包含</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car1"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.domain.Car"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"布加迪威航"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"绿色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.domain.Car"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"兰博基尼"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">value</span>=<span class="string">"粉色"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况自动注入就会失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span>  Car  car ;</span><br><span class="line">报错: 自动注入失败,没有找到唯一的car对象</span><br></pre></td></tr></table></figure><p>解决1 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifie</span>(<span class="string">"car1"</span>)</span><br><span class="line"><span class="keyword">private</span>  Car  car ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="meta">@Qualifie</span>(<span class="string">"car2"</span>)</span><br><span class="line"><span class="keyword">private</span>  Car  car ;</span><br></pre></td></tr></table></figure><p>解决2 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>(name=<span class="string">"car"</span>)</span><br><span class="line"><span class="keyword">private</span>  Car  car ;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring中Bean的配置&quot;&gt;&lt;a href=&quot;#Spring中Bean的配置&quot; class=&quot;headerlink&quot; title=&quot;Spring中Bean的配置&quot;&gt;&lt;/a&gt;Spring中Bean的配置&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="Autowired" scheme="http://www.top.com/tags/Autowired/"/>
    
      <category term="Resource" scheme="http://www.top.com/tags/Resource/"/>
    
      <category term="Qualifier" scheme="http://www.top.com/tags/Qualifier/"/>
    
      <category term="Component" scheme="http://www.top.com/tags/Component/"/>
    
  </entry>
  
  <entry>
    <title>JVM参数设置</title>
    <link href="http://www.top.com/2017/12/24/JVM%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <id>http://www.top.com/2017/12/24/JVM参数设置/</id>
    <published>2017-12-24T07:23:50.000Z</published>
    <updated>2018-10-12T11:37:21.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-tomcat调优"><a href="#1-tomcat调优" class="headerlink" title="1.tomcat调优:"></a>1.tomcat调优:</h2><p>通过优化tomcat提高网站的并发能力。</p><p>1.优化配置在conf/ tomcat-users.xml下添加用户：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rolerolename="manager-gui"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rolerolename="admin-gui"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span><span class="attr">roles</span>=<span class="string">"admin-gui,admin,manager-gui,manager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>启动tomcat，登录查看信息：<a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a></p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/4JG15lBAf3.png?imageslim" alt="mark"></p><p>tomcat的运行模式有3种：</p><p>1、  bio<br>默认的模式,性能非常低下,没有经过任何优化处理和支持.</p><p>2、  nio<br>==nio(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。==</p><p>3、  apr<br>安装起来最困难,但是从操作系统级别来解决异步的IO问题,大幅度的提高性能.</p><h2 id="2-启动NIO模式"><a href="#2-启动NIO模式" class="headerlink" title="2 .启动NIO模式"></a>2 .启动NIO模式</h2><p>修改server.xml里的Connector节点,修改protocol为org.apache.coyote.http11.Http11NioProtocol</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span>   <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span>  <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-执行器（线程池）"><a href="#3-执行器（线程池）" class="headerlink" title="3.执行器（线程池）"></a>3.执行器（线程池）</h2><p>在tomcat中每一个用户请求都是一个线程，所以可以使用线程池提高性能。</p><p>开启并且使用</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/4m3bhaFHK2.png?imageslim" alt="mark"></p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/G3JAla02a2.png?imageslim" alt="mark"></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>Attribute</th><th>Description</th></tr></thead><tbody><tr><td>threadPriority  （优先级）</td><td>(int) The thread priority for threads in the executor,  the default is <code>5</code> (the value of the<code>Thread.NORM_PRIORITY</code> constant)</td></tr><tr><td>daemon（守护进程）</td><td>(boolean) Whether the threads should be daemon threads or  not, the default is <code>true</code></td></tr><tr><td>namePrefix（名称前缀）</td><td>(String) The name prefix for each thread created by the  executor. The thread name for an individual thread will be <code>namePrefix+threadNumber</code></td></tr><tr><td>maxThreads（最大线程数）</td><td>(int) The max number of active threads in this pool,  default is <code>200</code></td></tr><tr><td>minSpareThreads（最小活跃线程数）</td><td>(int) The minimum number of threads always kept alive,  default is <code>25</code></td></tr><tr><td>maxIdleTime(空闲线程等待时间)</td><td>(int) The number of milliseconds before an idle thread  shutsdown, unless the number of active threads are less or equal to  minSpareThreads. Default value is <code>60000</code>(1 minute)</td></tr><tr><td>maxQueueSize（最大的等待队里数，超过则请求拒绝）</td><td>(int) The maximum number of runnable tasks that can queue  up awaiting execution before we reject them. Default value is <code>Integer.MAX_VALUE</code></td></tr><tr><td>prestartminSpareThreads（是否在启动时就生成minSpareThreads个线程）</td><td>(boolean) Whether minSpareThreads should be started when  starting the Executor or not, the default is <code>false</code></td></tr><tr><td>threadRenewalDelay（重建线程的时间间隔）</td><td>(long) If a <a href="http://127.0.0.1:8080/docs/config/listeners.html" target="_blank" rel="noopener">ThreadLocalLeakPreventionListener</a> is configured, it will notify this  executor about stopped contexts. After a context is stopped, threads in the  pool are renewed. To avoid renewing all threads at the same time, this option  sets a delay between renewal of any 2 threads. The value is in ms, default  value is <code>1000</code> ms. If value is negative, threads  are not renewed.  。重建线程池内的线程时，为了避免线程同时重建，每隔threadRenewalDelay（单位： ms ）重建一个线程。默认值为1000 ，设置为负则不重建</td></tr></tbody></table><h2 id="4-连接器（Connector）"><a href="#4-连接器（Connector）" class="headerlink" title="4. 连接器（Connector）"></a>4. 连接器（Connector）</h2><p>Connector是Tomcat接收请求的入口，每个Connector有自己专属的监听端口</p><p>Connector有两种：HTTP Connector和AJPConnector</p><p>…….</p><p>这里东西很多   具体看 文档</p><h2 id="5-禁用AJP连接器"><a href="#5-禁用AJP连接器" class="headerlink" title="5.禁用AJP连接器    "></a>5.禁用AJP连接器    </h2><p>AJP（Apache JServerProtocol）</p><p>AJPv13协议是面向包的。WEB服务器和Servlet容器通过TCP连接来交互；为了节省SOCKET创建的昂贵代价，WEB服务器会尝试维护一个永久TCP连接到servlet容器，并且在多个请求和响应周期过程会重用连接。</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/g3mc2K6aHg.png?imageslim" alt="mark"></p><p>我们一般是使用Nginx+tomcat的架构，所以用不着AJP协议，所以把AJP连接器禁用。</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/meDmH1D599.png?imageslim" alt="mark"></p><p>在管理界面中看不到ajp了：</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/kHaGCDg8Kk.png?imageslim" alt="mark"></p><h2 id="6-JVM参数的优化"><a href="#6-JVM参数的优化" class="headerlink" title="6.JVM参数的优化"></a>6.JVM参数的优化</h2><p>适当调整Tomcat的运行JVM参数可以提升整体性能</p><h3 id="6-1-JVM内存模型"><a href="#6-1-JVM内存模型" class="headerlink" title="6.1 JVM内存模型"></a>6.1 JVM内存模型</h3><h4 id="6-1-1-Java栈"><a href="#6-1-1-Java栈" class="headerlink" title="6.1.1.  Java栈"></a>6.1.1.  Java栈</h4><p>​    Java栈是与每一个线程关联的，JVM在创建每一个线程的时候，会分配一定的栈空间给线程。它主要用来存储线程执行过程中的局部变量，方法的返回值，以及方法调用上下文。栈空间随着线程的终止而释放。</p><h4 id="6-1-2-Java堆"><a href="#6-1-2-Java堆" class="headerlink" title="6.1.2.  Java堆"></a>6.1.2.  Java堆</h4><p>​    Java中堆是由所有的线程共享的一块内存区域，堆用来保存各种JAVA对象，比如数组，线程对象等。</p><h4 id="6-1-3-Java堆的分区"><a href="#6-1-3-Java堆的分区" class="headerlink" title="6.1.3.  Java堆的分区"></a>6.1.3.  Java堆的分区</h4><p>​    JVM堆一般又可以分为以下三部分：</p><p>​    <img src="http://ozaomob5f.bkt.clouddn.com/images/171224/mH4k11bkBl.png?imageslim" alt="mark"></p><p>◆ Young 年轻区（代）</p><p>Young区被划分为三部分，Eden区和两个大小严格相同的Survivor区，其中，Survivor区间中，某一时刻只有其中一个是被使用的，另外一个留做垃圾收集时复制对象用，在Eden区间变满的时候， GC就会将存活的对象移到空闲的Survivor区间中，根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到Tenured区间。</p><p>◆ Tenured 年老区</p><p>Tenued区主要保存生命周期长的对象，一般是一些老的对象，当一些对象在Young复制转移一定的次数以后，对象就会被转移到Tenured区，一般如果系统中用了application级别的缓存，缓存中的对象往往会被转移到这一区间。</p><p>◆ Perm 永久区</p><p>Perm代主要保存class,method,filed对象，这部份的空间一般不会溢出，除非一次性加载了很多的类，不过在涉及到热部署的应用服务器的时候，有时候会遇到java.lang.OutOfMemoryError : PermGen space 的错误，造成这个错误的很大原因就有可能是每次都重新部署，但是重新部署后，类的class没有被卸载掉，这样就造成了大量的class对象保存在了perm中，这种情况下，一般重新启动应用服务器可以解决问题。</p><p>Virtual区：</p><p>最大内存和初始内存的差值，就是Virtual区。</p><h4 id="6-1-4-设置区大小"><a href="#6-1-4-设置区大小" class="headerlink" title="6.1.4.设置区大小"></a>6.1.4.设置区大小</h4><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/d862eA712H.png?imageslim" alt="mark"></p><p>◆ Total Heap</p><p>-Xms ：指定了JVM初始启动以后初始化内存</p><p>-Xmx：指定JVM堆得最大内存，在JVM启动以后，会分配-Xmx参数指定大小的内存给JVM，但是不一定全部使,JVM会根据-Xms参数来调节真正用于JVM的内存</p><p>-Xmx -Xms之差就是三个Virtual空间的大小</p><p>◆ Young Generation</p><p>-XX:NewRatio=8意味着tenured 和 young的比值8：1，这样eden+2*survivor=1/9</p><p>堆内存</p><p>-XX:SurvivorRatio=32意味着eden和一个survivor的比值是32：1，这样一个Survivor就占Young区的1/34.</p><p>-Xmn 参数设置了年轻代的大小</p><p>◆ Perm Generation</p><p>-XX:PermSize=16M -XX:MaxPermSize=64M</p><p>Thread Stack</p><p>-XX:Xss=128K</p><h3 id="6-2-常用参数"><a href="#6-2-常用参数" class="headerlink" title="6.2. 常用参数"></a>6.2. 常用参数</h3><p>修改文件：bin/catalina.sh</p><p>JAVA_OPTS=”-Dfile.encoding=UTF-8-server -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=512m-XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewRatio=2-XX:MaxTenuringThreshold=50 -XX:+DisableExplicitGC”</p><p>参数说明：</p><p>1、  file.encoding 默认文件编码</p><p>2、  -Xmx1024m  设置JVM最大可用内存为1024MB</p><p>3、  -Xms1024m  设置JVM最小内存为1024m。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</p><p>4、  -XX:NewSize  设置年轻代大小</p><p>5、  XX:MaxNewSize 设置最大的年轻代大小</p><p>6、  -XX:PermSize  设置永久代大小</p><p>7、  -XX:MaxPermSize 设置最大永久代大小</p><p>8、  -XX:NewRatio=4:设置年轻代（包括Eden和两个Survivor区）与终身代的比值（除去永久代）。设置为4，则年轻代与终身代所占比值为1：4，年轻代占整个堆栈的1/5</p><p>9、  -XX:MaxTenuringThreshold=0：设置垃圾最大年龄，默认为：15。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。</p><p>10、             -XX:+DisableExplicitGC这个将会忽略手动调用GC的代码使得System.gc()的调用就会变成一个空调用，完全不会触发任何GC</p><h3 id="6-3-在tomcat中设置JVM参数"><a href="#6-3-在tomcat中设置JVM参数" class="headerlink" title="6.3. 在tomcat中设置JVM参数"></a>6.3. 在tomcat中设置JVM参数</h3><h4 id="6-3-1-linux"><a href="#6-3-1-linux" class="headerlink" title="6.3.1.  linux"></a>6.3.1.  linux</h4><p>修改bin/catalina.sh文件参数（第一行）</p><p>JAVA_OPTS=”-Dfile.encoding=UTF-8-server -Xms1024m -Xmx2048m -XX:NewSize=512m -XX:MaxNewSize=1024m-XX:PermSize=256m -XX:MaxPermSize=256m -XX:MaxTenuringThreshold=10-XX:NewRatio=2 -XX:+DisableExplicitGC”</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/9Hhig3kk9B.png?imageslim" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-tomcat调优&quot;&gt;&lt;a href=&quot;#1-tomcat调优&quot; class=&quot;headerlink&quot; title=&quot;1.tomcat调优:&quot;&gt;&lt;/a&gt;1.tomcat调优:&lt;/h2&gt;&lt;p&gt;通过优化tomcat提高网站的并发能力。&lt;/p&gt;
&lt;p&gt;1.优化配置在c
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.top.com/tags/java/"/>
    
      <category term="垃圾回收" scheme="http://www.top.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="tomcat优化" scheme="http://www.top.com/tags/tomcat%E4%BC%98%E5%8C%96/"/>
    
      <category term="jvm参数" scheme="http://www.top.com/tags/jvm%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java垃圾回收机制</title>
    <link href="http://www.top.com/2017/12/24/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://www.top.com/2017/12/24/JVM垃圾回收/</id>
    <published>2017-12-24T02:23:50.000Z</published>
    <updated>2018-10-12T11:37:21.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java垃圾回收机制"><a href="#Java垃圾回收机制" class="headerlink" title="Java垃圾回收机制"></a>Java垃圾回收机制</h1><h2 id="1-对于Java的GC哪些内存需要回收"><a href="#1-对于Java的GC哪些内存需要回收" class="headerlink" title="1.对于Java的GC哪些内存需要回收"></a>1.对于Java的GC哪些内存需要回收</h2><p>​    内存运行时JVM会有一个运行时数据区来管理内存.主要包括5大部分: 程序计数器(Program Counter Register) ,虚拟机栈(JVM Stack) , 本地方法栈(Native Method Stack), 方法区(Method Area) , 堆(Heap) .</p><p>​    而其中程序计数器,虚拟机栈,本地方法栈是每个线程私有的内存空间,随线程而生,随线程而死亡.列如栈中的每一个栈帧中分配多少内存基本上在类结构确定是哪个就已知了,因此3个区域的内存分配和回收都是确定的,无需考虑内存回收的问题.</p><p>​    但是方法区和堆就不同了,一个接口的多个实现类需要的内存可能不一样,我们在运行期间才会知道会创建哪些对象,这部分内存的分配和回收都是动态的,GC主要关注的就是这部分内存</p><p>​    </p><h2 id="2-Java-的-GC-什么时候回收垃圾"><a href="#2-Java-的-GC-什么时候回收垃圾" class="headerlink" title="2.Java 的 GC 什么时候回收垃圾 "></a>2.Java 的 GC 什么时候回收垃圾 </h2><p>在面试中经常会碰到这样一个问题（事实上笔者也碰到过） ：如何判断一个对象已经死去？<br>很容易想到的一个答案是：对一个对象添加引用计数器。每当有地方引用它时，计数器值加 1；当引用失效时，计<br>数器值减 1.而当计数器的值为 0 时这个对象就不会再被使用，判断为已死。是不是简单又直观。然而，很遗憾。这种做法是错误的！为什么是错的呢？事实上，用引用计数法确实在大部分情况下是一个不错的解决方案，而在实际的应用中也有不少案例，但它却无法解决对象之间的循环引用问题。比如对象 A 中有一个字段指向了对象 B，而对象 B 中也有一个字段指向了对象 A，而事实上他们俩都不再使用，但计数器的值永远都不可能为 0，也就不会被回收，然后就发生了内存泄露。<br>所以，正确的做法应该是怎样呢？</p><p>在 Java， C#等语言中，比较主流的判定一个对象已死的方法是：可达性分析(Reachability Analysis).<br>所有生成的对象都是一个称为”GC Roots”的根的子树。从 GC Roots 开始向下搜索，搜索所经过的路径称为引用链<br>(Reference Chain)，当一个对象到 GC Roots 没有任何引用链可以到达时，就称这个对象是不可达的（不可引用的），也就是可以被 GC 回收了。</p><p>无论是引用计数器还是可达性分析，判定对象是否存活都与引用有关！那么，如何定义对象的引用呢？<br>我们希望给出这样一类描述：当内存空间还够时，能够保存在内存中；如果进行了垃圾回收之后内存空间仍旧非<br>常紧张，则可以抛弃这些对象。所以根据不同的需求，给出如下四种引用，根据引用类型的不同， GC 回收时也会有不同的操作：<br>1)强引用(Strong Reference):Object obj = new Object();只要强引用还存在， GC 永远不会回收掉被引用的对象。</p><p>2)软引用(Soft Reference)：描述一些还有用但非必需的对象。在系统将会发生内存溢出之前，会把这些对象列入<br>回收范围进行二次回收（即系统将会发生内存溢出了，才会对他们进行回收。</p><p>3)弱引用(Weak Reference):程度比软引用还要弱一些。这些对象只能生存到下次 GC 之前。当 GC 工作时，无论内<br>存是否足够都会将其回收（即只要进行 GC，就会对他们进行回收)</p><p>4)虚引用(Phantom Reference):一个对象是否存在虚引用，完全不会对其生存时间构成影响。<br>关于方法区中需要回收的是一些废弃的常量和无用的类。</p><p>1.废弃的常量的回收。这里看引用计数就可以了。没有对象引用该常量就可以放心的回收了。<br>2.无用的类的回收。什么是无用的类呢？<br>A.该类所有的实例都已经被回收。也就是 Java 堆中不存在该类的任何实例；<br>B.加载该类的 ClassLoader 已经被回收；<br>C.该类对应的 java.lang.Class 对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</p><p>总而言之:<br>​    对于堆中的对象，主要用可达性分析判断一个对象是否还存在引用，如果该对象没有任何引用就应该被回收。而根据我们实际对引用的不同需求，又分成了 4 中引用，每种引用的回收机制也是不同的。对于方法区中的常量和类，当一个常量没有任何对象引用它，它就可以被回收了。而对于类，如果可以判定它为无用类，就可以被回收了。 </p><h2 id="3-JVM内存模型"><a href="#3-JVM内存模型" class="headerlink" title="3. JVM内存模型"></a>3. JVM内存模型</h2><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/l2CbHmh9GL.png?imageslim" alt="mark"></p><h2 id="4-java虚拟机JVM垃圾收集算法有四种："><a href="#4-java虚拟机JVM垃圾收集算法有四种：" class="headerlink" title="4. java虚拟机JVM垃圾收集算法有四种："></a>4. java虚拟机JVM垃圾收集算法有四种：</h2><ol><li><p>标记-清除算法</p><p> 这是JVM最基础的垃圾收集算法。 该算法分为两个阶段：“标记”和“清除”。首先标记处所有需要回收的对象，然后统一清除被标记的对象。 该算法，标记和清除两个阶段的效率不高。此外，回收后会产生大量的不连续的内存碎片，进一步会导致垃圾回收次数的增加。</p><p> <img src="http://ozaomob5f.bkt.clouddn.com/images/171224/k2emL7Bg3k.png?imageslim" alt="mark"></p></li><li><p>复制算法</p><p>​     为了解决标记-清除算法的效率问题，出现了复制算法，如下图： 该算法的思想是将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这块的内存用完了，则将还存活的对象复制到另外一块内存上去，然后再把刚使用过的内存空间一次清理掉。从而达到了每次垃圾回收时只是针对其中一块，避免了产生内存碎片等情况。该算法的代价是只是使用了其中一本的内存，代价有点高。</p><p>​      随着研究的不断发现，商业虚拟机在该算法中不断进行优化尝试。比如在HotSpot虚拟机中，新生代中Eden和Survivor的大小比例为8：:1，因为新生代的对象需要回收的概率大（对象的生命周期短，存活率低），所以内存的可用率达到了90%（新生代分为：Eden和两块Survivor）。每次都是把Eden和Survivor中存活的对象拷贝到另一块Survivor中，然后清理掉Eden和Survivor空间。</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/Bl47HFhdl2.png?imageslim" alt="mark"></p></li><li><p>标记-整理算法</p><p>  当复制收集算法面对的回收对象为存活率较高的情况时，要执行较多的复制操作，效率会变低。为了提高这些对象垃圾回收效率，充分利用可用内存，标记-整理算法出现了。如下图：</p><p>​        <img src="http://ozaomob5f.bkt.clouddn.com/images/171224/BjjDaB3i30.png?imageslim" alt="mark"></p><p>​      该算法集成了标记-清除和复制收集算法的优点。第一个阶段仍是进行标记，第二个阶段是把所有存活的对象都向一端移动，按顺序排放，然后直接清理掉端边界意外的内存。该算法避免了标记-清除的内存碎片问题以及复制算法的空间问题。该算法适合于老年代对象的回收。</p></li><li><p>分代收集算法</p><p>  这是目前大多数虚拟机采用的垃圾回收算法。基于对象的生命周期划分为新生代、老年代以及持久代。比如新生代就采用复制收集算法，而老年代就采用标记-清除或者标记-整理算法。如下图： 对于分代收集，虚拟机需要区分对象的分配年代，是放在新生代还是否放在老年代？。解决的办法是：jvm为每个对象定义了一个对象年龄计数器。如果对象在Eden出生并且经过第一次新生代GC（Minor GC）后仍然存活并且能被Survivor容纳，则该对象将被移动到另一块Survivor空间，并将对象年龄计数器加1。对象在Survivor区中每经历过一次Minor GC，年龄计数器就加1，当它的年龄达到设定的阈值（默认是15）时，则被移动到老年代中。阈值的设置通过参数-XX：MaxTenuringThreshold设置。</p><p>​      当然，并不是一定达到阈值才被移动到老年代，为了适应复杂的情况，动态的判定对象年龄，虚拟机规定：如果Survivor空间中相同年龄的所有对象大小的总和大于Survivor空间的一半，对象的年龄大于或者等于该年龄的对象就可以直接进入老年代，不必等到达到设定的阈值。</p><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/kg7ggAJBj0.png?imageslim" alt="mark"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java垃圾回收机制&quot;&gt;&lt;a href=&quot;#Java垃圾回收机制&quot; class=&quot;headerlink&quot; title=&quot;Java垃圾回收机制&quot;&gt;&lt;/a&gt;Java垃圾回收机制&lt;/h1&gt;&lt;h2 id=&quot;1-对于Java的GC哪些内存需要回收&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
    
      <category term="java" scheme="http://www.top.com/tags/java/"/>
    
      <category term="垃圾回收" scheme="http://www.top.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>Solr开发</title>
    <link href="http://www.top.com/2017/12/15/Solr%E5%BC%80%E5%8F%91/"/>
    <id>http://www.top.com/2017/12/15/Solr开发/</id>
    <published>2017-12-15T14:27:08.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Solr单机版的使用"><a href="#Solr单机版的使用" class="headerlink" title="Solr单机版的使用"></a>Solr单机版的使用</h1><p>在虚拟机上模拟solr单机版和集群的使用,和实际开发其实是差不多的</p><p>准备tomcat  solr的安装包</p><h2 id="1-安装单机版的solr"><a href="#1-安装单机版的solr" class="headerlink" title="1.安装单机版的solr"></a>1.安装单机版的solr</h2><p> mkdir  singleSolr<br> 在singleSolr目录下<br> 导入apache-tomcat-7.0.52  解压   重命名为tomcat-solr<br> 导入solr-4.10.3.tgz.tgz  tar zxvf  solr-4.10.3.tgz.tgz  </p><h2 id="2-部署solr"><a href="#2-部署solr" class="headerlink" title="2.部署solr"></a>2.部署solr</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把war包放入 tomcat  webapp</span><br><span class="line">cp solr-4.10.3/example/webapps/solr.war  tomcat-solr/webapps/</span><br></pre></td></tr></table></figure><h2 id="3-导入依赖jar包"><a href="#3-导入依赖jar包" class="headerlink" title="3.导入依赖jar包"></a>3.导入依赖jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd solr-4.10.3/example/lib/ext/</span><br><span class="line">把ext下的所有jar包  复制到tomcat-solr/webapps/solr/WEB-INF/lib/</span><br><span class="line">复制到cp -r solr-4.10.3/example/lib/ext/*  tomcat-solr/webapps/solr/WEB-INF/lib/</span><br></pre></td></tr></table></figure><h2 id="4-拷贝solr-4-10-3-example-solr到-singleSolr目录下"><a href="#4-拷贝solr-4-10-3-example-solr到-singleSolr目录下" class="headerlink" title="4.拷贝solr-4.10.3/example/solr到  singleSolr目录下"></a>4.拷贝solr-4.10.3/example/solr到  singleSolr目录下</h2><p>这一步是配置仓库的路径</p><pre><code>cp -r solr-4.10.3/example/solr   .    注意 . 代表当前目录windows下配置 catalina.bat  set JAVA_OPTS=-&quot;Dsolr.solr.home=E:\solr&quot;Linux下配置   catalina.sh   export JAVA_OPTS =&quot;-Dsolr.solr.home=/usr/local/hadoop/singleSolr/solr/&quot;</code></pre><h2 id="5-依赖类库"><a href="#5-依赖类库" class="headerlink" title="5.依赖类库"></a>5.依赖类库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd solr-4.10.3/   </span><br><span class="line">拷贝solr-4.10./3 下的  contrib   contrib</span><br><span class="line">到4中的索引库目录下</span><br><span class="line">命令: cd  singleSolr/solr</span><br><span class="line">  cp  -r  ../solr-4.10.3/contrib/  ../solr-4.10.3/dist/  .    </span><br><span class="line">   不要忘记. 当前目录(singleSolr/solr)  ---&gt; 索引库的目录</span><br></pre></td></tr></table></figure><h2 id="6-修改索引库下的配置-singleSolr-solr"><a href="#6-修改索引库下的配置-singleSolr-solr" class="headerlink" title="6.修改索引库下的配置(singleSolr/solr)"></a>6.修改索引库下的配置(singleSolr/solr)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mv collection1 item   --把索引库名字改成item</span><br><span class="line">cd  item/</span><br><span class="line">vim  core.properties   把name=collection1改为name=item</span><br><span class="line">这样索引库的名字才是修改成功了</span><br><span class="line"></span><br><span class="line">再修改配置文件</span><br><span class="line">cd  item/conf</span><br><span class="line">修改 item/conf下的   vim solrconfig.xml</span><br></pre></td></tr></table></figure><p>  修改引入jar包的位置 </p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/contrib/extraction/lib"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/dist/"</span> <span class="attr">regex</span>=<span class="string">"solr-cell-\d.*\.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/contrib/clustering/lib/"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/dist/"</span> <span class="attr">regex</span>=<span class="string">"solr-clustering-\d.*\.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/contrib/langid/lib/"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/dist/"</span> <span class="attr">regex</span>=<span class="string">"solr-langid-\d.*\.jar"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/contrib/velocity/lib"</span> <span class="attr">regex</span>=<span class="string">".*\.jar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lib</span> <span class="attr">dir</span>=<span class="string">"$&#123;solr.install.dir:..&#125;/dist/"</span> <span class="attr">regex</span>=<span class="string">"solr-velocity-\d.*\.jar"</span> /&gt;</span></span><br></pre></td></tr></table></figure><pre><code>这一步做个说明  这个是solr的索引库的位置export JAVA_OPTS =&quot;-Dsolr.solr.home=/usr/local/hadoop/singleSolr/solr/&quot;</code></pre><h2 id="7-启动solr服务-查看是否配置成功"><a href="#7-启动solr服务-查看是否配置成功" class="headerlink" title="7.启动solr服务  查看是否配置成功"></a>7.启动solr服务  查看是否配置成功</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh  tomcat-solr/bin/startup.sh       -- 启动sol服务</span><br><span class="line">tail -f  tomcat-solr/logs/catalina.out -- 查看进程</span><br></pre></td></tr></table></figure><h2 id="8-安装ak分词器"><a href="#8-安装ak分词器" class="headerlink" title="8.安装ak分词器"></a>8.安装ak分词器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">首先需要在项目下导入jar包</span><br><span class="line">cd  /usr/local/hadoop/singleSolr/tomcat-solr/webapps/solr/WEB-INF/lib</span><br><span class="line"></span><br><span class="line">导入分词器的 jar包      IKAnalyzer2012FF_u1.jar</span><br><span class="line"></span><br><span class="line">在/usr/local/hadoop/singleSolr/tomcat-solr/webapps/solr/WEB-INF下导入分词器的配置文件</span><br><span class="line"></span><br><span class="line">创建  classes 文件夹(如过没有的话)</span><br><span class="line">ext.dic</span><br><span class="line">IKAnalyzer.cfg.xml</span><br><span class="line">log4j.properties</span><br><span class="line">stopword.dic</span><br><span class="line"></span><br><span class="line"> Ik分词器的环境准备好了</span><br></pre></td></tr></table></figure><h2 id="9-再去配置索引仓库"><a href="#9-再去配置索引仓库" class="headerlink" title="9.再去配置索引仓库"></a>9.再去配置索引仓库</h2><pre><code>/usr/local/hadoop/singleSolr/solr/item/conf  下的 schema.xml </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置域字段类型,测试是否配置成功 --&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 域字段  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"username_ik"</span> <span class="attr">type</span>=<span class="string">"text_ik"</span> <span class="attr">indexed</span>=<span class="string">"true"</span> <span class="attr">stored</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置域类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldType</span> <span class="attr">name</span>=<span class="string">"text_ik"</span> <span class="attr">class</span>=<span class="string">"solr.TextField"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">analyzer</span> <span class="attr">class</span>=<span class="string">"org.wltea.analyzer.lucene.IKAnalyzer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置好 --&gt;</span></span><br><span class="line"> sh tomcat-solr/bin/shutdown.sh</span><br><span class="line"><span class="comment">&lt;!--  让配置生效 --&gt;</span></span><br><span class="line"> sh tomcat-solr/bin/startup.sh</span><br><span class="line"><span class="comment">&lt;!--  查看进程 --&gt;</span></span><br><span class="line">tail -f tomcat-solr/logs/catalina.out</span><br></pre></td></tr></table></figure><h2 id="10-要导入索引库"><a href="#10-要导入索引库" class="headerlink" title="10.要导入索引库"></a>10.要导入索引库</h2><p>问题1:</p><pre><code>首先要配置索引域字段(创建数据库字段)应该把参与搜索的数据库数据导入索引库确定参与搜索字段:    商品表:id,title,sell_point,price,image    商品描述表:item_desc    商品分类表:category_name</code></pre><p>把以上三张表数据导入索引库,实现搜索业务<br>问题2:配置索引域字段<br>    一个字段对应需求导入索引库数据库的一个字段</p><p>导入数据的过程:<br>    1.查询数据库(三张表)<br>    2.把查询数据库写入索引库</p><p>注意:查询时要注意商品的状态<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">a.id,</span><br><span class="line">a.title,</span><br><span class="line">a.sell_point,</span><br><span class="line">a.price,</span><br><span class="line">a.image,</span><br><span class="line">b.item_desc,</span><br><span class="line">c.name category_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  tb_item a,</span><br><span class="line">  tb_item_desc b,</span><br><span class="line"> tb_item_cat c</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">a.id = b.item_id</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">a.cid = c.id </span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">a.status = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>索引域字段的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=&quot;item_title&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;item_sell_point&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;item_price&quot; type=&quot;long&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;item_image&quot; type=&quot;string&quot; indexed=&quot;false&quot; stored=&quot;true&quot; /&gt;</span><br><span class="line">&lt;field name=&quot;item_category_name&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</span><br><span class="line">&lt;field name=&quot;item_desc&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; /&gt;</span><br><span class="line">&lt;field name=&quot;item_keywords&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; multiValued=&quot;true&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_title&quot; dest=&quot;item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_sell_point&quot; dest=&quot;item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_category_name&quot; dest=&quot;item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_desc&quot; dest=&quot;item_keywords&quot;/&gt;</span><br></pre></td></tr></table></figure><p>​<br>工作1:配置索引域字段—(创建数据库表字段)<br>问题1:应该把哪些数据导入索引库?</p><pre><code>应该把参与搜索的数据库数据导入索引库确定参与搜索字段商品表:id,title,sell_point,price,image商品描述表:item_desc商品分类表:category_name以上三张表数据导入索引库,实现搜索业务</code></pre><p>问题2:配置索引域字段<br>    一个字段对应需求导入索引库</p><pre><code>导入数据过程:    </code></pre><p>1.创建SearchItemMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询索引库域字段对应数据库值写入索引库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.e3.search.mapper.SearchItemMapper"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDataBaseToSolrIndex"</span> <span class="attr">resultType</span>=<span class="string">"searchItem"</span>&gt;</span></span><br><span class="line">SELECT</span><br><span class="line">a.id,</span><br><span class="line">a.title,</span><br><span class="line">a.sell_point,</span><br><span class="line">a.price,</span><br><span class="line">a.image,</span><br><span class="line">b.item_desc,</span><br><span class="line">c.name category_name</span><br><span class="line">FROM</span><br><span class="line">tb_item a,</span><br><span class="line">tb_item_desc b,</span><br><span class="line">tb_item_cat c</span><br><span class="line">WHERE</span><br><span class="line">a.id = b.item_id</span><br><span class="line">AND</span><br><span class="line">a.cid = c.id</span><br><span class="line">AND</span><br><span class="line">a.status = 1;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.查询索引域字段对应数据值写入索引库   业务代码的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求:查询索引域字段对应数据值写入索引库</span></span><br><span class="line"><span class="comment"> * 参数:无</span></span><br><span class="line"><span class="comment"> * 返回值:E3mallResult </span></span><br><span class="line"><span class="comment"> * 发布服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E3mallResult <span class="title">findDataBaseToSolrIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;SearchItem&gt; list = searchItemMapper.findDataBaseToSolrIndex();</span><br><span class="line"><span class="comment">//循环集合数据,把数据封装到doc文档对象,实现索引库的写入</span></span><br><span class="line"><span class="keyword">for</span> (SearchItem searchItem : list) &#123;</span><br><span class="line"><span class="comment">//创建一个文档对象,封装索引库域字段对应的值</span></span><br><span class="line">SolrInputDocument doc = <span class="keyword">new</span> SolrInputDocument();</span><br><span class="line"><span class="comment">//封装文档域所对应的值</span></span><br><span class="line">doc.addField(<span class="string">"id"</span>, searchItem.getId());</span><br><span class="line"><span class="comment">//标题</span></span><br><span class="line">doc.addField(<span class="string">"item_title"</span>, searchItem.getTitle());</span><br><span class="line"><span class="comment">//卖点</span></span><br><span class="line">doc.addField(<span class="string">"item_sell_point"</span>, searchItem.getSell_point());</span><br><span class="line"><span class="comment">//价格</span></span><br><span class="line">doc.addField(<span class="string">"item_price"</span>, searchItem.getPrice());</span><br><span class="line"><span class="comment">//图片地址</span></span><br><span class="line">doc.addField(<span class="string">"item_image"</span>, searchItem.getImage());</span><br><span class="line"><span class="comment">//商品分类名称  item_category_name</span></span><br><span class="line">doc.addField(<span class="string">"item_category_name"</span>, searchItem.getCategory_name());</span><br><span class="line"><span class="comment">//商品描述  item_desc  </span></span><br><span class="line">doc.addField(<span class="string">"item_desc"</span>, searchItem.getItem_desc());</span><br><span class="line"><span class="comment">//写入索引库</span></span><br><span class="line">solrServer.add(doc);</span><br><span class="line">&#125;</span><br><span class="line">solrServer.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回值</span></span><br><span class="line"><span class="keyword">return</span> E3mallResult.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Solr集群版的使用"><a href="#Solr集群版的使用" class="headerlink" title="Solr集群版的使用"></a>Solr集群版的使用</h1><h2 id="zookeeper原理"><a href="#zookeeper原理" class="headerlink" title="zookeeper原理:"></a>zookeeper原理:</h2><p>概念:zookeeper是一个服务协调者</p><h3 id="1-注册中心-分布式服务"><a href="#1-注册中心-分布式服务" class="headerlink" title="1.注册中心(分布式服务)"></a>1.注册中心(分布式服务)</h3><p>​    把对象注册到注册中心,让服务消费者和服务提供者解耦合<br>​    让服务消费者和服务器提供者实现异步调用</p><h3 id="2-配置中心-集群服务-本地模拟实现"><a href="#2-配置中心-集群服务-本地模拟实现" class="headerlink" title="2.配置中心(集群服务)   本地模拟实现:"></a>2.配置中心(集群服务)   本地模拟实现:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x.  6 root root      4096 12月 11 00:39 solr1</span><br><span class="line">drwxr-xr-x.  6 root root      4096 12月 11 00:39 solr2</span><br><span class="line">drwxr-xr-x.  6 root root      4096 12月 11 00:39 solr3</span><br><span class="line">drwxr-xr-x.  6 root root      4096 12月 11 00:39 solr4</span><br><span class="line">drwxr-xr-x.  9 root root      4096 12月 11 00:36 tomcat1</span><br><span class="line">drwxr-xr-x.  9 root root      4096 12月 11 00:38 tomcat2</span><br><span class="line">drwxr-xr-x.  9 root root      4096 12月 11 00:38 tomcat3</span><br><span class="line">drwxr-xr-x.  9 root root      4096 12月 11 00:38 tomcat4</span><br><span class="line">drwxr-xr-x. 10 git  games     4096 11月  5 2012 zookeeper1</span><br><span class="line">drwxr-xr-x. 10 root root      4096 12月 11 00:35 zookeeper2</span><br><span class="line">drwxr-xr-x. 10 root root      4096 12月 11 00:35 zookeeper3</span><br></pre></td></tr></table></figure><p>配置集群redis集群<br>cd zookeeper1/conf  下<br>mv zoo_sample.cfg  zoo.cfg</p><p>修改这三行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/usr/local/hadoop/clusterSolr/zookeeper1/data</span><br><span class="line">dataLogDir=/usr/local/hadoop/clusterSolr/zookeeper1/log</span><br><span class="line">clientPort=2182</span><br></pre></td></tr></table></figure><p>配置集群之间通信:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.1=192.168.65.150:2881:3881</span><br><span class="line">server.2=192.168.65.150:2882:3882</span><br><span class="line">server.3=192.168.65.150:2883:3883</span><br></pre></td></tr></table></figure><p>在zookeeper1下创建data和log<br>在data目录下<br> touch myid<br>  vim myid    写入:1<br>在zookeeper2下创建data和log<br>在data目录下<br> touch myid<br> vim myid    写入:2<br>在zookeeper3下创建data和log<br>在data目录下<br> touch myid<br> vim myid    写入:3<br>三台同样操作</p><h3 id="3-配置tomcat集群"><a href="#3-配置tomcat集群" class="headerlink" title="3.配置tomcat集群"></a>3.配置tomcat集群</h3><p>1.tomcat1<br>    vim tomcat1/conf/server.xml<br>    修给端口:  8010 9000  8011</p><p>2.指定索引库的路径<br>设置tomcat启动时,启动solr,加载solr索引库的位置,还有zookeer的集群服务器地址IP<br>vim tomcat1/bin/catalina.sh<br>在catalina.sh中:<br>    export JAVA_OPTS =”-Dsolr.solr.home=/usr/local/hadoop/clusterSolr/solr1/ -DzkHost=192.168.65.150:2182,192.1<br>            68.65.150:2183,192.168.65.150:2184”<br>在配置tomcat1中的solr对应索引库solr1下:<br>vim   solr1/solr.xml<br>让监控端口和tomcat的启动端口一致</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"hostPort"</span>&gt;</span>$&#123;jetty.port:9000&#125;<span class="tag">&lt;/<span class="name">int</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重复4次上面的操作  修改相应的位置<br>8010 9001  8011<br>8012 9002  8013<br>8014 9003  8015<br>8016 9004  8017</p><p>把 solr 集群配置文件交给 Zookeeper 注册中心管理<br>把仓库核心配置文件放入 Zookeeper 注册中心， 当 solr 集群需要加载配置文件，只需要从 Zookeeper 中获取配置文件。<br>./zkcli.sh -zkhost 192.168.65.150:2182,192.168.65.150:2183,192.168.65.150:2184 -cmd upconfig -confdir /usr/local/hadoop/clusterSolr/solr1/item/conf/ -confname myconf</p><p>登录zookeeper集群:<br>命令:./zkCli.sh -server 192.168.65.150:2182<br>solr集群分片命令：<br><a href="http://192.168.65.150:9000/solr/admin/collections?action=CREATE&amp;name=products&amp;numShards=2&amp;replicationFactor=2&amp;maxShardsPerNode=8&amp;property.schema=schema.xml&amp;property.config=solrconfig.xml" target="_blank" rel="noopener">http://192.168.65.150:9000/solr/admin/collections?action=CREATE&amp;name=products&amp;numShards=2&amp;replicationFactor=2&amp;maxShardsPerNode=8&amp;property.schema=schema.xml&amp;property.config=solrconfig.xml</a><br>删除旧solrCloud集群分片：<br><a href="http://192.168.65.150:9000/solr/admin/collections?action=DELETE&amp;name=item" target="_blank" rel="noopener">http://192.168.65.150:9000/solr/admin/collections?action=DELETE&amp;name=item</a></p><p>这样的话,solr集群就搭建完成了<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​<br>​     </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Solr单机版的使用&quot;&gt;&lt;a href=&quot;#Solr单机版的使用&quot; class=&quot;headerlink&quot; title=&quot;Solr单机版的使用&quot;&gt;&lt;/a&gt;Solr单机版的使用&lt;/h1&gt;&lt;p&gt;在虚拟机上模拟solr单机版和集群的使用,和实际开发其实是差不多的&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="solr" scheme="http://www.top.com/tags/solr/"/>
    
      <category term="solr集群" scheme="http://www.top.com/tags/solr%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Solr原理</title>
    <link href="http://www.top.com/2017/12/15/Solr%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://www.top.com/2017/12/15/Solr的原理/</id>
    <published>2017-12-15T14:27:08.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lucene-amp-solr"><a href="#Lucene-amp-solr" class="headerlink" title="Lucene&amp;solr"></a>Lucene&amp;solr</h1><h2 id="1-Lucene简介"><a href="#1-Lucene简介" class="headerlink" title="1.Lucene简介"></a>1.Lucene简介</h2><p>​    Lucene是apache下的一个开放源代码的全文检索引擎工具包。提供了完整的查询引擎和索引引擎，部分文本分析引擎。Lucene的目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能。</p><p>​    Lucene是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支 持和提供,Lucene提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻，   在Java开发环境里Lucene是一个成熟的免费开放源代码工具</p><p>​    ==Lucene并不是现成的搜索引擎产品，但可以用来制作搜索引擎产品==</p><h2 id="2-Lucene与搜索引擎的区别"><a href="#2-Lucene与搜索引擎的区别" class="headerlink" title="2. Lucene与搜索引擎的区别"></a>2. Lucene与搜索引擎的区别</h2><p>​    全文检索系统是按照全文检索理论建立起来的用于提供全文检索服务的软件系统，包括建立索引、处理查询返回结果集、增加索引、优化索引结构等功能。例如：百度搜索、eclipse帮助搜索、淘宝网商品搜索等。</p><p>​    搜索引擎是全文检索技术最主要的一个应用，例如百度。搜索引擎起源于传统的信息全文检索理论，即计算机程序通过扫描每一篇文章中的每一个词，建立以词为单位的倒排文件，检索程序根据检索词在每一篇文章中出现的频率和每一个检索词在一篇文章中出现的概率，对包含这些检索词的文章进行排序，最后输出排序的结果。全文检索技术是搜索引擎的核心支撑技术。</p><p>​    Lucene和搜索引擎不同，Lucene是一套用java或其它语言写的全文检索的工具包，为应用程序提供了很多个api接口去调用，可以简单理解为是一套实现全文检索的类库，搜索引擎是一个全文检索系统，它是一个单独运行的软件系统</p><h2 id="3-Lucene主要包"><a href="#3-Lucene主要包" class="headerlink" title="3.Lucene主要包"></a>3.Lucene主要包</h2><table><thead><tr><th>包名</th><th>功能</th></tr></thead><tbody><tr><td>org.apache.lucene.analysis</td><td>语言分析器，主要用于的切词  Lucene提供的分析器实现类在：  lucene-analyzers-common-4.10.3.jar</td></tr><tr><td>org.apache.lucene.document</td><td>索引存储时的文档结构管理，类似于关系型数据库的表结构</td></tr><tr><td>org.apache.lucene.index</td><td>索引管理，包括索引建立、删除等</td></tr><tr><td>org.apache.lucene.queryParser</td><td>查询分析器，实现查询关键词间的运算，如与、或、非等, 生成查询表达式，</td></tr><tr><td>org.apache.lucene.search</td><td>检索管理，根据查询条件，检索得到结果</td></tr><tr><td>org.apache.lucene.store</td><td>数据存储管理，包括一些I/O操作</td></tr><tr><td>org.apache.lucene.util</td><td>公用类</td></tr></tbody></table><h2 id="4-创建索引和搜索流程"><a href="#4-创建索引和搜索流程" class="headerlink" title="4.创建索引和搜索流程"></a>4.创建索引和搜索流程</h2><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/K8Bm7HFh6B.png?imageslim" alt="mark"></p><p>1、创建索引过程，对要搜索的原始内容进行索引构建一个索引库，索引过程包括：</p><p>​    确定原始内容即要搜索的内容=&gt;获得文档=&gt;创建文档=&gt;分析文档à索引文档</p><p>2、红色表示搜索<a href="">过程</a>，从索引库中搜索内容，搜索过程包括：</p><p>​    用户通过搜索界面=&gt;创建查询=&gt;执行搜索，从索引库搜索=&gt;渲染搜索结果</p><h2 id="5-Solr与Lucene区别"><a href="#5-Solr与Lucene区别" class="headerlink" title="5.Solr与Lucene区别"></a>5.Solr与Lucene区别</h2><p><a href="">Lucene</a>是一个开放源代码的全文检索引擎工具包，它不是一个完整的全文检索应用。Lucene仅提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以Lucene为基础构建全文检索应用。</p><p> Solr的目标是打造一款企业级的搜索引擎系统，它是基于Lucene一个搜索引擎服务，可以独立运行，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。</p><h2 id="6-搜索数据方式"><a href="#6-搜索数据方式" class="headerlink" title="6.搜索数据方式"></a>6.搜索数据方式</h2><h3 id="6-1-顺序扫描"><a href="#6-1-顺序扫描" class="headerlink" title="6.1 顺序扫描"></a>6.1 顺序扫描</h3><p>所谓顺序扫描，例如要找内容包含一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。这种方法是顺序扫描方法，数据量大就搜索慢。</p><h3 id="6-2-倒排索引"><a href="#6-2-倒排索引" class="headerlink" title="6.2 倒排索引"></a>6.2 倒排索引</h3><p>倒排索引（也称为倒排文件）是一种存储了来自文本中的映射的索引数据结构。比如单词或者数字，对应到它们在数据库、一个文件或者一组文件中的位置。它是在文档检索系统中使用的最流行的数据结构，在搜索引擎中有大规模使用案例</p><p>例如我们使用新华字典查询汉字，新华字典有偏旁部首的目录（索引），我们查字首先查这个目录，找到这个目录中对应的偏旁部首，就可以通过这个目录中的偏旁部首找到这个字所在的位置（文档）</p><p>倒排索引做两件事情：</p><p>1、提取资源中关键信息， 建立索引 （目录）</p><p>2、搜索时，根据关键字（目录），找到资源的位置</p><p><strong>文档（Document）</strong>：一般搜索引擎处理的对象是互联网网页，对于搜索引擎来讲，Word、PDF、html、XML等不同格式的文件都可以称为文档，一般以文档来表示文本信息。</p><p><strong>文档集合（DocumentCollection）</strong>：由若干文档构成的集合成为文档集合。比如海量的互联网网页等。</p><p><strong>文档编号（Document ID）</strong>：在搜索引擎内部，会为文档集合每个文档赋予一个唯一的内部编号，以作为文档的唯一标识，以便于处理。</p><p><strong>单词编号（Word ID）</strong>：与文档编号类似，搜索引擎内部以唯一的编号来表示某个单词，以作为某个单词的唯一表示。</p><p><strong>倒排索引（Inverted Index）</strong>：倒排索引是实现单词——<strong>文档矩阵</strong>的一种具体存储形式。通过倒排索引，可以根据单次快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：<strong>单词词典和倒排文件</strong>。</p><p><strong>单词词典（Lexicon）</strong>：搜索引擎通常的索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引记载单词本身的一些信息及指向倒排列表的指针。单词也就是我们在搜索时的一些关键字，也称为词条。</p><p><strong>倒排列表（PostingList）</strong>：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文当中出现的位置信息，每条记录成为一个倒排向（Posting）。根据倒排列表，即可获知哪些文档包含某个单词。</p><p><strong>倒排文件（Inverted File）</strong>：所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即为倒排文件，倒排文件是存储倒排索引的物理文件。</p><h2 id="7-倒排索引"><a href="#7-倒排索引" class="headerlink" title="7.  倒排索引"></a>7.  倒排索引</h2><h3 id="7-1单词-文档矩阵的基本模型："><a href="#7-1单词-文档矩阵的基本模型：" class="headerlink" title="7.1单词-文档矩阵的基本模型："></a>7.1单词-文档矩阵的基本模型：</h3><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/Ch5G2E7DHE.png?imageslim" alt="mark"></p><p>该矩阵模型代表的含义：</p><p>词1在文档1、文档4中出现，文档1包含了词1和词4。</p><p>词2在文档2、文档5中出现，文档2包含词2。</p><h3 id="7-2-创建倒排索引过程"><a href="#7-2-创建倒排索引过程" class="headerlink" title="7.2 创建倒排索引过程"></a>7.2 创建倒排索引过程</h3><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/2HAJd0GK6d.png?imageslim" alt="mark"></p><h3 id="7-3-基本倒排索引结构"><a href="#7-3-基本倒排索引结构" class="headerlink" title="7.3 基本倒排索引结构"></a>7.3 基本倒排索引结构</h3><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/964676fHlF.png?imageslim" alt="mark"></p><p>第1列单词ID即为每个单词的编号。 </p><p>第2列即为对应的单词。 </p><p>第3列即为每个单词对应的倒排序表。（比如单词“拉斯”，单词编号为8，倒排序表为｛3，5｝，说明文档集合中文档3和文档5包含这个单词。）</p><h3 id="7-4-复杂倒排索引结构"><a href="#7-4-复杂倒排索引结构" class="headerlink" title="7.4  复杂倒排索引结构"></a>7.4  复杂倒排索引结构</h3><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/CGid1D84i7.png?imageslim" alt="mark"></p><p>就编号8—拉斯—｛（3：1）；（5，1）｝来说，（3，1）表示“拉斯”在文档3中出现一次，（5，1）表示“拉斯”在文档5中出现1次。</p><h3 id="7-5-完整倒排索引结构"><a href="#7-5-完整倒排索引结构" class="headerlink" title="7.5 完整倒排索引结构"></a>7.5 完整倒排索引结构</h3><p><img src="http://ozaomob5f.bkt.clouddn.com/images/171224/368g0ciF2g.png?imageslim" alt="mark"></p><p>就编号8—拉斯—2—｛（3;1;<4>），（5;1;<4>）｝来说，文档频率2表示在两个文档出现。“<4>”表示单词出现的位置是文档中的第4个单词。 </4></4></4></p><p>这个倒排索引基本上是一个完备的索引系统了，实际搜索系统的索引结构基本如此。</p><h2 id="8-单词词典"><a href="#8-单词词典" class="headerlink" title="8. 单词词典"></a>8. 单词词典</h2><p>单词词典是倒排索引中非常重要的组成部分，它用来维护文档集合中出现过的所有单词的相关信息，同时用来记载某个单词对应的倒排列表在倒排文件中的位置信息。在支持搜索时，根据用户的查询词，去单词词典里查询，就能够获得相应的倒排列表，并以此作为后续排序的基础。<br>​       对于一个规模很大的文档集合来说，可能包含几十万甚至上百万的不同单词，能否快速定位某个单词，这直接影响搜索时的响应速度，所以需要高效的数据结构来对单词词典进行构建和查找，常用的数据结构包括哈希加链表结构和树形词典结构。</p><p>4.1   哈希加链表</p><p>​       图1-7是这种词典结构的示意图。这种词典结构主要由两个部分构成：</p><p>​        主体部分是哈希表，每个哈希表项保存一个指针，指针指向冲突链表，在冲突链表里，相同哈希值的单词形成链表结构。之所以会有冲突链表，是因为两个不同单词获得相同的哈希值，如果是这样，在哈希方法里被称做是一次冲突，可以将相同哈希值的单词存储在链表里，以供后续查找。<br>​                       <img src="http://img.my.csdn.net/uploads/201209/10/1347269599_3828.jpg" alt="img"></p><p>​                        图1-7  哈希加链表词典结构</p><p>​       在建立索引的过程中，词典结构也会相应地被构建出来。比如在解析一个新文档的时候，对于某个在文档中出现的单词T，首先利用哈希函数获得其哈希值，之后根据哈希值对应的哈希表项读取其中保存的指针，就找到了对应的冲突链表。如果冲突链表里已经存在这个单词，说明单词在之前解析的文档里已经出现过。如果在冲突链表里没有发现这个单词，说明该单词是首次碰到，则将其加入冲突链表里。通过这种方式，当文档集合内所有文档解析完毕时，相应的词典结构也就建立起来了。</p><p>​        在响应用户查询请求时，其过程与建立词典类似，不同点在于即使词典里没出现过某个单词，也不会添加到词典内。以图1-7为例，假设用户输入的查询请求为单词3，对这个单词进行哈希，定位到哈希表内的2号槽，从其保留的指针可以获得冲突链表，依次将单词3和冲突链表内的单词比较，发现单词3在冲突链表内，于是找到这个单词，之后可以读出这个单词对应的倒排列表来进行后续的工作，如果没有找到这个单词，说明文档集合内没有任何文档包含单词，则搜索结果为空。</p><p><strong>4.2   树形结构</strong><br>​       B树（或者B+树）是另外一种高效查找结构，图1-8是一个 B树结构示意图。B树与哈希方式查找不同，需要字典项能够按照大小排序（数字或者字符序），而哈希方式则无须数据满足此项要求。<br>​       B树形成了层级查找结构，中间节点用于指出一定顺序范围的词典项目存储在哪个子树中，起到根据词典项比较大小进行导航的作用，最底层的叶子节点存储单词的地址信息，根据这个地址就可以提取出单词字符串。<br>​                  <img src="http://img.my.csdn.net/uploads/201209/10/1347269740_2402.jpg" alt="img"><br>​                                           图1-8  B树查找结构 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lucene-amp-solr&quot;&gt;&lt;a href=&quot;#Lucene-amp-solr&quot; class=&quot;headerlink&quot; title=&quot;Lucene&amp;amp;solr&quot;&gt;&lt;/a&gt;Lucene&amp;amp;solr&lt;/h1&gt;&lt;h2 id=&quot;1-Lucene简介&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="solr" scheme="http://www.top.com/tags/solr/"/>
    
      <category term="倒排索引" scheme="http://www.top.com/tags/%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95/"/>
    
      <category term="Lucene" scheme="http://www.top.com/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>Redis的五种数据类型</title>
    <link href="http://www.top.com/2017/12/15/Redis%E7%9A%84%E4%BA%94%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.top.com/2017/12/15/Redis的五中数据类型/</id>
    <published>2017-12-15T03:27:08.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<p>常用数据类型简介：</p><h2 id="一-redis常用五种数据类型-string-hash-list-set-zset-sorted-set"><a href="#一-redis常用五种数据类型-string-hash-list-set-zset-sorted-set" class="headerlink" title="一,redis常用五种数据类型:string,hash,list,set,zset(sorted set)."></a>一,redis常用五种数据类型:string,hash,list,set,zset(sorted set).</h2><h3 id="1-String类型"><a href="#1-String类型" class="headerlink" title="1.String类型"></a>1.String类型</h3><p>String是最简单的类型，一个key对应一个value</p><p>String类型的数据最大1G。<br>String类型的值可以被视作integer，从而可以让“INCR”命令族操作(incrby、decr、decrby),这种情况下，该integer的值限制在64位有符号数。<br>在list、set和zset中包含的独立的元素类型都是Redis String类型。</p><h3 id="2-List类型"><a href="#2-List类型" class="headerlink" title="2.List类型"></a>2.List类型</h3><p>链表类型，主要功能是push、pop、获取一个范围的所有值等。其中的key可以理解为链表的名字。</p><p>在Redis中，list就是Redis String的列表，按照插入顺序排序。比如使用LPUSH命令在list头插入一个元素，使用RPUSH命令在list的尾插入一个元素。当这两个命令之一作用于一个空的key时，一个新的list就创建出来了。</p><p>List的最大长度是2^32-1个元素。</p><h3 id="3-Set类型"><a href="#3-Set类型" class="headerlink" title="3.Set类型"></a>3.Set类型</h3><p>集合，和数学中的集合概念相似。操作中的key理解为集合的名字。</p><p>在Redis中，set就是Redis String的无序集合，不允许有重复元素。</p><p>Set的最大元素数是2^32-1。</p><p>Redis中对set的操作还有交集、并集、差集等。</p><h3 id="4-ZSet-Sorted-Set-类型"><a href="#4-ZSet-Sorted-Set-类型" class="headerlink" title="4.ZSet(Sorted Set)类型"></a>4.ZSet(Sorted Set)类型</h3><p>Zset是set的一个升级版本，在set的基础上增加了一个顺序属性，这一属性在添加修改元素时可以指定，每次指定后zset会自动安装指定值重新调整顺序。可以理解为一张表，一列存value，一列存顺序。操作中的key理解为zset的名字。</p><p>Zset的最大元素数是2^32-1。</p><p>对于已经有序的zset，仍然可以使用SORT命令，通过指定ASC|DESC参数对其进行排序。</p><h3 id="5-hash类型"><a href="#5-hash类型" class="headerlink" title="5.hash类型"></a>5.hash类型</h3><p>hash是最接近关系数据库结构的数据类型，可以将数据库一条记录或程序中一个对象转换成hashmap存放在redis中。</p><h2 id="二、jedis操作命令："><a href="#二、jedis操作命令：" class="headerlink" title="二、jedis操作命令："></a>二、jedis操作命令：</h2><h3 id="1-对value操作的命令"><a href="#1-对value操作的命令" class="headerlink" title="1.对value操作的命令"></a>1.对value操作的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> exists(key)：确认一个key是否存在</span><br><span class="line"></span><br><span class="line"> del(key)：删除一个key</span><br><span class="line"></span><br><span class="line"> type(key)：返回值的类型</span><br><span class="line"></span><br><span class="line"> keys(pattern)：返回满足给定pattern的所有key</span><br><span class="line"></span><br><span class="line"> randomkey：随机返回key空间的一个key</span><br><span class="line"></span><br><span class="line"> rename(oldname, newname)：将key由oldname重命名为newname，若newname存在则删除newname表示的key</span><br><span class="line"></span><br><span class="line"> dbsize：返回当前数据库中key的数目</span><br><span class="line"></span><br><span class="line"> expire：设定一个key的活动时间（s）</span><br><span class="line"></span><br><span class="line"> ttl：获得一个key的活动时间</span><br><span class="line"></span><br><span class="line"> select(index)：按索引查询</span><br><span class="line"></span><br><span class="line"> move(key, dbindex)：将当前数据库中的key转移到有dbindex索引的数据库</span><br><span class="line"></span><br><span class="line"> flushdb：删除当前选择数据库中的所有key</span><br><span class="line"></span><br><span class="line"> flushall：删除所有数据库中的所有key</span><br><span class="line">1234567891011121314151617181920212223242526</span><br></pre></td></tr></table></figure><h3 id="2-对String操作的命令"><a href="#2-对String操作的命令" class="headerlink" title="2.对String操作的命令"></a>2.对String操作的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> set(key, value)：给数据库中名称为key的string赋予值value</span><br><span class="line"></span><br><span class="line"> get(key)：返回数据库中名称为key的string的value</span><br><span class="line"></span><br><span class="line"> getset(key, value)：给名称为key的string赋予上一次的value</span><br><span class="line"></span><br><span class="line"> mget(key1, key2,…, key N)：返回库中多个string（它们的名称为key1，key2…）的value     s</span><br><span class="line"></span><br><span class="line"> setnx(key, value)：如果不存在名称为key的string，则向库中添加string，名称为key，值为value</span><br><span class="line"></span><br><span class="line"> setex(key, time, value)：向库中添加string（名称为key，值为value）同时，设定过期时间time</span><br><span class="line"></span><br><span class="line"> mset(key1, value1, key2, value2,…key N, value N)：同时给多个string赋值，名称为key i的string赋值value i</span><br><span class="line"></span><br><span class="line"> msetnx(key1, value1, key2, value2,…key N, value N)：如果所有名称为key i的string都不存在，则向库中添加string，名称           key i赋值为value i</span><br><span class="line"></span><br><span class="line"> incr(key)：名称为key的string增1操作</span><br><span class="line"></span><br><span class="line"> incrby(key, integer)：名称为key的string增加integer</span><br><span class="line"></span><br><span class="line"> decr(key)：名称为key的string减1操作</span><br><span class="line"></span><br><span class="line"> decrby(key, integer)：名称为key的string减少integer</span><br><span class="line"></span><br><span class="line"> append(key, value)：名称为key的string的值附加value</span><br><span class="line"></span><br><span class="line"> substr(key, start, end)：返回名称为key的string的value的子串</span><br><span class="line">12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure><h3 id="3-对List操作的命令"><a href="#3-对List操作的命令" class="headerlink" title="3.对List操作的命令"></a>3.对List操作的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> rpush(key, value)：在名称为key的list尾添加一个值为value的元素  </span><br><span class="line"></span><br><span class="line"> lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span><br><span class="line"></span><br><span class="line"> llen(key)：返回名称为key的list的长度</span><br><span class="line"></span><br><span class="line"> lrange(key, start, end)：返回名称为key的list中start至end之间的元素（下标从0开始，下同）</span><br><span class="line"></span><br><span class="line"> ltrim(key, start, end)：截取名称为key的list，保留start至end之间的元素</span><br><span class="line"></span><br><span class="line"> lindex(key, index)：返回名称为key的list中index位置的元素</span><br><span class="line"></span><br><span class="line"> lset(key, index, value)：给名称为key的list中index位置的元素赋值为value</span><br><span class="line"></span><br><span class="line"> lrem(key, count, value)：删除count个名称为key的list中值为value的元素。count为0，删除所有值为value的元素，count&gt;0      从头至尾删除count个值为value的元素，count&lt;0从尾到头删除|count|个值为value的元素。</span><br><span class="line"></span><br><span class="line"> lpop(key)：返回并删除名称为key的list中的首元素</span><br><span class="line"></span><br><span class="line"> rpop(key)：返回并删除名称为key的list中的尾元素</span><br><span class="line"></span><br><span class="line"> blpop(key1, key2,… key N, timeout)：lpop 命令的block版本。即当timeout为0时，若遇到名称为key i的list不存在或该list为空，则命令结束。如果 timeout&gt;0，则遇到上述情况时，等待timeout秒，如果问题没有解决，则对key i+1开始的list执行pop操作。</span><br><span class="line"></span><br><span class="line"> brpop(key1, key2,… key N, timeout)：rpop的block版本。参考上一命令。</span><br><span class="line"></span><br><span class="line"> rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</span><br><span class="line">1234567891011121314151617181920212223242526</span><br></pre></td></tr></table></figure><h3 id="4-对Set操作的命令"><a href="#4-对Set操作的命令" class="headerlink" title="4.对Set操作的命令"></a>4.对Set操作的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> sadd(key, member)：向名称为key的set中添加元素member</span><br><span class="line"></span><br><span class="line"> srem(key, member) ：删除名称为key的set中的元素member</span><br><span class="line"></span><br><span class="line"> spop(key) ：随机返回并删除名称为key的set中一个元素  </span><br><span class="line"></span><br><span class="line"> smove(srckey, dstkey, member) ：将member元素从名称为srckey的集合移到名称为dstkey的集合</span><br><span class="line"></span><br><span class="line"> scard(key) ：返回名称为key的set的基数        </span><br><span class="line"></span><br><span class="line"> sismember(key, member) ：测试member是否是名称为key的set的元素</span><br><span class="line"></span><br><span class="line"> sinter(key1, key2,…key N) ：求交集</span><br><span class="line"></span><br><span class="line"> sinterstore(dstkey, key1, key2,…key N) ：求交集并将交集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line"> sunion(key1, key2,…key N) ：求并集</span><br><span class="line"></span><br><span class="line"> sunionstore(dstkey, key1, key2,…key N) ：求并集并将并集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line"> sdiff(key1, key2,…key N) ：求差集</span><br><span class="line"></span><br><span class="line"> sdiffstore(dstkey, key1, key2,…key N) ：求差集并将差集保存到dstkey的集合</span><br><span class="line"></span><br><span class="line"> smembers(key) ：返回名称为key的set的所有元素</span><br><span class="line"></span><br><span class="line"> srandmember(key) ：随机返回名称为key的set的一个元素</span><br><span class="line">12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure><h3 id="5-对zset（sorted-set）操作的命令"><a href="#5-对zset（sorted-set）操作的命令" class="headerlink" title="5.对zset（sorted set）操作的命令"></a>5.对zset（sorted set）操作的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> zadd(key, score, member)：向名称为key的zset中添加元素member，score用于排序。如果该元素已经存在，则根据score更新该元素的顺序。</span><br><span class="line"></span><br><span class="line"> zrem(key, member) ：删除名称为key的zset中的元素member</span><br><span class="line"></span><br><span class="line"> zincrby(key, increment, member) ：如果在名称为key的zset中已经存在元素member，则该元素的score增加increment；否则向集合中添加该元素，其score的值为increment</span><br><span class="line"></span><br><span class="line"> zrank(key, member) ：返回名称为key的zset（元素已按score从小到大排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”</span><br><span class="line"></span><br><span class="line"> zrevrank(key, member) ：返回名称为key的zset（元素已按score从大到小排序）中member元素的rank（即index，从0开始），若没有member元素，返回“nil”</span><br><span class="line"></span><br><span class="line"> zrange(key, start, end)：返回名称为key的zset（元素已按score从小到大排序）中的index从start到end的所有元素</span><br><span class="line"></span><br><span class="line"> zrevrange(key, start, end)：返回名称为key的zset（元素已按score从大到小排序）中的index从start到end的所有元素</span><br><span class="line"></span><br><span class="line"> zrangebyscore(key, min, max)：返回名称为key的zset中score &gt;= min且score &lt;= max的所有元素</span><br><span class="line"></span><br><span class="line"> zcard(key)：返回名称为key的zset的基数</span><br><span class="line"></span><br><span class="line"> zscore(key, element)：返回名称为key的zset中元素element的score</span><br><span class="line"></span><br><span class="line"> zremrangebyrank(key, min, max)：删除名称为key的zset中rank &gt;= min且rank &lt;= max的所有元素</span><br><span class="line"></span><br><span class="line"> zremrangebyscore(key, min, max) ：删除名称为key的zset中score &gt;= min且score &lt;= max的所有元素</span><br><span class="line"></span><br><span class="line"> zunionstore / zinterstore(dstkeyN, key1,…,keyN, WEIGHTS w1,…wN, AGGREGATE SUM|MIN|MAX)：对N个zset求并集和交集，并将最后的集合保存在dstkeyN中。对于集合中每一个元素的score，在进行AGGREGATE运算前，都要乘以对于的WEIGHT参数。如果没有提供WEIGHT，默认为1。默认的AGGREGATE是SUM，即结果集合中元素的score是所有集合对应元素进行 SUM运算的值，而MIN和MAX是指，结果集合中元素的score是所有集合对应元素中最小值和最大值。</span><br><span class="line">1234567891011121314151617181920212223242526</span><br></pre></td></tr></table></figure><h3 id="6-对Hash操作的命令"><a href="#6-对Hash操作的命令" class="headerlink" title="6.对Hash操作的命令"></a>6.对Hash操作的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> hset(key, field, value)：向名称为key的hash中添加元素field&lt;—&gt;value</span><br><span class="line"></span><br><span class="line"> hget(key, field)：返回名称为key的hash中field对应的value</span><br><span class="line"></span><br><span class="line"> hmget(key, field1, …,field N)：返回名称为key的hash中field i对应的value</span><br><span class="line"></span><br><span class="line"> hmset(key, field1, value1,…,field N, value N)：向名称为key的hash中添加元素field i&lt;—&gt;value i</span><br><span class="line"></span><br><span class="line"> hincrby(key, field, integer)：将名称为key的hash中field的value增加integer</span><br><span class="line"></span><br><span class="line"> hexists(key, field)：名称为key的hash中是否存在键为field的域</span><br><span class="line"></span><br><span class="line"> hdel(key, field)：删除名称为key的hash中键为field的域</span><br><span class="line"></span><br><span class="line"> hlen(key)：返回名称为key的hash中元素个数</span><br><span class="line"></span><br><span class="line"> hkeys(key)：返回名称为key的hash中所有键</span><br><span class="line"></span><br><span class="line"> hvals(key)：返回名称为key的hash中所有键对应的value</span><br><span class="line"></span><br><span class="line"> hgetall(key)：返回名称为key的hash中所有的键（field）及其对应的value</span><br><span class="line">12345678910111213141516171819202122</span><br></pre></td></tr></table></figure><h2 id="三、各种数据类型所对应的应用场景"><a href="#三、各种数据类型所对应的应用场景" class="headerlink" title="三、各种数据类型所对应的应用场景"></a>三、各种数据类型所对应的应用场景</h2><h3 id="1-String类型的应用场景"><a href="#1-String类型的应用场景" class="headerlink" title="1.String类型的应用场景"></a>1.String类型的应用场景</h3><p>String是最常用的一种数据类型,普通的key/value存储.</p><h3 id="2-list类型的应用场景"><a href="#2-list类型的应用场景" class="headerlink" title="2.list类型的应用场景"></a>2.list类型的应用场景</h3><p>比较适用于列表式存储且顺序相对比较固定，例如：</p><p>省份、城市列表</p><p>品牌、厂商、车系、车型等列表</p><p>拆车坊专题列表…</p><h3 id="3-set类型的应用场景"><a href="#3-set类型的应用场景" class="headerlink" title="3.set类型的应用场景"></a>3.set类型的应用场景</h3><p>Set对外提供的功能与list类似,当需要存储一个列表数据,又不希望出现重复数据时,可选用set</p><h3 id="4-zset-sorted-set-类型的应用场景"><a href="#4-zset-sorted-set-类型的应用场景" class="headerlink" title="4.zset(sorted set)类型的应用场景"></a>4.zset(sorted set)类型的应用场景</h3><p>zset的使用场景与set类似,区别是set不是自动有序的,而zset可以通过用户额外提供一个优先级(score)的参数来为成员排序,并且是插入有序的,即自动排序.当你需要一个有序的并且不重复的集合列表,那么可以选择zset数据结构。例如:</p><p>根据PV排序的热门车系车型列表</p><p>根据时间排序的新闻列表</p><h3 id="5-hash类型的应用场景"><a href="#5-hash类型的应用场景" class="headerlink" title="5.hash类型的应用场景"></a>5.hash类型的应用场景</h3><p>类似于表记录的存储</p><p>页面视图所需数据的存储</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;常用数据类型简介：&lt;/p&gt;
&lt;h2 id=&quot;一-redis常用五种数据类型-string-hash-list-set-zset-sorted-set&quot;&gt;&lt;a href=&quot;#一-redis常用五种数据类型-string-hash-list-set-zset-sorted-se
      
    
    </summary>
    
    
      <category term="redis" scheme="http://www.top.com/tags/redis/"/>
    
      <category term="nosql" scheme="http://www.top.com/tags/nosql/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://www.top.com/2017/11/28/mysql03/"/>
    <id>http://www.top.com/2017/11/28/mysql03/</id>
    <published>2017-11-28T06:23:50.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-多表查询-交叉查询【了解】"><a href="#01-多表查询-交叉查询【了解】" class="headerlink" title="01.多表查询_交叉查询【了解】"></a>01.多表查询_交叉查询【了解】</h4><pre><code>1.查询结果=左表的总记录数 * 右表的总记录数 -- 笛卡尔积</code></pre><h4 id="02-多表查询-内连接查询【重点掌握】"><a href="#02-多表查询-内连接查询【重点掌握】" class="headerlink" title="02.多表查询_内连接查询【重点掌握】"></a>02.多表查询_内连接查询【重点掌握】</h4><pre><code>1.隐式内连接【常用】：    1).格式：select 字段列表 from 表1,表2 where 表1和表2的等值关系;    2).例如：查询商品信息，要显示所对应类别信息        select * from products , category where products.category_id = catetory.cid;        只保留两个表的部分字段，使用表别名：        SELECT p.pname,p.price,c.cname FROM products p , category c WHERE p.category_id = c.cid;    3).练习：查询&quot;市&quot;的所有信息，并且显示对应的&quot;省名&quot;        SELECT c.cname AS &apos;市&apos;,p.pname AS &apos;省&apos; FROM city c,province p WHERE c.pid = p.pid;2.显示内连接：    1).格式：select 字段列表 from 表1 INNER JOIN 表2 ON 等值关系；    2).例如：查询商品信息，要显示所对应类别信息        select * from products p inner join category c on p.category_id = c.cid;    3).练习：查询&quot;市&quot;的所有信息，并且显示对应的&quot;省名&quot;        SELECT c.cname AS &apos;市&apos;,p.pname AS &apos;省&apos; from city c inner join province p on c.pid = p.pid;注意：1.内连接的查询结果：两个表中的等值记录；2.两种内连接都可以再添加其它where条件：    隐式内连接：select .. from 表1,表2 where 等值条件 and 其它条件...    显示内连接：select .. from 表1 inner join 表2 on 等值条件 where 其它条件....3.两种查询的格式说明：    隐式内连接：select .. from 表1,表2 on 等值条件//错误    显示内连接：select .. from 表1 inner join 表2 where 等值条件//OK的</code></pre><h4 id="03-多表查询-外连接查询【重点掌握】"><a href="#03-多表查询-外连接查询【重点掌握】" class="headerlink" title="03.多表查询_外连接查询【重点掌握】"></a>03.多表查询_外连接查询【重点掌握】</h4><pre><code>1.左外连接查询：    1).格式：select 字段列表 from 表1 left join 表2 on 等值关系;    2).查询结果：左表的所有记录，和右表的等值记录;    3).例如：需求：查询出所有商品(包括没有类别的商品)，有类别的商品要显示类别名称。        SELECT * FROM products p LEFT JOIN category c ON p.category_id = c.cid;2.右外连接查询：    1).格式：select 字段列表 from 表1 right join 表2 on 等值关系；    2).查询结果：右表的所有记录，和左表中的等值记录；    3).例如：需求：查询出所有的商品类别，如果类别下有商品的，要同时显示商品信息；        SELECT * FROM products p RIGHT JOIN category c ON p.category_id = c.cid;</code></pre><h4 id="04-子查询【重点掌握】"><a href="#04-子查询【重点掌握】" class="headerlink" title="04.子查询【重点掌握】"></a>04.子查询【重点掌握】</h4><pre><code>1.在一个查询内部，可以再写一个查询，这个写在内部的查询就叫：子查询；2.子查询的结果可以作为另一个查询：判断条件，表使用。3.例子：查询价格高于&quot;劲霸&quot;的商品信息；    SELECT * FROM products WHERE price &gt; (SELECT price FROM products WHERE pname = &apos;劲霸&apos;);4.练习：    1).查询化妆品类别的商品信息       a).使用多表连接查询：        select * from products p , category c where p.category_id = c.cid and c.cname = &apos;化妆品&apos;;       b).使用子查询(单表查询)        SELECT * FROM products WHERE category_id = (SELECT cid FROM category WHERE cname = &apos;化妆品&apos;);       c).使用子查询作为第三张表：select * from (子查询)        SELECT * FROM products p ,(SELECT * FROM category WHERE cname = &apos;化妆品&apos;) c WHERE p.category_id = c.cid;    2).查询所有&quot;家电&quot;,&quot;服饰&quot;类商品的信息：        select * from products where category_id = 1 or category_id = 2;        改进：        select * from products where category_id in (1,2);        改进：        select * from products where category_id in (select cid from category where cname in (&apos;家电&apos;,&apos;服饰&apos;));</code></pre><h4 id="学习目标总结："><a href="#学习目标总结：" class="headerlink" title="学习目标总结："></a>学习目标总结：</h4><p>1，能够使用内连接进行多表查询<br>a，    说出内连接的两种查询方式</p><pre><code>1.隐式内连接2.显示内连接</code></pre><p>b，    写出显式内连接的SQL语句<br>        select <em> from products p inner join category c on p.category_id = c.cid;<br>c，    写出隐式内连接的SQL语句<br>        select </em> from products p , category c where p.category_id = c.cid;<br>2，能够使用外连接进行多表查询<br>a，    说出外连接的两种查询方式<br>        1.左外查询<br>        2.右外查询<br>b，    写出左外连接的SQL语句<br>        select <em> from products p left join category c on p.category_id = c.cid;//所有左表中的记录，和右表的等值记录<br>c，    写出右外连接的SQL语句<br>        select </em> from products p right join category c on p.category_id = c.cid;//所有右表中的记录，和左表的等值记录<br>3，能够使用子查询进行多表查询<br>    select * from products where category_id in (select cid from category where cname in (‘家电’,’服饰’));</p><p>扩展：三表联查：<br>    1.隐式内连接：使用user表，role表，user_role表进行测试<br>        select <em> from users u , role r,user_role ur where u.uid = ur.uid and ur.rid = r.rid;<br>    2.显示内连接：<br>        select </em> from users u inner join user_role ur on u.uid = ur.uid inner join role r on ur.rid = r.rid;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-多表查询-交叉查询【了解】&quot;&gt;&lt;a href=&quot;#01-多表查询-交叉查询【了解】&quot; class=&quot;headerlink&quot; title=&quot;01.多表查询_交叉查询【了解】&quot;&gt;&lt;/a&gt;01.多表查询_交叉查询【了解】&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.查询结果
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.top.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>mysql学习</title>
    <link href="http://www.top.com/2017/11/27/mysql02/"/>
    <id>http://www.top.com/2017/11/27/mysql02/</id>
    <published>2017-11-27T06:23:50.000Z</published>
    <updated>2018-10-12T11:37:21.748Z</updated>
    
    <content type="html"><![CDATA[<h4 id="01-SQL高级查询-排序："><a href="#01-SQL高级查询-排序：" class="headerlink" title="01.SQL高级查询_排序："></a>01.SQL高级查询_排序：</h4><pre><code>1.使用的关键字：order by 字段名 ASC(升序--默认) / DESC(降序)  例如：查询所有商品，要求结果按价格从小到大排序    SELECT * FROM product ORDER BY proDate ASC;2.注意：升序可以不写asc关键字，例如：    select * from product order by proData;//升序3.排序：    升序(ASC):从小到大；    降序(DESC):从大到小；4.对多列进行排序：  例如：对多列进行排序：按金额排序，如果金额相同，按生产日期升序排序    SELECT * FROM product ORDER BY price ASC,proDate ASC;    先按第一个字段排序，在第一个字段值相同的情况下，再按第二个字段排。5.如果有查询条件，写法：    select * from 表名 where 条件  order by 字段 ... ;</code></pre><h4 id="02-SQL高级查询-聚合函数："><a href="#02-SQL高级查询-聚合函数：" class="headerlink" title="02.SQL高级查询_聚合函数："></a>02.SQL高级查询_聚合函数：</h4><pre><code>1.我经常会有需求，对某列进行汇总，这就需要使用&quot;聚合函数&quot;；2.今天我们掌握的五个聚合函数：    a).count(*/字段名)：统计指定列不为NULL的记录行数--任何数据类型        例如：查询电脑类别的商品，共有多少种        SELECT COUNT(*) FROM product WHERE categoryName = &apos;电脑&apos;;    b).sum(列名)：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0--数值类型的列        例如：查询电脑类商品的价格总数是多少？        select sum(price) from product where categoryName = &apos;电脑&apos;;    c).max(列名)：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算--数值类型、日期类型        例如：查询电脑类商品的最高价格？        select max(price) from product where categoryName = &apos;电脑&apos;;    d).min(列名)：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算        例如：查询电脑类商品的最低价格？        select min(price) from product where categoryName = &apos;电脑&apos;;    e).avg(列名)：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0        例如：查询电脑类商品的平均价格？        select avg(price) from product where categoryName = &apos;电脑&apos;;        注意：计算记录的总数量时，不包含NULL的记录。              所以如果计算的列中有NULL值，则结果不准确。3.注意：聚合查询的结果，只能包含&quot;聚合结果列&quot;，不要包含其他列，要包含，其结果是无意义的。        聚合的结果是&quot;计算的结果&quot;，跟某行数据无关，所以不能关联显示其它字段。</code></pre><h4 id="03-SQL高级查询-分组："><a href="#03-SQL高级查询-分组：" class="headerlink" title="03.SQL高级查询_分组："></a>03.SQL高级查询_分组：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.分组：对某列中"相同的值"作为一组，进行分组。分组只是手段，后续经常需要进行汇总：</span><br><span class="line">2.例如：一条语句查询出每种商品的最高价格是多少？</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">MAX</span>(price) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryName;</span><br><span class="line">练习：查询每种商品的价格的总和</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">SUM</span>(price) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryName;</span><br><span class="line">练习：查询每种商品的商品数量是多少</span><br><span class="line"><span class="keyword">SELECT</span> categoryName,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> product <span class="keyword">GROUP</span> <span class="keyword">BY</span> categoryname;</span><br><span class="line">3.注意：</span><br><span class="line">   1).分组查询的结果字段中，只能包含"分组字段"，"聚合结果字段"。不能再包含其他字段，如果包含，其结果也是无意义的。</span><br><span class="line">4.having子句：</span><br><span class="line">   1).由于where不能对聚合后的结果进行筛选。所以要对聚合后的结果进行筛选，需要使用having子句。</span><br><span class="line">例如：查询每种商品的价格总额，结果保留大于1000元的。</span><br><span class="line"><span class="keyword">select</span> categoryName,<span class="keyword">sum</span>(price) <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> categoryName <span class="keyword">having</span> <span class="keyword">sum</span>(price) &gt; <span class="number">1000</span>;</span><br><span class="line">5.对多列进行分组：</span><br><span class="line">    收支流水表：trans</span><br><span class="line">    id收支项账户金额</span><br><span class="line">    1工资收入工商银行1000</span><br><span class="line">    2红包收入工商银行500</span><br><span class="line">    3收入交通银行3000</span><br><span class="line">    4支出工商银行300</span><br><span class="line">    5支出交通银行770</span><br><span class="line"></span><br><span class="line">    需求：查询出每个账户的收支总额，分别是多少？</span><br><span class="line">账户收支项总金额</span><br><span class="line">工商银行收入1500</span><br><span class="line">工商银行支出300</span><br><span class="line">交通银行收入3000</span><br><span class="line">交通银行支出770</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">select</span> 账户,收支项,<span class="keyword">sum</span>(金额) <span class="keyword">from</span> trans <span class="keyword">group</span> <span class="keyword">by</span> 账户,收支项;//先按账户分，再按收支项分。</span><br></pre></td></tr></table></figure><h4 id="04-SQL语句的执行顺序："><a href="#04-SQL语句的执行顺序：" class="headerlink" title="04.SQL语句的执行顺序："></a>04.SQL语句的执行顺序：</h4><pre><code>1).from2).where3).group by4).having5).select6).distinct7).order by</code></pre><p>   SQL语句的编写顺序：<br>    select … from …  where … group by … having … order by …;</p><h4 id="05-分页查询："><a href="#05-分页查询：" class="headerlink" title="05.分页查询："></a>05.分页查询：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1).基本语句：<span class="keyword">select</span> * <span class="keyword">from</span> 表名 <span class="keyword">limit</span> M,N;</span><br><span class="line">             M值：从第几条(第一条记录为0)记录开始取。</span><br><span class="line">     N值：取几条记录</span><br><span class="line">2).例如：查询所有的商品，每页显示5条：</span><br><span class="line">第一页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">第二页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">第三页：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> <span class="number">10</span>,<span class="number">5</span></span><br><span class="line"></span><br><span class="line">固定算法：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">limit</span> (当前的页数 - <span class="number">1</span>) * 每页显示的条数</span><br><span class="line"><span class="number">3</span>).注意：M值和N值，只要是正数，不会抛异常，可能会返回空结果集。</span><br><span class="line">         但如果是负数，会抛异常。</span><br></pre></td></tr></table></figure><h4 id="06-备份和恢复数据库："><a href="#06-备份和恢复数据库：" class="headerlink" title="06.备份和恢复数据库："></a>06.备份和恢复数据库：</h4><pre><code>1).备份：在要备份的数据库上右键--&gt;备份/导出--&gt;以SQL转储文件备份数据库2).恢复：在SQLYog左侧右键--&gt;导入--&gt;从SQL转储文件导入数据库</code></pre><h4 id="07-SQL的约束："><a href="#07-SQL的约束：" class="headerlink" title="07.SQL的约束："></a>07.SQL的约束：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">1).主键约束：</span><br><span class="line">1).主键的作用：唯一标识表中一条记录。用于作为条件，方便的进行增删改查操作。</span><br><span class="line">2).定义主键：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">..其它字段..</span><br><span class="line">..</span><br><span class="line">)</span><br><span class="line"><span class="number">3</span>).一个表中只能有一个主键；</span><br><span class="line"><span class="number">4</span>).一个主键，可以由一个或多个字段组成[很少用]；复合主键，联合主键</span><br><span class="line">客户信息表：将<span class="string">"客户姓名"</span> + <span class="string">"工作单位"</span> 同时作为一个主键</span><br><span class="line">客户姓名工作单位性别年龄</span><br><span class="line">张三人事部男<span class="number">20</span></span><br><span class="line">李四人事部女<span class="number">22</span></span><br><span class="line">张三业务部男<span class="number">23</span></span><br><span class="line">张三人事部男<span class="number">18</span> //错误的数据</span><br><span class="line"><span class="number">5</span>).任何类型的字段都可以做主键。当前使用<span class="built_in">int</span>类型。后期<span class="built_in">varchar</span></span><br><span class="line"><span class="number">6</span>).为某个字段添加了<span class="string">"主键约束"</span>，也同时自动添加：唯一约束、非空约束</span><br><span class="line"><span class="number">7</span>).删除主键约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span>;</span><br><span class="line">2).自动增长：</span><br><span class="line">1).自动增长：让某列的值根据某个基数，进行自增。这种约束通常用于"主键".</span><br><span class="line">2).添加自动增长约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">....</span><br><span class="line">)</span><br><span class="line"><span class="number">3</span>).清空表对自动增长列的基数的变化：</span><br><span class="line"><span class="number">1</span>).delete <span class="keyword">from</span> 表名:逐行删除。不改变自动增长的基数。</span><br><span class="line"><span class="number">2</span>).truncate 表名【效率高】：摧毁表，重建表。将自动增长的基数重新设置为<span class="number">1.</span></span><br><span class="line"><span class="number">3</span>).非空约束：<span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="number">1</span>).作用：强制某列的数据不能包含<span class="literal">NULL</span>值；</span><br><span class="line"><span class="number">2</span>).添加非空约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">....</span><br><span class="line">)</span><br><span class="line">如下添加，会抛出异常：</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="literal">null</span>,<span class="literal">null</span>,...);//第二个null是错误，pname字段不允许null值</span><br><span class="line">3).删除非空约束 </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 数据类型[长度] (后面不出现<span class="keyword">not</span> <span class="literal">null</span>约束即可，就表示删除了<span class="keyword">not</span> <span class="literal">NULL</span>约束) </span><br><span class="line"><span class="number">4</span>).唯一约束：<span class="keyword">unique</span></span><br><span class="line"><span class="number">1</span>).作用：表示本列的值是唯一的</span><br><span class="line"><span class="number">2</span>).添加唯一约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product(</span><br><span class="line">pid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">pname <span class="built_in">varchar</span>(<span class="number">200</span>) <span class="keyword">unique</span>,</span><br><span class="line">...</span><br><span class="line">)</span><br><span class="line">   如果向pname字段添加重复的值，数据库会抛出异常。</span><br><span class="line"><span class="number">3</span>).如果字段设置了唯一约束，可以写入<span class="string">"空字符串"</span>，但只能有一条。</span><br><span class="line">   也可以写入<span class="literal">NULL</span>值，可以写入多条。</span><br><span class="line"><span class="number">4</span>).删除唯一约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">INDEX</span> 名称;</span><br><span class="line">如果添加唯一约束时，没有设置约束名称，默认是当前字段的字段名</span><br><span class="line">5).主键与唯一约束的区别：</span><br><span class="line">主键：代表：唯一、非空；一个表只能有一个主键；</span><br><span class="line">唯一：只代表：唯一；可以有多个NULL值；一个表可以有多个字段被设置为唯一约束；</span><br><span class="line">5).默认约束：default 值;</span><br><span class="line">1).作用：可以设置某列的默认值，在添加数据时，可以不指定这列的数据，而使用默认值。</span><br><span class="line">2).设置默认约束：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"><span class="keyword">id</span><span class="built_in">int</span>primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">stuName<span class="built_in">varchar</span>(<span class="number">20</span>)<span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex<span class="built_in">char</span>(<span class="number">5</span>)<span class="keyword">default</span> <span class="string">'男'</span></span><br><span class="line">)</span><br><span class="line">在添加时，如果要使用默认值：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">'bbb'</span>,<span class="keyword">DEFAULT</span>);</span><br><span class="line">3).删除默认约束：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">MODIFY</span> 列名 数据类型[长度](后面不要出现<span class="keyword">default</span>关键字即可)</span><br></pre></td></tr></table></figure><h4 id="08-多表-分表的作用："><a href="#08-多表-分表的作用：" class="headerlink" title="08.多表_分表的作用："></a>08.多表_分表的作用：</h4><pre><code>1.在制作表时要注意：一个表只描述一件事情。如果需要描述多件事情，可以创建多表，然后通过某个字段去引用                    另一个表的数据。这样可以使每个表的数据单独管理，互不影响。2.分表后：    主表：被其它表引用的表；    从表：引用其它表的表；    3.作用：            避免主键冲突，减少数据冗余</code></pre><h4 id="09-多表-表和表之间的关系："><a href="#09-多表-表和表之间的关系：" class="headerlink" title="09.多表_表和表之间的关系："></a>09.多表_表和表之间的关系：</h4><pre><code>1.一对多关系【最常用】：    1).应用场景：客户和订单；分类和商品；部门和员工        客户表:主表                订单表：从表                            外键        ----------------------------------------------------------------------------------------        客户ID    登录名    支付宝            订单ID    订单时间    总金额        客户ID        001    zhangsan  xxx            001    xxx        xxx        001                              002    xxx        xxx        001    2).建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.2.多对多关系【较常用】：    1).应用场景：订单和商品、用户和角色        订单表                    商品表：        -----------------------------------------------------------------------------------------        订单ID    订单日期   总金额          商品ID    名称    单价            d001    2017-07-04  100            p001    奥利奥    5.5        d002    2017-07-05  200            p002    红牛    4                            p003    啤酒    2.00                    订单_商品_关系表                    订单Id        商品ID    数量    总价                    d001        p001    2    11                    d001        p002    3    12                    d001        p003                        d002        p001    2).建表原则：需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。3.一对一关系【不建议用】：    1).客户信息表：                        地址表        姓名    性别    年龄    地址ID            id    省    市    区    街道门牌        张三    男    22    01            01    北京    北京    顺义    99号        李四    女    23    02            02    河北    廊坊    安次    88号    ------------------------------------------------------------------------------------------------       合并为一个客户表：        姓名    性别    年龄    省    市    区    街道门牌        张三    男    22    北京    北京    顺义    99号        李四    女    23    河北    廊坊    安次    88号</code></pre><h4 id="10-外键约束："><a href="#10-外键约束：" class="headerlink" title="10.外键约束："></a>10.外键约束：</h4><pre><code>1).作用：设置在&quot;从表&quot;的外键字段上，可以强制外键字段的值必须参考主表中的主键字段的值。2).设置外键约束：    alter table 从表 add [constraint] [外键名称] foreign key (从表外键字段名) references 主表 (主表的主键);3).使用外键目的：    保证数据完整性</code></pre><h4 id="学习目标总结："><a href="#学习目标总结：" class="headerlink" title="学习目标总结："></a>学习目标总结：</h4><p>3，能够使用SQL语句进行排序<br>a，    说出排序语句中的升序和降序关键字</p><pre><code>order by 字段名 ASC(升序-默认) / DESC(降序)</code></pre><p>b，    写出排序语句<br>        select <em> from product order by price desc;<br>4，能够使用聚合函数<br>a，    写出获取总记录数的SQL语句<br>        select count(</em>) from product;<br>b，    写出获取某一列数据总和的SQL语句<br>        select sum(price) from product;<br>c，    写出获取某一列数据平均值的SQL语句<br>        select avg(price) …<br>d，    写出获取某一列数据的最大值的SQL语句<br>        select max(price) …<br>e，    写出获取某一列数据的最小值的SQL语句<br>        select min(price) …<br>5，能够使用SQL语句进行分组查询<br>a，    写出分组的SQL语句<br>        group by 字段名<br>b，    写出分组后条件过滤器的SQL语句<br>        gruup by 字段名 having 聚合函数 条件;<br>6，能够完成数据的备份和恢复<br>    1.备份：在要备份的数据库上右键–&gt;备份/导出–&gt;以SQL转储文件备份数据库<br>    2.恢复：在SQLYog左边右键–&gt;导入–&gt;以SQL转储文件导入数据库。<br>7，能够使用可视化工具连接数据库,操作数据库<br>    使用SQLYog连接数据库。操作数据库</p><p>8，能够说出多表之间的关系及其建表原则<br>a，    说出一对多的应用场景及其建表原则<br>        1).应用场景：客户和订单，分类和商品，部门和员工.<br>        2).在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键.<br>b，    说出多对多的应用场景及其建表原则<br>        1).应用场景：学生和课程、用户和角色<br>        2).需要创建第三张表,中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键.<br>9，能够理解外键约束<br>a，    说出外键约束的作用<br>        作用：强制外键字段的值必须参考主表中主键字段的值。<br>b，    写出创建外键的SQL语句<br>        alter table product add constraint fk_fkname foreign key (categoryid) references category (cid);<br>c，    通过sql语句能够建立多表及其关系<br>        创建表的外键，并且创建外键约束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;01-SQL高级查询-排序：&quot;&gt;&lt;a href=&quot;#01-SQL高级查询-排序：&quot; class=&quot;headerlink&quot; title=&quot;01.SQL高级查询_排序：&quot;&gt;&lt;/a&gt;01.SQL高级查询_排序：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.使用的关键字：order
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://www.top.com/tags/mysql/"/>
    
      <category term="sql" scheme="http://www.top.com/tags/sql/"/>
    
  </entry>
  
</feed>
